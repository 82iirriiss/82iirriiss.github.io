[{"permalink":"//","layout":"default","title":"jekyll-rtd-theme","content":"# jekyll-rtd-theme\n\n![CI](https://github.com/rundocs/jekyll-rtd-theme/workflows/CI/badge.svg?branch=develop)\n![jsDelivr](https://data.jsdelivr.com/v1/package/gh/rundocs/jekyll-rtd-theme/badge)\n\nJust another documentation theme compatible with GitHub Pages\n\n## What it does?\n\nThis theme is inspired by [sphinx-rtd-theme](https://github.com/readthedocs/sphinx_rtd_theme) and refactored with:\n\n- [@primer/css](https://github.com/primer/css)\n- [github-pages](https://github.com/github/pages-gem) ([dependency versions](https://pages.github.com/versions/))\n\n## Quick start\n\n```yml\nremote_theme: rundocs/jekyll-rtd-theme\n```\n\nYou can [generate](https://github.com/rundocs/starter-slim/generate) with the same files and folders from [rundocs/starter-slim](https://github.com/rundocs/starter-slim/)\n\n## Usage\n\nDocumentation that can guide how to create with Github pages, please refer to [rundocs.io](https://rundocs.io) for details\n\n## Features\n\n- Shortcodes (Toasts card, mermaid)\n- Pages Plugins (emoji, gist, avatar, mentions)\n- Auto generate sidebar\n- [Attribute List Definitions](https://kramdown.gettalong.org/syntax.html#attribute-list-definitions) (Primer/css utilities, Font Awesome 4)\n- Service worker (caches)\n- SEO (404, robots.txt, sitemap.xml)\n- Canonical Link (Open Graph, Twitter Card, Schema data)\n\n## Options\n\n| name | default value | description |\n| ------------- | -------------------- | ----------------- |\n| `title` | repo name | |\n| `description` | repo description | |\n| `url` | user domain or cname | |\n| `baseurl` | repo name | |\n| `lang` | `en` | |\n| `direction` | `auto` | `ltr` or `rtl` |\n| `highlighter` | `rouge` | Cannot be changed |\n\n```yml\n# folders sort\nreadme_index:\n with_frontmatter: true\n\nmeta:\n key1: value1\n key2: value2\n .\n .\n .\n\ngoogle:\n gtag:\n adsense:\n\nmathjax: # this will prased to json, default: {}\n\nmermaid:\n custom: # mermaid link\n initialize: # this will prased to json, default: {}\n\nscss: # also _includes/extra/styles.scss\nscript: # also _includes/extra/script.js\n\ntranslate:\n # shortcodes\n danger:\n note:\n tip:\n warning:\n # 404\n not_found:\n # copyright\n revision:\n # search\n searching:\n search:\n search_docs:\n search_results:\n search_results_found: # the \"#\" in this translate will replaced with results size!\n search_results_not_found:\n\nplugins:\n - jemoji\n - jekyll-avatar\n - jekyll-mentions\n```\n\n## The license\n\nThe theme is available as open source under the terms of the MIT License\n","dir":"/","name":"README.md","path":"README.md","url":"/"},{"sort":null,"permalink":"/python/tip/","layout":"default","title":"python 코딩 Tip!","content":"<h1 id=\"python-코딩-tip\">python 코딩 Tip!</h1>\n\n<p>source: <code class=\"language-plaintext highlighter-rouge\">python/tip/README.md</code></p>\n","dir":"/python/tip/","name":"README.md","path":"python/tip/README.md","url":"/python/tip/"},{"sort":1,"layout":"default","title":"아파치 웹 서버와 연동","content":"<h1 id=\"아파치-웹-서버와-연동\">아파치 웹 서버와 연동</h1>\n<blockquote>\n <p>아파치 웹서버 프로그램 : httpd <br />\n아파치 웹서버와 장고 연동 프로그램 : mod_wsgi</p>\n</blockquote>\n\n<h2 id=\"1-리눅스-환경-설정\">1. 리눅스 환경 설정</h2>\n<p>. CentOs 7~\n. Python3.6 (Centos 7~8이 Python3.6까지 지원하고 있음)</p>\n\n<h3 id=\"1-리눅스-기본-설정\">(1) 리눅스 기본 설정</h3>\n<ol>\n <li>리눅스에서 배포할 사용자로 로그인 ( 나의 경우, centos 사용자로 로그인)</li>\n <li>dnf (centos 패키지 관리프로그램) 업데이트 : <code class=\"language-plaintext highlighter-rouge\">sudo dnf update</code></li>\n <li>python 설치\n<code class=\"language-plaintext highlighter-rouge\">$ sudo dnf install python3.*</code></li>\n <li>http, http-devel 설치 (작성 당시 2.4)\n<code class=\"language-plaintext highlighter-rouge\">$ sudo dnf install http http-devel</code></li>\n <li>git 설치\n<code class=\"language-plaintext highlighter-rouge\">$ sudo dnf install git</code></li>\n</ol>\n\n<h3 id=\"2-python-가상환경-설정-및-장고-설치\">(2) python 가상환경 설정 및 장고 설치</h3>\n<ol>\n <li>파이썬 가상환경을 만들 디렉토리 생성\n<code class=\"language-plaintext highlighter-rouge\">/home/centos&gt; mkdir VENV</code></li>\n <li>가상환경 디렉토리로 이동 후, 가상환경 설치\n <div class=\"language-console highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"gp\">/home/centos&gt;</span><span class=\"w\"> </span><span class=\"nb\">cd </span>VENV\n<span class=\"gp\">/home/contos&gt;</span><span class=\"w\"> </span>virtualenv <span class=\"nt\">--python</span> python3.6 v3PyBook \n</code></pre>  </div> </div>\n <ul>\n <li>‘python3.6’버전을 설치하며, 설치할 장소는 ‘v3PyBook’ 으로 지정</li>\n </ul>\n </li>\n <li>가상환경 실행\n <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>/home/centos&gt; source VENV/v3PyBook/bin/activate\n(v3PyBook)/home/centos&gt;\n</code></pre>  </div> </div>\n </li>\n <li>가상환경에서 Django 설치 (관리자 권한에서 설치)\n <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>(v3PyBook)/home/centos&gt; su\npassword: [root 사용자 비밀번호 입력]\n(v3PyBook)/home/centos&gt; pip install Django==2.0\n</code></pre>  </div> </div>\n </li>\n</ol>\n\n<h2 id=\"2-프로젝트-설정-변경\">2. 프로젝트 설정 변경</h2>\n\n<h3 id=\"1-프로젝트-다운로드\">(1) 프로젝트 다운로드</h3>\n<ol>\n <li>프로젝트를 다운받을 디렉토리를 생성 후, 해당 디렉토리로 이동\n <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>/home/centos&gt; mkdir pyBook\n/home/centos&gt; cd pyBook\n</code></pre>  </div> </div>\n </li>\n <li><strong>github</strong>에서 프로젝트를 다운로드 받는다. (교재의 소스를 다운받았다.)\n<code class=\"language-plaintext highlighter-rouge\">/home/centos/pyBook&gt;git clone 'https://github.com/millni/Django-hanbit.git'</code></li>\n <li>프로젝트의 이름을 ‘ch8(임의의 이름)’으로 변경한다.\n<code class=\"language-plaintext highlighter-rouge\">/home/centos/pyBook&gt;mv python-project ch8</code></li>\n</ol>\n\n<h3 id=\"2-프로젝트-settingspy-파일-변경\">(2) 프로젝트 settings.py 파일 변경</h3>\n<p>. ch8/mysite/settings.py 파일</p>\n\n<ol>\n <li>DEBUG 모드 변경 : 운영모드로 전환\n <div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\"># DEBUG = True\n</span><span class=\"n\">DEBUG</span> <span class=\"o\">=</span> <span class=\"bp\">False</span>\n</code></pre>  </div> </div>\n </li>\n <li>ALLOWED_HOST 변경 : 아파치 서버의 ip (현재는 아파치와 프로젝트가 같은 PC 이므로 꼭 변경이 필요하지 않음)\n <div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\"># ALLOWED_HOST = ['localhost','127.0.0.1']\n</span><span class=\"n\">ALLOWED_HOST</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">'192.168.111.100'</span><span class=\"p\">,</span><span class=\"s\">'localhost'</span><span class=\"p\">,</span><span class=\"s\">'127.0.0.1'</span><span class=\"p\">]</span>\n</code></pre>  </div> </div>\n </li>\n <li>STATIC_ROOT 경로 추가\n <div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">STATIC_ROOT</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"p\">.</span><span class=\"n\">path</span><span class=\"p\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">BASE_DIR</span><span class=\"p\">,</span> <span class=\"s\">'www_dir'</span><span class=\"p\">,</span> <span class=\"s\">'static'</span><span class=\"p\">)</span>\n</code></pre>  </div> </div>\n </li>\n</ol>\n\n<h3 id=\"3-static-파일-모으기\">(3) STATIC 파일 모으기</h3>\n<p>. (가상환경에서 실행)</p>\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>(v3PyBook)/home/centos/pyBook/ch8&gt; python manage.py collectstatic \n</code></pre>  </div></div>\n\n<h3 id=\"4-secret_key-변경--하드코딩---파일\">(4) SECRET_KEY 변경 : 하드코딩 -&gt; 파일</h3>\n\n<ol>\n <li>settings.py 변경\n <div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\"># SECRET_KEY = 어쩌구저쩌구~~\n</span><span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"p\">.</span><span class=\"n\">path</span><span class=\"p\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">BASE_DIR</span><span class=\"p\">,</span> <span class=\"s\">'www_dir'</span><span class=\"p\">,</span> <span class=\"s\">'secret_key.txt'</span><span class=\"p\">))</span> <span class=\"k\">as</span> <span class=\"n\">f</span><span class=\"p\">:</span>\n<span class=\"n\">SECRET_KEY</span> <span class=\"o\">=</span> <span class=\"n\">f</span><span class=\"p\">.</span><span class=\"n\">read</span><span class=\"p\">().</span><span class=\"n\">strip</span><span class=\"p\">()</span>\n</code></pre>  </div> </div>\n </li>\n <li>secret_key.txt 파일 생성 후 키 입력\n <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>/home/centos/pyBook/ch8/www_dir&gt; vim secret_key.txt\n어쩌구저쩌구~~~\n</code></pre>  </div> </div>\n </li>\n</ol>\n\n<h3 id=\"5-dbsqlite3-파일-위치-변경-및-migrate\">(5) db.sqlite3 파일 위치 변경 및 migrate</h3>\n<ol>\n <li>settings.py 파일에서 DB 파일의 위치를 수정한다\n <div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">DATABASES</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n <span class=\"p\">.</span> <span class=\"p\">.</span> <span class=\"p\">.</span>\n <span class=\"s\">'NAME'</span><span class=\"p\">:</span> <span class=\"n\">os</span><span class=\"p\">.</span><span class=\"n\">path</span><span class=\"p\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">BASE_DIR</span><span class=\"p\">,</span> <span class=\"s\">'db'</span><span class=\"p\">,</span> <span class=\"s\">'db.sqlite3'</span><span class=\"p\">),</span>\n<span class=\"p\">}</span>\n</code></pre>  </div> </div>\n </li>\n <li>ch8 아래 db 디렉토리를 생성 후 db.sqlite3을 옮긴다\n <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>/home/centos/pyBook/ch8&gt; mkdir db\n/home/centos/pyBook/ch8&gt; mv db.sqlite3 db/db.sqlite3\n/hoem/centos/pyBook/ch8&gt; python manage.py migrate\n</code></pre>  </div> </div>\n </li>\n</ol>\n\n<h3 id=\"6-db-폴더와-log-폴더-권한-변경\">(6) db 폴더와 log 폴더 권한 변경</h3>\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>/home/centos/pyBook/ch8&gt; sudo chmod 777 db\n/home/centos/pyBook/ch8&gt; sudo chmod 666 db/db.sqlite3\n\n/home/centos/pyBook/ch8&gt; sudo chmod 777 log\n/home/centos/pyBook/ch8&gt; sudo chmod 666 log/mysite.log\n</code></pre>  </div></div>\n\n<h2 id=\"mod_wsgi-확장모듈\">mod_wsgi 확장모듈</h2>\n<blockquote>\n <p>내장모드 : 파이썬에 mod_wsgi 모듈을 내장하여 WSGI 프로그램을 실행하는 방식. 소스 반영 시, 해당 아파칭에 배치중인 모든 어플리케이션 재가동 해야 함 <br />\n데몬모드 : WSGI 전용 프로세스에서 WSGI 어플리케이션을 관리함. 상대적으로 적은 메모리 차지하고 각 어플리케이션 간 영향을 최소화 함. 데몬모드를 권장함</p>\n</blockquote>\n\n<h3 id=\"1-mod_wsgi-설치\">(1) mod_wsgi 설치</h3>\n<p>. mod_wsgi 프로그램 컴파일 파이썬 버전과 장고 어플리케이션 실행하는 파이썬 버젼이 같아야 함</p>\n<ol>\n <li>\n <p>가상환경 내에서 mod_wsgi 설치</p>\n\n <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code> /home/centos/VENV/v3PyBook&gt; source bin/activate\n (v3PyBook)/home/centos/VENV/v3PyBook&gt;sudo pip install mod_wsgi\n\n //만약 sudo 가 안 먹히면, su 를 입력하여 관리자 모드에서 pip 명령어 실행\n</code></pre>  </div> </div>\n </li>\n <li>\n <p>설치 확인</p>\n\n <p>. mod_wsgi-express 명령으로 아파치 기본페이지 동작 확인</p>\n\n <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code> (v3PyBook) $  mod_wsgi-express start-server\n</code></pre>  </div> </div>\n <ul>\n <li>웹브라우저에서 ‘http://localhost:8000’ 입력 시, 화면에서 아파치 메인화면이 보여짐</li>\n </ul>\n\n <p>. mod_wsgi-express 로 내 프로젝트 동작 확인 (꼭 ch8에서 확인할 것)</p>\n\n <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code> (v3pyBook)/home/centos/pyBook/ch8&gt; mod_wsgi-express start-server mysite/wsgi.py\n</code></pre>  </div> </div>\n <ul>\n <li>웹브라우저에서 ‘http://localhost:8000’ 입력 시, 화면에서 프로젝트 메인화면이 보여짐</li>\n </ul>\n\n <p>. python 테스트 서버로 프로젝트 동작 확인</p>\n\n <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code> (v3pyBook)/home/centos/pyBook/ch8&gt; python manage.py runserver\n</code></pre>  </div> </div>\n <ul>\n <li>웹브라우저에서 ‘http://localhost:8000’ 입력 시, 화면에서 프로젝트 메인화면이 보여짐</li>\n </ul>\n </li>\n</ol>\n\n<h3 id=\"2-mod_wsgi-아파치-모듈로-등록하기\">(2) mod_wsgi 아파치 모듈로 등록하기</h3>\n<blockquote>\n <p>mod_wsgi를 아파치의 확장모듈로 설치 하기 <br />\n아파치 설정 수정하기</p>\n</blockquote>\n\n<ol>\n <li>mod_wsgi를 아파치 확장모듈로 설치\n <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code> (v3PyBook)/home/centos/VENV/v3PyBook &gt; sudo /home/centos/VENV/v3PyBook/bin/mod_wsgi-express install-module\n\n LoadModule wsgi_module \"/usr/lib64/httpd/modules/mod_wsgi-py36.cpython-36m-x86_64-linux-gnu.so\"\n WSGIPythonHome \"/home/centos/VENV/v3PyBook\"\n</code></pre>  </div> </div>\n </li>\n <li>mod_wsgi 를 아파치 확장모듈로 등록하기\n <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code> (v3PyBook) $ cd /etc/httpd/conf.modules.d/\n (v3PyBook) $ sudo vi 10-wsgi.conf\n\n LoadModule wsgi_module \"/usr/lib64/httpd/modules/mod_wsgi-py36.cpython-36m-x86_64-linux-gnu.so\"\n</code></pre>  </div> </div>\n <ul>\n <li>1의 설치 결과로 나온 LoadModule wsgi …(생략)…linux-gnu.so” 를 *.conf 파일에 작성하면 된다.</li>\n <li>이름은 임의로 해도 되지만, 확장자는 꼭 *.conf 로 지정한다.</li>\n </ul>\n </li>\n</ol>\n\n<h2 id=\"mod_wsgi를-내장모드로-웹서버-실행\">mod_wsgi를 내장모드로 웹서버 실행</h2>\n<h3 id=\"1-아파치-설정\">(1) 아파치 설정</h3>\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>$ cd /etc/httpd/conf.d/\n$ sudo vim django.conf\n\nWSGIScriptAlias /   /home/centos/pyBook/ch8/mysite/wsgi.py //1\nWSGIPythonHome /home/centos/VENV/v3PyBook //2\nWSGIPythonPath /home/centos/pyBook/ch8 //3\n\n&lt;Directory /home/centos/pyBook/ch8/mysite&gt; // 프로젝트 디렉토리\n&lt;Files wsgi.py&gt;\nRequire all granted // 접근허가\n&lt;/Files&gt;\n&lt;/Directory&gt;\n\nAlias /static/ /home/centos/pyBook/ch8/www_dir/static/\n&lt;Directory /home/centos/pyBook/ch8/www_dir/static&gt; // 정적파일 디렉토리\nRequire all granted  //접근 허가\n&lt;/Directory&gt;\n</code></pre>  </div></div>\n<ul>\n <li>\n <ol>\n <li>/etc/httpd/conf/httpd.conf 에 직접 추가 해도 되고, /ect/httpd/conf.d/ 폴더 하위에 *.conf 로 추가해도 된다\n (httpd.conf 에서 conf.d 디렉토리 하위의 *.conf를 모두 불러들이기 때문)</li>\n </ol>\n </li>\n <li>\n <ol>\n <li>WSGIPythonHome 으로 파이썬 가상공간의 홈 경롤르 잡아준다 (잘못 쓸 경우, ‘client denied …’ 에러나 Permission 에러가 발생함 )</li>\n </ol>\n </li>\n <li>\n <ol>\n <li>WSGIPythonPath 로 프로젝트 base 디렉토리를 잡아준다.</li>\n </ol>\n </li>\n</ul>\n\n<h3 id=\"2-작업-확인하기-아파치-웹서버로-프로젝트-실행\">(2) 작업 확인하기 (아파치 웹서버로 프로젝트 실행)</h3>\n<ul>\n <li>만약, SELinux 가 적용되어 있을 시, 작동이 안할 수도 있으므로 SELinux 설정 변경\n <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>$ sudo getenforce\nEnforcing\n$ sudo setenforce permissive\n$ sudo getenforce\nPermissive\n</code></pre>  </div> </div>\n </li>\n <li>\n <p>로그인 중에만 일시 적용되며, 완전히 변경하고 싶으면 /etc/selinux/config 파일에서 변경 해야 함</p>\n </li>\n <li>\n <p>아파치를 가동한다\n<code class=\"language-plaintext highlighter-rouge\">$ sudo apachectl start</code></p>\n </li>\n <li>웹 브라우저에서 http://localhost 를 실행 시, 내 프로젝트 메인화면이 실행된다.</li>\n</ul>\n\n<h2 id=\"mod_wsgi를-데몬모드로-웹서버-실행\">mod_wsgi를 데몬모드로 웹서버 실행</h2>\n\n<h3 id=\"1-아파치-설정-1\">(1) 아파치 설정</h3>\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>$ cd /etc/httpd/conf.d/\n$ sudo vim django.conf\n\nWSGIScriptAlias /   /home/centos/pyBook/ch8/mysite/wsgi.py //1\nWSGIDaemonProcess mygroup python-home=/home/centos/VENV/v3PyBook python-path=/home/centos/VENV/pyBook/ch8 //2\nWSGIProcessGroup mygroup //3\n\n&lt;Directory /home/centos/pyBook/ch8/mysite&gt; // 프로젝트 디렉토리\n&lt;Files wsgi.py&gt;\nRequire all granted // 접근허가\n&lt;/Files&gt;\n&lt;/Directory&gt;\n\nAlias /static/ /home/centos/pyBook/ch8/www_dir/static/\n&lt;Directory /home/centos/pyBook/ch8/www_dir/static&gt; // 정적파일 디렉토리\nRequire all granted  //접근 허가\n&lt;/Directory&gt;\n</code></pre>  </div></div>\n<ul>\n <li>\n <ol>\n <li>아파치 웹서비스의 루트(/)와 wsgi.py 파일의 위치를 맵핑. / 로 시작하는 모든 요청은 wsgi.py 파일의 WSGI application에서 처리한다는 의미</li>\n </ol>\n </li>\n <li>\n <ol>\n <li>장고를 실행하기 위한 데몬 프로세스 정의</li>\n </ol>\n </li>\n <li>\n <ol>\n <li>장고 프로세스에서 실행되는 프로세스 그룹 지정 같은 프로세스 그룹에 할당된 애플리케이션은 같은 데몬 프로세스에서 실행됨</li>\n </ol>\n </li>\n</ul>\n\n<h3 id=\"2-작업-확인하기-아파치-웹서버로-프로젝트-실행-1\">(2) 작업 확인하기 (아파치 웹서버로 프로젝트 실행)</h3>\n<ul>\n <li>\n <p>아파치를 가동한다 <br />\n<code class=\"language-plaintext highlighter-rouge\">$ sudo apachectl start</code></p>\n </li>\n <li>\n <p>웹 브라우저에서 http://localhost 를 실행 시, 내 프로젝트 메인화면이 실행된다.</p>\n </li>\n</ul>\n","dir":"/python/ApacheWebServerDeploy/","name":"apacheWebServerDeploy.md","path":"python/ApacheWebServerDeploy/apacheWebServerDeploy.md","url":"/python/ApacheWebServerDeploy/apacheWebServerDeploy.html"},{"sort":1,"layout":"default","title":"Admin 사이트 꾸미기","content":"# Admin 사이트 꾸미기\n\n## 1. 필드 순서 변경하기\n - polls/admin.py\n ![admin site 필드 순서 변경](/assets/images/admin_site_feild_order_change.png)\n\n```python\nfrom django.contrib import admin\nfrom polls.models import Question, Choice\n\nclass QuestionAdmin(admin.ModelAdmin):\n # fields 라는 속성이름은, 이미 정해져 있는 속성이름 이므로, 변경하면 안됨\n fields = ['pub_date','question_text']\n\nadmin.site.register(Question, QuestionAdmin)\nadmin.site.register(Choice)\n```\n\n1. ModelAdmin 을 상속받아 새로운 QuestionAdmin 클래스 정의\n2. QuestionAdmin 클래스에 fields 속성 추가하여, 보여주고자 하는 순서대로 컬럼이름을 나열\n3. QuestionAdmin 클래스를 admin.site.register(Question) 의 두번째 인자로 추가\n\n## 2. 각 필드 분리해서 보여주기\n - polls/admin.py\n ![admin site 필드 분리해서 보여주기](/assets/images/admin_site_seperate_column.png)\n\n```python\nfrom django.contrib import admin\nfrom polls.models import Question, Choice\n# Register your models here.\n\nclass QuestionAdmin(admin.ModelAdmin):\n # fields = ['pub_date','question_text']\n # fieldsets 라는 속성이름은, 이미 정해져 있는 속성이름 이므로, 변경하면 안됨\n fieldsets = [('Question Statement', {'fields':['question_text']}),\n ('Date Information', {'fields':['pub_date']})]\n\nadmin.site.register(Question, QuestionAdmin)\nadmin.site.register(Choice)\n```\n\n1. fieldssets 속성에 있는 각 튜플의 첫번째 인자가 해당 필드의 '제목' 이 됨\n\n## 3. 필드 접기\n- polls/admin.py\n ![admin site 필드 접기](/assets/images/admin_site_field_collapse.png)\n\n ```python\nclass QuestionAdmin(admin.ModelAdmin):\n # fields = ['pub_date','question_text']\n fieldsets = [('Question Statement', {'fields':['question_text']}),\n ('Date Information', {'fields':['pub_date'],'classes':['collapse']}),]\n\nadmin.site.register(Question, QuestionAdmin)\nadmin.site.register(Choice)\n```\n\n1. fieldsets 속성의 튜플에서 필드접기 하고 싶은 필드 속성 뒤에 `classes':['collapse']` 를 추가해 준다.\n\n## 4. Question 테이블에 외래키를 가지고 있는 Choice 테이블을 한 화면에서 여러 개 입력하기\n- polls/admin.py\n ![Choice 테이블을 한 화면에서 여러 개 입력](/assets/images/admin_site_fk_add_in_once.png)\n\n```python\nfrom django.contrib import admin\nfrom polls.models import Question, Choice\n# Register your models here.\n\nclass ChoiceInline(admin.StackedInline):\n model = Choice\n extra = 2\n\nclass QuestionAdmin(admin.ModelAdmin):\n # fields = ['pub_date','question_text']\n fieldsets = [('Question Statement', {'fields':['question_text']}),\n ('Date Information', {'fields':['pub_date'],'classes':['collapse']}),]\n inlines = [ChoiceInline]\n\nadmin.site.register(Question, QuestionAdmin)\nadmin.site.register(Choice)\n```\n\n1. admin.StackedOnline 클래스를 상속받는 Choice 클래스를 선언하고, model 속성과 extra 속성을 작성한다.\n2. QuestionAdmin 클래스에 inlines 속성으로 ChoiceInline 클래스를 지정한다.\n\n## 5. 테이블 형식으로 보여주기\n- polls/admin.py\n ![Choice 테이블을 한 화면에서 여러 개 입력](/assets/images/admin_site_table_format.png)\n\n ```python\nfrom django.contrib import admin\nfrom polls.models import Question, Choice\n# Register your models here.\n\n# 상속받는 클래스만 변경\nclass ChoiceInline(admin.TabularInline):\n model = Choice\n extra = 2\n\nclass QuestionAdmin(admin.ModelAdmin):\n # fields = ['pub_date','question_text']\n fieldsets = [('Question Statement', {'fields':['question_text']}),\n ('Date Information', {'fields':['pub_date'],'classes':['collapse']}),]\n inlines = [ChoiceInline]\n\nadmin.site.register(Question, QuestionAdmin)\nadmin.site.register(Choice)\n ```\n\n 1. ChoiceInline 클래스에서 상속받는 클래스만 admin.TabularInline 으로 변경하면 됨\n\n## 6. 레코드 리스트 컬럼 지정하기\n\n- polls/admin.py\n- 기본설정은 models.py에서 정의한 __str__() 메소드의 리턴값을 사용\n- [변경전]\n![기본 리스트 컬럼](/assets/images/admin_site_Question_list.png)\n- [변경후]\n![기본 리스트 컬럼](/assets/images/admin_site_question_list_after.png)\n\n```python\nfrom django.contrib import admin\nfrom polls.models import Question, Choice\n# Register your models here.\n\nclass ChoiceInline(admin.TabularInline):\n model = Choice\n extra = 2\n\nclass QuestionAdmin(admin.ModelAdmin):\n # fields = ['pub_date','question_text']\n fieldsets = [('Question Statement', {'fields':['question_text']}),\n ('Date Information', {'fields':['pub_date'],'classes':['collapse']}),]\n inlines = [ChoiceInline]\n list_display = ('question_text','pub_date')\n\nadmin.site.register(Question, QuestionAdmin)\nadmin.site.register(Choice)\n```\n\n1. QuestionAdmin 클래스에 'list_display' 속성을 보여주고자 하는 컬럼 이름으로 작성한다. (컬럼이름과 다르면 에러 발생.)\n\n## 7. list_fileter 필터\n- polls/admin.py\n![리스트 필터](/assets/images/admin_site_list_filter.png)\n\n```python\nfrom django.contrib import admin\nfrom polls.models import Question, Choice\n# Register your models here.\n\nclass ChoiceInline(admin.TabularInline):\n model = Choice\n extra = 2\n\nclass QuestionAdmin(admin.ModelAdmin):\n # fields = ['pub_date','question_text']\n fieldsets = [('Question Statement', {'fields':['question_text']}),\n ('Date Information', {'fields':['pub_date'],'classes':['collapse']}),]\n inlines = [ChoiceInline]\n list_display = ('question_text','pub_date')\n list_filter = ['pub_date']\n\nadmin.site.register(Question, QuestionAdmin)\nadmin.site.register(Choice)\n```\n\n1. list_filter 속성에 데이터를 필터링 하고자 하는 컬럼이름을 지정한다.\n2. 'pub_date' 컬럼에 필터를 적용하면, 지정된 기간안에 있는 데이터들만 볼 수 있다.\n\n## 8. search_filter\n> 데이터를 검색 할 수 있는 검색 필드가 생기게 된다.\n\n.polls/admin.py\n![서치 필터](/assets/images/admin_site_search_filter.png)\n\n```python\nfrom django.contrib import admin\nfrom polls.models import Question, Choice\n# Register your models here.\n\nclass ChoiceInline(admin.TabularInline):\n model = Choice\n extra = 2\n\nclass QuestionAdmin(admin.ModelAdmin):\n # fields = ['pub_date','question_text']\n fieldsets = [('Question Statement', {'fields':['question_text']}),\n ('Date Information', {'fields':['pub_date'],'classes':['collapse']}),]\n inlines = [ChoiceInline]\n list_display = ('question_text','pub_date')\n list_filter = ['pub_date']\n search_fields = ['question_text']\n\nadmin.site.register(Question, QuestionAdmin)\nadmin.site.register(Choice)\n```\n\n1. search_filter 속성에 검색하고자 하는 컬럼을 지정해 준다.\n\n## 9. admin.py 변경 내역 정리\n\n```python\nfrom django.contrib import admin\nfrom polls.models import Question, Choice\n# Register your models here.\n\nclass ChoiceInline(admin.TabularInline): # Question, Choice 한 화면에서 보기\n model = Choice\n extra = 2\n\nclass QuestionAdmin(admin.ModelAdmin):\n # fields = ['pub_date','question_text'] # 필드 순서 변경\n fieldsets = [('Question Statement', {'fields':['question_text']}), # 필드 분리하여 보여주기\n ('Date Information', {'fields':['pub_date'],'classes':['collapse']}),] # 필드 펼치기 기능 추가\n inlines = [ChoiceInline] # Choice 모델 클래스 같이 보기 \n list_display = ('question_text','pub_date') # 레코드 리스트 컬럼 지정하기\n list_filter = ['pub_date'] # 리스트 필터 지정하기\n search_fields = ['question_text'] # 레코드 검색 필드 추가하기\n\nadmin.site.register(Question, QuestionAdmin)\nadmin.site.register(Choice)\n```\n\n## 10. Admin site 템플릿 수정하기\n> Admin 사이트를 개발자 취향에 맞게 수정 할 수 있음\n\n1. django의 설치 위치를 확인 한다. \n `$>python -c 'import django; print(django.__path__)`\n\n2. 프로젝트 레벨에 /templates/admin 폴더를 생성한다.\n ```\n ~ch3>mkdir templates\n ~ch3>mkdir templates/admin\n ```\n\n3. django 설치 디렉토리 하위의 base_site.html 파일을 방금 생성한 templates/admin 하위로 복사 한다.\n ```\n ~ch3>cp [django설치경로, (1) 에서의 아웃풋]/contrib/admin/templates/admin/base_site.html ./templates/admin/base_site.html\n ```\n\n4. settings.py 파일에 추가한 templates 경로를 작성한다.\n . ch3/mysite/settings.py\n ```\n ..(생략)\n TEMPLATES = [\n 'DIRS'=[os.path.join(BASE_DIR, 'templates')],\n ]\n ...(생략)\n ```\n\n5. base_site.html 파일을 수정한다.\n\n ```python\n {% raw %}\n # 아래 1줄 수정해 보자\n <h1 id='site-name'><a href=\"{%url 'admin:index' %}\">KYM Polls Administration</a></h1>\n {% endraw %}\n ```\n6. 수정된 화면 확인하기\n - http://http://127.0.0.1:8000/admin/\n ![admin site page](/assets/images/admin_site_base_site_html.png)","dir":"/python/DjangoCoreFunction/","name":"decorateAdminSite.md","path":"python/DjangoCoreFunction/decorateAdminSite.md","url":"/python/DjangoCoreFunction/decorateAdminSite.html"},{"sort":1,"layout":"default","title":"장고 프로그램 설치","content":"# 장고 프로그램 설치\n\n> <font color='red'>python, pip 설치되어 있어야 함 (python 설치 시, pip 자동 설치)</font> \n\n## 1. 윈도우/리눅스/macOs 공통 설치\n```\n>pip install Django\n```\n\n- 리눅스의 경우, sudo pip install Django (sudo를 이용하여 관리자 권한 득)\n\n## 2. Django 제거\n\n```\n>cd (생략, python 설치된 폴더)/site-packages/\n>rm -rf django\n>rm -rf Django*\n```\n\n- 장고가 설치된 디렉토리가 알고 싶다면??\n\n```\n>python -c 'import django; print(django.__path__)'\n```\n\n## 3. Django 버전확인\n```\n> python -m django --version\n```\n","dir":"/python/DjangoWebFramework/","name":"jangoInstall.md","path":"python/DjangoWebFramework/jangoInstall.md","url":"/python/DjangoWebFramework/jangoInstall.html"},{"sort":1,"layout":"default","title":"장고의 wsgi.py 파일","content":"# 장고의 wsgi.py 파일\n\n1. 웹서버와 애플리케이션을 연결하는데 필요한 파일\n2. wsgi.py 에는 웹서버가 애플리케이션을 호출하는데 사용하는 application 객체가 정의되어 있는데, 이름이 반드시 application 이어야 함\n - wsgi.py : `application = get_wsgi_application()`\n3. application 객체의 위치를 지정해 주어야 한다.\n - 웹서버 (Apache, NginX등) : httpd.conf나 uwsgi.ini 설정 파일등에 위치를 명시\n - 장고 개발서버 (runserver) : settings.py 파일에 WSGI_APPLICATION 변수로 지정\n - settings.py : `WSGI_APPLICATION = 'mysite.wsgi.application'`\n4. 웹서버가 application 객체를 호출 하기 위해, 애플리케이션에 대한 설정 정보 로딩. 설정 정보를 wsgi.py 파일에 지정\n - wsgi.py : `os.environ.setdefault(\"DJANGO_SETTINGS_MODULE\", \"mysite.settings\"`\n\n# 장고의 WSGI 인터페이스\n\n1. mysite/wsgi.py : `application=get_wsgi_application()` 의 get_wsgi_application()은 Django site-packages/core/wsgi.py 에 선언된 함수로, WSGI 규격을 작성해 둔 WSGIHandler() 를 반환한다.\n2. 웹서버에서 장고 애플리케이션을 실행하기 위해서는, application 이 정의된 wsgi.py의 위치를 알아야 하므로, 웹서버/WAS서버 설정파일에는 wsgi.py 파일의 경로가 정의되어야 한다.\n","dir":"/python/DjangoWebServerConfig/","name":"wsgi_py_file.md","path":"python/DjangoWebServerConfig/wsgi_py_file.md","url":"/python/DjangoWebServerConfig/wsgi_py_file.html"},{"sort":1,"layout":"default","title":"가상환경 사용하기","content":"# 가상환경 사용하기\n\n## 1. 가상환경 구성해 주는 툴\n- virtualenv 툴 : python 설치 시, 기본으로 제공되는 가상환경 구성 툴\n- venv 모듈 : python3 설치 시, 제공되는 모듈\n\n## 2. 가상환경 사용하는 이유\n- 프로젝트에 따라 별도의 개발 환경을 설치함으로써 다른 파이썬 프로그램에 영향을 주지 않도록 하기 위함\n- 파이썬의 기본 라이브러리는 /usr/local/lib/python3.6/ 에 위치함\n- 별도로 가상환경에서 추가로 설치하는 외부 패키지는 가상환경의 경로 내에 위치함\n\n## 3. 가상환경 만들기\n```bash\n# 파이썬 버전 확인\n$ python --version\n$ python2 --version\n$ python3 --version\n\n# venv 모듈 있는지 확인하기 (-m 옵션은, 파이썬 모듈을 직접 실행하는 옵션)\n$ python -m venv\n$ python2 -m venv\n$ python3 -m venv\n\n# 가상환경을 모아둘 디렉터리 VENV 설치하기\n$ cd /home/centos/\n$ mkdir VENV\n$ cd VENV/\n\n# 가상환경 vDjBook 만들기\n$ python3 -m venv vDjBook\n\n# 가상환경안으로 진입\n$ source /home/centos/VENV/vDjBook/bin/activate\n# 가상환경 안에 있다는 것을 프롬프트에 표시\n(vDjBook) $\n# 가상환경에서 사용하는 파이썬의 실행 위치 확인\n(vDjBook) $ which python3\n\n# 가상환경에 설치된 외부 패키지를 또 다른 가상환경에 똑같이 설치하기\n(vDjBook) $ pip3 freeze > requirements.txt\n(otherVenv) $ pip install -r requirements.txt\n\n# 가상환경에서 빠져나오는 명령어\n(vDjBook) $ deactivate\n\n```\n\n## 4. 가상환경에 장고 패키지 설치하기\n```bash\n# 가상환경 실행\n$ source /home/centos/VENV/vDjBook/bin/activate\n\n# 가상환경에서 장고 패키지 설치\n(vDjBook) $ pip3 install Django\n\n# 파이썬 외부 패키지에 장고가 설치되었는지 확인\n(vDjBook) $ ls -al /home/centos/VENV/vDjBook/lib/python3.6/site-packages/\n```\n\n## 5. 가상환경에 그 외의 패키지 설치하기\n```bash\n# 가상환경 실행\n$ source /home/centos/VENV/vDjBook/bin/activate\n\n# 태그 달기 기능에 필요한 패키지\n(vDjBook) $ pip3 install django-taggit\n(vDjBook) $ pip3 install django-taggit-templatetags2\n\n# 폼 장식하는 패키지\n(vDjBook) $ pip3 install django-widget-tweaks\n\n# 이미지 처리에 필요한 패키지\n(vDjBook) $ pip3 install Pillow\n\n# 파이썬의 다국어 지원 기능에 따라, 지역에 맞는 로컬시간과 일광절양시간을 적용한 시간 적용하기 위한 패키지\n(vDjBook) $ pip3 install pytz\n```\n\n## 6. 패키지 설치 툴 업그레이드 하기\n```bash\n(vDjBook) $ pip3 install -U pip setuptools wheel\n```\n\n## 7. InsecurePlatformWarning 해결하기 \n```bash\n# 패키지 설치중 InsecurePlatformWarning 경고 발생 시, HTTPS 처리하는 openSSL 관련 패키지를 설치 해야 함\n(vDjBook) $ pip3 install pyopenssl ndg-httpsclient pyasn1\n```\n\n## 8. 가상환경에 설치된 패키지 확인하기\n```bash\n(vDjBook) $ pip3 list\n(vDjBook) $ pip3 freeze\n(vDjBook) $ ls -al /home/centos/VENV/vDjBook/lib/python3.6/site-packages/\n```","dir":"/python/JangoDevelopmentBasic/","name":"jangoBasic.md","path":"python/JangoDevelopmentBasic/jangoBasic.md","url":"/python/JangoDevelopmentBasic/jangoBasic.html"},{"sort":1,"layout":"default","title":"NGINX 웹 서버와 연동","content":"# NGINX 웹 서버와 연동\n- 2004년 러시아에서 만든 무료 오픈소스 웹서버\n- 아파치보다 동시처리 능력을 높이고 메모리를 적게 사용\n- NGINX와 장고 사이에서 WAS 역할을 하는 uWSGI 모듈과 gunicorn이 있으나, 대부분 uWSGI를 사용\n\n## 1. 장고 설정 변경하기\n\n### (1) 리눅스 기본 설정\n1. 리눅스에서 배포할 사용자로 로그인 ( 나의 경우, centos 사용자로 로그인)\n2. dnf (centos 패키지 관리프로그램) 업데이트 : `sudo dnf update`\n3. python 설치\n`$ sudo dnf install python3.*`\n4. http, http-devel 설치 (작성 당시 2.4)\n`$ sudo dnf install http http-devel`\n5. git 설치\n`$ sudo dnf install git`\n\n### (2) python 가상환경 설정 및 장고 설치\n1. 파이썬 가상환경을 만들 디렉토리 생성\n`/home/centos> mkdir VENV`\n2. 가상환경 디렉토리로 이동 후, 가상환경 설치 \n```console \n/home/centos> cd VENV\n/home/contos> virtualenv --python python3.6 v3PyBook \n```\n- 'python3.6'버전을 설치하며, 설치할 장소는 'v3PyBook' 으로 지정 \n\n3. 가상환경 실행 \n```\n/home/centos> source VENV/v3PyBook/bin/activate\n(v3PyBook)/home/centos>\n```\n\n4. 가상환경에서 Django 설치 (관리자 권한에서 설치)\n```\n(v3PyBook)/home/centos> su\npassword: [root 사용자 비밀번호 입력]\n(v3PyBook)/home/centos> pip install Django==2.0\n```\n\n## 2. 프로젝트 설정 변경\n\n### (1) 프로젝트 다운로드\n1. 프로젝트를 다운받을 디렉토리를 생성 후, 해당 디렉토리로 이동\n```\n/home/centos> mkdir pyBook\n/home/centos> cd pyBook\n```\n2. **github**에서 프로젝트를 다운로드 받는다. (교재의 소스를 다운받았다.)\n`/home/centos/pyBook>git clone 'https://github.com/millni/Django-hanbit.git'`\n3. 프로젝트의 이름을 'ch8(임의의 이름)'으로 변경한다.\n`/home/centos/pyBook>mv python-project ch8` \n\n### (2) 프로젝트 settings.py 파일 변경\n. ch8/mysite/settings.py 파일\n\n1. DEBUG 모드 변경 : 운영모드로 전환\n```python\n# DEBUG = True\nDEBUG = False\n```\n\n2. ALLOWED_HOST 변경 : 아파치 서버의 ip (현재는 아파치와 프로젝트가 같은 PC 이므로 꼭 변경이 필요하지 않음)\n```python\n# ALLOWED_HOST = ['localhost','127.0.0.1']\nALLOWED_HOST = ['192.168.111.100','localhost','127.0.0.1']\n```\n\n3. STATIC_ROOT 경로 추가\n```python\nSTATIC_ROOT = os.path.join(BASE_DIR, 'www_dir', 'static')\n```\n\n### (3) STATIC 파일 모으기\n. (가상환경에서 실행)\n```\n(v3PyBook)/home/centos/pyBook/ch8> python manage.py collectstatic \n```\n\n### (4) SECRET_KEY 변경 : 하드코딩 -> 파일\n\n1. settings.py 변경\n```python\n# SECRET_KEY = 어쩌구저쩌구~~\nwith open(os.path.join(BASE_DIR, 'www_dir', 'secret_key.txt')) as f:\n SECRET_KEY = f.read().strip()\n```\n\n2. secret_key.txt 파일 생성 후 키 입력\n```\n/home/centos/pyBook/ch8/www_dir> vim secret_key.txt\n어쩌구저쩌구~~~\n```\n\n### (5) db.sqlite3 파일 위치 변경 및 migrate\n1. settings.py 파일에서 DB 파일의 위치를 수정한다\n```python\nDATABASES = {\n . . .\n 'NAME': os.path.join(BASE_DIR, 'db', 'db.sqlite3'),\n}\n```\n\n2. ch8 아래 db 디렉토리를 생성 후 db.sqlite3을 옮긴다\n```\n/home/centos/pyBook/ch8> mkdir db\n/home/centos/pyBook/ch8> mv db.sqlite3 db/db.sqlite3\n/hoem/centos/pyBook/ch8> python manage.py migrate\n```\n\n### (6) db 폴더와 log 폴더 권한 변경\n```\n/home/centos/pyBook/ch8> sudo chmod 777 db\n/home/centos/pyBook/ch8> sudo chmod 666 db/db.sqlite3\n\n/home/centos/pyBook/ch8> sudo chmod 777 log\n/home/centos/pyBook/ch8> sudo chmod 666 log/mysite.log\n```\n\n## 3. NGINX 설치\n> https://docs.nginx.com 사이트 참조. NGINX Plus > Admin Guide > Installing NGINX and NGINX Plus 로 이동하여 상세 정보 확인 \n\n. NGINX 설치 시 선택 항목\n\n|선택항목 | 선택 | 가능한 다른 선택들 |\n|---------|------|--------------------|\n|솔루션명 |NGINX Open Source |NGINX Plus(유료) |\n|버전 |Stable |Mainline(시험용 기능 포함) |\n|컴파일여부 |Prebuilt |Compiling from Source |\n|서버 OS | CentOs or RHEL |Debian, Ubuntu, SUSE |\n|저장소 |NGINX 저장소 신규 생성 |OS 제공 기본 저장소 사용 |\n\n1. 저장소 생성\n ```\n $ sudo vi /etc/yum.repos.d/nginx.repo\n\n [nginx]\n name=nginx repo\n baseurl=http://nginx.org/packages/centos/8/$basearch/\n gpgcheck=0\n enabled=1\n ```\n\n2. 저장소 업데이트\n ```\n $ sudo yum update\n ```\n\n3. 설치완료 후 nginx 가동\n ```\n $ sudo nginx\n ```\n\n4. nginx 정상 가동 확인\n ```\n $ curl -I 127.0.0.1\n\n HTTP/1.1 200 OK\n Server: nginx/1.14.0 \n ```\n - 200 OK가 나오면, 정상가동됨\n\n### <font color='red'> ✤ nginx 명령 </font>\n. nginx 가동 : `$ sudo nginx` \n. nginx 정지 : `$ sudo nginx -s stop` \n. nginx 재가동 : `$ sudo nginx -s reload` \n. nginx 설정 파일 테스트 : `$ sudo nginx -t` \n. nginx 도움말 : `$ sudo nginx -h` \n\n## 4. NGINX 설정\n> 설정파일 위치 : /etc/nginx/conf.d/ \n\n```conf\n$ sudo vim /etc/nginx/conf.d/ch9_nginx.conf\n\nserver {\n listen 8000;\n server_name 127.0.0.1;\n\n # access_log /var/log/nginx/codejob.co.kr_access.log; // 이미 /etc/nginx/nginx.conf에 지정되어 있음.\n # error_log /var/log/nginx/codejob.co.kr_error.log;\n \n location = /favicon.ico {access_log off; log_not_found off; } \n # /favicon.ico 으로 요청이 들어오면, access_log 기록하지 않고, /favicon.ico 을 찾지 못해도 error_log 에 기록하지 않음\n\n location /static/ {\n root /home/centos/pyBook/ch9/www_dir; // 정적파일의 루트 디렉토리 지정\n # alias /home/centos/pyBook/ch9/www_dir/static/; // alias 디렉티브를 사용 할 수도 있음. path 끝에 '/'로 끝나야 함\n }\n\n location / {\n include /home/centos/pyBook/ch9/www_dir/uwsgi_params; // 위의 URL 외의 URL 처리, uwsgi 에 넘겨줄 파라미터 정의\n uwsgi_pass 127.0.0.1:8001; //nginx 에서 uwsgi 프로그램으로 처리르 위임. 웹서버와 wsgi 가 통신하기 위한 ip:port 설정\n # uwsgi_pass unix:///home/centos/pyBook/ch9/www_dir/ch9.sock; // 위의 작업을 UDS(unix domain socket) 방식을 이용해도 됨. 웹서버와 WAS 가 같은 H/W에 존재 할 때는 UDS 방법의 성능이 훨씬 우세함 \n }\n}\n\n$ cp /etc/uwsgi/nginx/uwsgi_params /home/centos/pyBook/ch9/www_dir/ //uwsgi_params 는 uwsgi 를 설치 시 생성될 것임. 이 파일을 장고 프로젝트의 적절한 위치로 복사\n```\n\n## 5. uWSGI 설치\n> uWSGI 공식문서 : <http://uwsgi-docs.readthedocs.io/en/latest/tutorials/Django_and_nginx.html> \n> 운영환경을 만들 때는 전역 설치를 하는 것이 일반적이므로, root 또는 sudo 권한으로 설치 \n\n```\n$ sudo yum install python3-devel\n$ sudo pip3 install uwsgi\n```\n- 주의 : python3-devel (파이썬 라이브러리) 먼저 설치 후 uwsgi 설치\n\n### <font color='red'> ✤ uwsgi 명령 </font>\n- 기동 : `$ uwsgi` \n- 정지 : `$ uwsgi --stop pid-file`\n- 재기동: `$ uwsgi --reload pid-file` \n- 도움말: `$ uwsgi --help` \n\n## 6. uWSGI 설정\n> 장고 프로젝트별 하나의 설정파일 필요함 \n> vassals 는, 자식프로세스를 뜻하는 uWSGI 용어 \n\n```ini\n$ sudo mkdir -p /etc/uwsgi/vassals\n$ sudo vi /etc/uwsgi/vassals/ch9_uwsgi.ini\n\n[uwsgi]\nchdir = /home/centos/pyBook/ch9 # 장고의 베이스 디렉토리\nhome = /home/centos/VENV/v3PyBook # 가상환경 사용 시, 가상환경의 루트 디렉토리 (가상환경 사용하지 않으면 생략)\nmodule = mysite.wsgi:application # wsgi.py 파일의 모듈 경로 및 application 변수\nsocket = :8001 # 웹서버와 통신할 소켓의 포트 번호\n# socket = /home/centos/pyBook/ch9/www_dir/ch9.sock # 웹서버가 UDS 사용 시 소켓 파일의 경로. nginx 설정 파일의 소켓파일과 경로가 같음.\n# chmod-socket = 666\nmaster = True # 별도의 마스터 프로세스가 가동되도록 지정\nprocesses = 5 # uwsgi 가동 시 자식 프로세스를 5개 생성\npidfile = /tmp/ch9-master.pid # 마스터 프로세스 ID를 저장할 파일\nvacuum = True # 프로세스 종료 시 소켓파일을 포함하여 환경변수 클리어\nmax-requests = 5000 # 현 프로세스에서 처리할 최대 요청 개수 지정\ndaemonize = /var/log/uwsgi/ch9.log # 백그라운드에서 프로세스가 실행되도록 데몬화하고 데몬에서 사용할 로그 파일을 지정\n\n$ sudo touch /var/log/uwsgi/ch9.log # 설정파일에서 지정한 로그파일 생성\n$ sudo chmod 666 /var/log/uwsgi/ch9.log # uwsgi 프로세스가 쓸 수 있도록 권한을 변경\n```\n\n## 7. 작업 확인하기\n> nginx는 루트권한으로 실행 해야 함 \n> uwsgi는 루트계정 및 일반사용자 계정으로도 실행 할 수 있음 \n\n### (1) uWSGI Emperor 모드\n- 시스템 전역으로 uwsgi 프로그램을 설치 하였으므로, 루트 권한으로 실행 \n- 루트 권한으로 실행시 모동 Emperor 모드로 실행함 \n- <font color='red' > Emperor 모드 : 설정파일 변경시 자동으로 프로세스 재가동 </font> \n\n1. nginx와 uwsgi 프로그램을 실행한다.\n```bash\n$ sudo nginx\n# 이미 실행 중이라면, 아래의 명령 실행\n$ sudo nginx -s reload\n# uwsgi 서버 가동, uid,gid는 uwsgi 프로세스의 주인이 될 사용자와 그룹 아이디를 지정\n# uwsgi 명령에 옵션을 붙여 실행 할 수도 있지만, \n# *.ini 파일에 명령을 기록 후 *.ini 파일을 실행 시킬 수도 있음\n$ sudo uwsgi --emperor /etc/uwsgi/vassals --uid centos --gid centos\n```\n\n2. 웹 브라우저에서 http://localhost:8000/ 을 요청하면, 프로젝트 메인화면이 실행된다. \n\n### (2) uWSGI 일반모드\n> 간단하게 사용하거나 소규모 프로젝트라면, Emperor 모드가 아닌 일반모드로 실행 할 수 있음 \n> 이 경우, 일반 사용자계정으로 설정파일 생성 후, 실행 해도 됨, 그래서 설정파일과 로그 파일을 장고 프로젝트 하위로 변경 \n\n1. uWSGI 설정파일 장고프로젝트 하위에 작성 \n ```bash \n $ cd /home/centos/pyBook/ch9/www_dir\n $ vim ch9_uwsgi.ini\n\n # 하위는 *.ini 파일로, 내용은 daemonize 설정(로그 설정)을 빼고, 루트모드에서 실행 시와 같다.\n [uwsgi]\n chdir = /home/centos/pyBook/ch9 # 장고의 베이스 디렉토리\n home = /home/centos/VENV/v3PyBook # 가상환경 사용 시, 가상환경의 루트 디렉토리 (가상환경 사용하지 않으면 생략)\n module = mysite.wsgi:application # wsgi.py 파일의 모듈 경로 및 application 변수\n socket = :8001 # 웹서버와 통신할 소켓의 포트 번호\n # socket = /home/centos/pyBook/ch9/www_dir/ch9.sock # 웹서버가 UDS 사용 시 소켓 파일의 경로. nginx 설정 파일의 소켓파일과 경로가 같음.\n # chmod-socket = 666\n master = True # 별도의 마스터 프로세스가 가동되도록 지정\n processes = 5 # uwsgi 가동 시 자식 프로세스를 5개 생성\n pidfile = /tmp/ch9-master.pid # 마스터 프로세스 ID를 저장할 파일\n vacuum = True # 프로세스 종료 시 소켓파일을 포함하여 환경변수 클리어\n max-requests = 5000 # 현 프로세스에서 처리할 최대 요청 개수 지정\n daemonize = /home/centos/pyBook/ch9/www_dir/ch9.log # 백그라운드에서 프로세스가 실행되도록 데몬화하고 데몬에서 사용할 로그 파일을 지정\n\n # 로그파일을 생성하고 권한을 변경\n $ touch /home/centos/pyBook/ch9/www_dir/ch9.log\n $ chmod 666 /home/centos/pyBook/ch9/www_dir/ch9.log\n ```\n\n2. nginx 와 uWSGI 프로그램 가동 \n. 일반모드이므로, uwsgi도 일반 사용자로 실행\n\n ```bash\n $ cd /home/centos/pyBook/ch9/\n $ uwsgi --ini www_dir/ch9_uwsgi.ini\n\n # uwsgi 중지 명령\n $ uwsgi --stop /tmp/ch9-master.pid\n ```\n3. 동작 확인\n- 웹브라우저로 http://localhost:8000/을 호출하여, 프로젝트의 메인화면이 실행되는지 확인\n\n### (3) 유닉스 도메인 소켓 사용\n> 웹서버와 WAS가 동일한 H/W 에서 실행될 때는, 네트워크 모듈을 통한 소켓통신이 아니라, 파일 시스템을 사용하여 소켓 통신을 하는 것이 더 성능이 좋다. \n> 파일 시스템을 사용한 소켓 통신중 하나가 **유닉스 도메인 소켓(UDS)** 방식이다. \n> uWSGI 도 UDS 방식을 지원한다. \n\n1. NGINX 설정 파일 수정\n ```conf\n $ sudo vim /etc/nginx/conf.d/ch9_nginx.conf\n\n server {\n (생략)\n location / {\n include /home/centos/pyBook/ch9/www_dir/uwsgi_params;\n # uwsgi_pass 127.0.0.1:8001\n uwsgi_pass unix:///home/centos/pyBook/ch9/www_dir/ch9.sock;\n }\n }\n ```\n - uwsgi_pass 를 ip:포트 방식이 아닌 소켓의 경로를 지정하는 것이 핵심\n\n2. uWSGI 설정 파일 수정 (Emperor 모드 예제)\n ```ini\n $ cd /etc/uwsgi/vassals\n $ sudo vim ch9_uwsgi.ini\n \n [uwsgi]\n socket = /home/centos/pyBook/ch9/www_dir/ch9.sock\n chmod-socket = 666\n (아래내용 동일)\n ```\n\n3. uWSGI 프로그램을 실행 시키기 위한 *.ini 파일 생성 \n> `$ sudo uwsgi --emperor /etc/uwsgi/vassals --uid centos --gid centos` 로 *.ini 파일없이 실행 가능함 \n\n ```ini\n $ cd /etc/uwsgi\n $ sudo vim uwsgi_emperor.ini\n\n [uwsgi]\n emperor = /etc/uwsgi/vassals\n uid = centos\n gid = centos\n master = True\n pidfile = /tmp/emperor.pid\n vacuum = True\n daemonize = /var/log/uwsgi/emperor.log\n ```\n\n4. ninx와 uwsgi 프로그램 실행 \n ```bash\n $ sudo nginx\n $ sudo uwsgi --ini /etc/uwsgi/uwsgi_emperor.ini\n\n # 중지명령\n $ sudo nginx -s stop\n $ sudo uwsgi --stop /tmp/emperor.pid\n ```\n\n5. 동작 확인 \n. 웹브라우저에서 'http://localhost:8000' 을 호출하면 프로젝트 메인화면이 실행됨\n","dir":"/python/NginxWebServerDeploy/","name":"nginxWebServerDeploy.md","path":"python/NginxWebServerDeploy/nginxWebServerDeploy.md","url":"/python/NginxWebServerDeploy/nginxWebServerDeploy.html"},{"sort":1,"layout":"default","title":"설계시 알아두기","content":"# 설계시 알아두기\n\n## 1. 설계 순서\n1. 화면 UI 설계 : 화면 캡쳐본이나 디자인 본\n2. 테이블 설계 양식 \n\n |필드명|타입|제약조건|설명|\n |---|---|---|---|\n |id|integer|PK, Auto Increment|기본키|\n\n3. 로직 설계 양식 \n\n | URL | View(=controller) | Templates |\n |-----|-------------------|-----------|\n |/bookmark/|BookmarkLV.as_view()|boomark_list.html|\n\n4. URL 설계 양식 \n\n | URL 패턴 | 뷰 이름 | 템플릿 파일 이름 |\n |----------|---------|------------------|\n |/bookmark/99/ |BookmarkDV(DetailView)|bookmark_detail.html|\n\n\n## 2. 작업/코딩 순서\n\n| 작업순서 | 관련명령/파일 | 필요한 작업 내용 |\n|----------|---------------|------------------|\n|뼈대만들기 | startproject<br>settings.py<br>migrate<br>createsuperuser<br>startapp<br>settings.py| mysite 프로젝트 생성<br>프로젝트 설정 항목 변경<br>User/Group 테이블 생성<br>프로젝트 관리자인 슈퍼유저 생성<br>북마크 앱 생성<br>북마크 앱 등록 |\n|모델코딩 | models.py<br>admin.py<br>makemigrations<br>migrate|모델(테이블)정의<br>Admin 사이트에 모델 등록<br>모델의 변경사항 추출<br>변경사항을 데이터베이스에 반영|\n|URLconf코딩 |urls.py |URL 정의 |\n|뷰 코딩 | views.py | 뷰 로직 구성 |\n|템플릿 코딩하기 | templates 디렉토리 |템플릿 파일 작성|\n","dir":"/python/PracticeProgram/","name":"design.md","path":"python/PracticeProgram/design.md","url":"/python/PracticeProgram/design.html"},{"sort":1,"permalink":"/python/","layout":"default","title":"Django &amp; Python","content":"<h1 id=\"django--python\">Django &amp; Python</h1>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>{% include list.liquid all=true %}\n\n\n- [python 코딩 Tip!](/python/tip/)\n    - [파이썬 코딩 시, 알아야 할 꿀팁!](/python/tip/tip.html)\n- [웹 표준 라이브러리](/python/webStandardLibrary/)\n    - [웹 클라이언트 라이브러리](/python/webStandardLibrary/webClientLIbrary.html)\n    - [웹 서버 라이브러리](/python/webStandardLibrary/webServerLibrary.html)\n    - [CGI/WSGI 라이브러리](/python/webStandardLibrary/CgiWsgiLibrary.html)\n- [Django 웹 프레임워크](/python/DjangoWebFramework/)\n    - [장고 프로그램 설치](/python/DjangoWebFramework/jangoInstall.html)\n    - [장고의 웹애플리케이션 개발 방식](/python/DjangoWebFramework/jangoDevelopmentPattern.html)\n    - [프로젝트 뼈대 만들기](/python/DjangoWebFramework/applicationArchithect.html)\n    - [애플리케이션 개발하기 - Model 코딩](/python/DjangoWebFramework/applicationDevelopment-Model.html)\n    - [애플리케이션 개발하기 - URLconf, View 및 Templete 코딩](/python/DjangoWebFramework/jangoDevelopment-View_Templete.html)\n- [Django 핵심기능](/python/DjangoCoreFunction/)\n    - [Admin 사이트 꾸미기](/python/DjangoCoreFunction/decorateAdminSite.html)\n    - [장고 파이썬 쉘로 데이터 조작하기](/python/DjangoCoreFunction/dataAlterbyPythonShell.html)\n    - [템플릿 시스템](/python/DjangoCoreFunction/templateSystem.html)\n    - [Django 의 폼 처리 기능](/python/DjangoCoreFunction/DjangoForm.html)\n    - [클래스 형 뷰](/python/DjangoCoreFunction/DjangoViewClass.html)\n    - [로그 남기기](/python/DjangoCoreFunction/DjangoLogging.html)\n- [실습예제 심화](/python/extendExampleProject/)\n    - [새로운 애플리케이션 만들기](/python/extendExampleProject/addNewApplication.html)\n- [Django 웹서버 연동원리](/python/DjangoWebServerConfig/)\n    - [장고의 wsgi.py 파일](/python/DjangoWebServerConfig/wsgi_py_file.html)\n    - [운영 서버 적용 전 장고의 설정 변경 사항](/python/DjangoWebServerConfig/jangoSettingCheckListInProductMode.html)\n- [Cloud (pythonanywhere) 서버에 Django 배포하기](/python/pythonAnyWhereCloudServerDeploy/)\n    - [PythonAnyWhere에 장고소스 배포하기](/python/pythonAnyWhereCloudServerDeploy/pythonanywhereDeploy.html)\n- [Apache 웹서버 연동하기](/python/ApacheWebServerDeploy/)\n    - [아파치 웹 서버와 연동](/python/ApacheWebServerDeploy/apacheWebServerDeploy.html)\n- [NGINX 웹서버와 연동하기](/python/NginxWebServerDeploy/)\n    - [NGINX 웹 서버와 연동](/python/NginxWebServerDeploy/nginxWebServerDeploy.html)\n- [파이썬 가상환경 사용하기](/python/JangoDevelopmentBasic/)\n    - [가상환경 사용하기](/python/JangoDevelopmentBasic/jangoBasic.html)\n- [실전 프로그램 개발 요약](/python/PracticeProgram/)\n    - [설계시 알아두기](/python/PracticeProgram/design.html)\n    - [개발 뼈대 세우기 시 알아두기](/python/PracticeProgram/makeBorn.html)\n    - [모델 개발 시 알아두기](/python/PracticeProgram/DevModel.html)\n    - [URLconf 개발 시 알아두기](/python/PracticeProgram/DevURLconf.html)\n    - [뷰 개발 시 알아두기](/python/PracticeProgram/DevView.html)\n    - [템플릿 개발 시 알아두기](/python/PracticeProgram/DevTemplates.html)\n</code></pre>  </div></div>\n\n<ul>\n <li><a href=\"/python/tip/\">python 코딩 Tip!</a>\n <ul>\n <li><a href=\"/python/tip/tip.html\">파이썬 코딩 시, 알아야 할 꿀팁!</a></li>\n </ul>\n </li>\n <li><a href=\"/python/webStandardLibrary/\">웹 표준 라이브러리</a>\n <ul>\n <li><a href=\"/python/webStandardLibrary/webClientLIbrary.html\">웹 클라이언트 라이브러리</a></li>\n <li><a href=\"/python/webStandardLibrary/webServerLibrary.html\">웹 서버 라이브러리</a></li>\n <li><a href=\"/python/webStandardLibrary/CgiWsgiLibrary.html\">CGI/WSGI 라이브러리</a></li>\n </ul>\n </li>\n <li><a href=\"/python/DjangoWebFramework/\">Django 웹 프레임워크</a>\n <ul>\n <li><a href=\"/python/DjangoWebFramework/jangoInstall.html\">장고 프로그램 설치</a></li>\n <li><a href=\"/python/DjangoWebFramework/jangoDevelopmentPattern.html\">장고의 웹애플리케이션 개발 방식</a></li>\n <li><a href=\"/python/DjangoWebFramework/applicationArchithect.html\">프로젝트 뼈대 만들기</a></li>\n <li><a href=\"/python/DjangoWebFramework/applicationDevelopment-Model.html\">애플리케이션 개발하기 - Model 코딩</a></li>\n <li><a href=\"/python/DjangoWebFramework/jangoDevelopment-View_Templete.html\">애플리케이션 개발하기 - URLconf, View 및 Templete 코딩</a></li>\n </ul>\n </li>\n <li><a href=\"/python/DjangoCoreFunction/\">Django 핵심기능</a>\n <ul>\n <li><a href=\"/python/DjangoCoreFunction/decorateAdminSite.html\">Admin 사이트 꾸미기</a></li>\n <li><a href=\"/python/DjangoCoreFunction/dataAlterbyPythonShell.html\">장고 파이썬 쉘로 데이터 조작하기</a></li>\n <li><a href=\"/python/DjangoCoreFunction/templateSystem.html\">템플릿 시스템</a></li>\n <li><a href=\"/python/DjangoCoreFunction/DjangoForm.html\">Django 의 폼 처리 기능</a></li>\n <li><a href=\"/python/DjangoCoreFunction/DjangoViewClass.html\">클래스 형 뷰</a></li>\n <li><a href=\"/python/DjangoCoreFunction/DjangoLogging.html\">로그 남기기</a></li>\n </ul>\n </li>\n <li><a href=\"/python/extendExampleProject/\">실습예제 심화</a>\n <ul>\n <li><a href=\"/python/extendExampleProject/addNewApplication.html\">새로운 애플리케이션 만들기</a></li>\n </ul>\n </li>\n <li><a href=\"/python/DjangoWebServerConfig/\">Django 웹서버 연동원리</a>\n <ul>\n <li><a href=\"/python/DjangoWebServerConfig/wsgi_py_file.html\">장고의 wsgi.py 파일</a></li>\n <li><a href=\"/python/DjangoWebServerConfig/jangoSettingCheckListInProductMode.html\">운영 서버 적용 전 장고의 설정 변경 사항</a></li>\n </ul>\n </li>\n <li><a href=\"/python/pythonAnyWhereCloudServerDeploy/\">Cloud (pythonanywhere) 서버에 Django 배포하기</a>\n <ul>\n <li><a href=\"/python/pythonAnyWhereCloudServerDeploy/pythonanywhereDeploy.html\">PythonAnyWhere에 장고소스 배포하기</a></li>\n </ul>\n </li>\n <li><a href=\"/python/ApacheWebServerDeploy/\">Apache 웹서버 연동하기</a>\n <ul>\n <li><a href=\"/python/ApacheWebServerDeploy/apacheWebServerDeploy.html\">아파치 웹 서버와 연동</a></li>\n </ul>\n </li>\n <li><a href=\"/python/NginxWebServerDeploy/\">NGINX 웹서버와 연동하기</a>\n <ul>\n <li><a href=\"/python/NginxWebServerDeploy/nginxWebServerDeploy.html\">NGINX 웹 서버와 연동</a></li>\n </ul>\n </li>\n <li><a href=\"/python/JangoDevelopmentBasic/\">파이썬 가상환경 사용하기</a>\n <ul>\n <li><a href=\"/python/JangoDevelopmentBasic/jangoBasic.html\">가상환경 사용하기</a></li>\n </ul>\n </li>\n <li><a href=\"/python/PracticeProgram/\">실전 프로그램 개발 요약</a>\n <ul>\n <li><a href=\"/python/PracticeProgram/design.html\">설계시 알아두기</a></li>\n <li><a href=\"/python/PracticeProgram/makeBorn.html\">개발 뼈대 세우기 시 알아두기</a></li>\n <li><a href=\"/python/PracticeProgram/DevModel.html\">모델 개발 시 알아두기</a></li>\n <li><a href=\"/python/PracticeProgram/DevURLconf.html\">URLconf 개발 시 알아두기</a></li>\n <li><a href=\"/python/PracticeProgram/DevView.html\">뷰 개발 시 알아두기</a></li>\n <li><a href=\"/python/PracticeProgram/DevTemplates.html\">템플릿 개발 시 알아두기</a></li>\n </ul>\n </li>\n</ul>\n","dir":"/python/","name":"README.md","path":"python/README.md","url":"/python/"},{"sort":1,"layout":"default","title":"새로운 애플리케이션 만들기","content":"<h1 id=\"1-새로운-애플리케이션-만들기\">1. 새로운 애플리케이션 만들기</h1>\n<blockquote>\n <p>‘books’ 어플리케이션을 추가할 것이다.</p>\n</blockquote>\n\n<ul>\n <li>순서\n <ul>\n <li>어플리케이션 설계하기</li>\n <li>프로젝트 뼈대 만들기</li>\n <li>애플리케이션 - Model 코딩하기</li>\n <li>애플리케이션 - URLconf 코딩하기</li>\n <li>애플리케이션 - View 코딩하기</li>\n <li>애플리케이션 - Template 코딩하기</li>\n </ul>\n </li>\n</ul>\n\n<h2 id=\"1-애플리케이션-설계\">1. 애플리케이션 설계</h2>\n\n<h3 id=\"1-ui-설계\">(1) UI 설계</h3>\n\n<table>\n <thead>\n <tr>\n <th>index.html</th>\n <th>book_list.html</th>\n <th>book_detail.html</th>\n </tr>\n </thead>\n <tbody>\n <tr>\n <td>. Book<br />. Author<br />. Publisher</td>\n <td>. Python Web Programming<br />. Design Pattern<br />. Effective Java</td>\n <td>. Author:S.H.Kim<br />. Publisher:HanBit<br />. Publication date:March 1, 2015</td>\n </tr>\n </tbody>\n</table>\n\n<h3 id=\"2-model-설계\">(2) Model 설계</h3>\n\n<h4 id=\"2-1-book\">(2)-1. Book</h4>\n\n<table>\n <thead>\n <tr>\n <th>컬럼명</th>\n <th>타입</th>\n <th>제약조건</th>\n <th>설명</th>\n </tr>\n </thead>\n <tbody>\n <tr>\n <td>id</td>\n <td>integer</td>\n <td>NotNull, Pk, AutoIncrement</td>\n <td>Pk</td>\n </tr>\n <tr>\n <td>title</td>\n <td>varchar(100)</td>\n <td>NotNull</td>\n <td>책제목</td>\n </tr>\n <tr>\n <td>authors</td>\n <td>integer</td>\n <td>NotNull, MTM(Author.id), index</td>\n <td>Many-To-Many</td>\n </tr>\n <tr>\n <td>publisher</td>\n <td>integer</td>\n <td>NotNull, FK(publisher.id), index</td>\n <td>Fk</td>\n </tr>\n <tr>\n <td>publication_date</td>\n <td>date</td>\n <td>NotNull</td>\n <td>책 출판일</td>\n </tr>\n </tbody>\n</table>\n\n<h4 id=\"2-2-author\">(2)-2. Author</h4>\n\n<table>\n <thead>\n <tr>\n <th>컬럼명</th>\n <th>타입</th>\n <th>제약조건</th>\n <th>설명</th>\n </tr>\n </thead>\n <tbody>\n <tr>\n <td>id</td>\n <td>integer</td>\n <td>NotNull, Pk, AutoIncrement</td>\n <td>Pk</td>\n </tr>\n <tr>\n <td>salutation</td>\n <td>varchar(100)</td>\n <td>NotNull</td>\n <td>저자 인사말</td>\n </tr>\n <tr>\n <td>name</td>\n <td>varchar(50)</td>\n <td>NotNull</td>\n <td>저자 성명</td>\n </tr>\n <tr>\n <td>email</td>\n <td>varchar(50)</td>\n <td>NotNull</td>\n <td>저자 이메일</td>\n </tr>\n </tbody>\n</table>\n\n<h4 id=\"2-3-publisher\">(2)-3. Publisher</h4>\n\n<table>\n <thead>\n <tr>\n <th>컬럼명</th>\n <th>타입</th>\n <th>제약조건</th>\n <th>설명</th>\n </tr>\n </thead>\n <tbody>\n <tr>\n <td>id</td>\n <td>integer</td>\n <td>NotNull, Pk, AutoIncrement</td>\n <td>Pk</td>\n </tr>\n <tr>\n <td>name</td>\n <td>varchar(50)</td>\n <td>NotNull</td>\n <td>출판사 이름</td>\n </tr>\n <tr>\n <td>address</td>\n <td>varchar(200)</td>\n <td>NotNull</td>\n <td>출판사 주소</td>\n </tr>\n <tr>\n <td>website</td>\n <td>url</td>\n <td>NotNull</td>\n <td>출판사 웹사이트</td>\n </tr>\n </tbody>\n</table>\n\n<h3 id=\"3-뷰-흐름-설계\">(3) 뷰 흐름 설계</h3>\n\n<table>\n <thead>\n <tr>\n <th>URL</th>\n <th>View</th>\n <th>Template</th>\n </tr>\n </thead>\n <tbody>\n <tr>\n <td>/books/</td>\n <td>BooksModelView.as_view()</td>\n <td>index.html</td>\n </tr>\n <tr>\n <td>/books/book/</td>\n <td>BookList.as_view()</td>\n <td>book_list.html</td>\n </tr>\n <tr>\n <td>/books/author/</td>\n <td>AuthorList.as_view()</td>\n <td>author_list.html</td>\n </tr>\n <tr>\n <td>/books/publisher/</td>\n <td>PublisherList.as_view()</td>\n <td>publisher_list.html</td>\n </tr>\n <tr>\n <td>/books/book/3/</td>\n <td>BookDetail.as_view()</td>\n <td>book_detail.html</td>\n </tr>\n <tr>\n <td>/books/author/3/</td>\n <td>AuthorDetail.as_view()</td>\n <td>author_detail.html</td>\n </tr>\n <tr>\n <td>/books/publisher/3/</td>\n <td>PublisherDetail.as_view()</td>\n <td>publisher_detail.html</td>\n </tr>\n </tbody>\n</table>\n\n<h2 id=\"2-애플리케이션---뼈대-만들기\">2. 애플리케이션 - 뼈대 만들기</h2>\n\n<ol>\n <li>\n\n <div class=\"language-console highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"gp\">ch3&gt;</span>python manage.py startapp books   \n</code></pre>  </div> </div>\n </li>\n <li>\n <p>settings.py 파일의 INSTALLED_APPS 항목에 books 어플리케이션 설정 클래스 등록</p>\n\n <div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code> <span class=\"c1\"># settings.py\n</span>\n <span class=\"n\">INSTALLED_APPS</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n <span class=\"s\">'django.contrib.admin'</span><span class=\"p\">,</span>\n <span class=\"s\">'django.contrib.auth'</span><span class=\"p\">,</span>\n <span class=\"s\">'django.contrib.contenttypes'</span><span class=\"p\">,</span>\n <span class=\"s\">'django.contrib.sessions'</span><span class=\"p\">,</span>\n <span class=\"s\">'django.contrib.messages'</span><span class=\"p\">,</span>\n <span class=\"s\">'django.contrib.staticfiles'</span><span class=\"p\">,</span>\n <span class=\"s\">'polls.apps.PollsConfig'</span><span class=\"p\">,</span>\n <span class=\"s\">'books.apps.BooksConfig'</span><span class=\"p\">,</span>\n <span class=\"p\">]</span>\n</code></pre>  </div> </div>\n </li>\n</ol>\n\n<h2 id=\"3-애플리케이션---model-코딩하기\">3. 애플리케이션 - Model 코딩하기</h2>\n\n<ul>\n <li>순서</li>\n</ul>\n\n<div class=\"language-console highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"gp\">ch3/books&gt;</span><span class=\"w\"> </span>vim models.py    // 테이블 정의\n<span class=\"gp\">ch3/books&gt;</span><span class=\"w\"> </span>vim admins.py    // 테이블을 admin 사이트에 등록함\n<span class=\"gp\">ch3&gt;</span><span class=\"w\"> </span>python manage.py makemigrations    //db의 변경사항을 추출함\n<span class=\"gp\">ch3&gt;</span><span class=\"w\"> </span>python manage.py migrate       //db의 변경사항을 반영함\n<span class=\"gp\">ch3&gt;</span><span class=\"w\"> </span>python manage.py runserver     //반영여부를 웹브라우저에서 확인함\n</code></pre>  </div></div>\n\n<ol>\n <li>\n <p>models.py 파일에 테이블 정의</p>\n\n <div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code> <span class=\"c1\"># books/models.py\n</span>\n <span class=\"kn\">from</span> <span class=\"nn\">django.db</span> <span class=\"kn\">import</span> <span class=\"n\">models</span>\n\n <span class=\"c1\"># Create your models here.\n</span> <span class=\"kn\">from</span> <span class=\"nn\">django.db</span> <span class=\"kn\">import</span> <span class=\"n\">models</span>\n\n <span class=\"k\">class</span> <span class=\"nc\">Book</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"p\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n     <span class=\"n\">title</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"p\">.</span><span class=\"n\">CharField</span><span class=\"p\">(</span><span class=\"n\">max_length</span><span class=\"o\">=</span><span class=\"mi\">100</span><span class=\"p\">)</span>\n     <span class=\"n\">authors</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"p\">.</span><span class=\"n\">ManyToManyField</span><span class=\"p\">(</span><span class=\"s\">'Author'</span><span class=\"p\">)</span>\n     <span class=\"n\">publisher</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"p\">.</span><span class=\"n\">ForeignKey</span><span class=\"p\">(</span><span class=\"s\">'Publisher'</span><span class=\"p\">,</span> <span class=\"n\">on_delete</span><span class=\"o\">=</span><span class=\"n\">models</span><span class=\"p\">.</span><span class=\"n\">CASCADE</span><span class=\"p\">)</span>\n     <span class=\"n\">publication_date</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"p\">.</span><span class=\"n\">DateTimeField</span><span class=\"p\">()</span>\n\n     <span class=\"k\">def</span> <span class=\"nf\">__str__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n         <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">title</span>\n\n <span class=\"k\">class</span> <span class=\"nc\">Author</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"p\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n     <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"p\">.</span><span class=\"n\">CharField</span><span class=\"p\">(</span><span class=\"n\">max_length</span><span class=\"o\">=</span><span class=\"mi\">50</span><span class=\"p\">)</span>\n     <span class=\"n\">salutation</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"p\">.</span><span class=\"n\">CharField</span><span class=\"p\">(</span><span class=\"n\">max_length</span><span class=\"o\">=</span><span class=\"mi\">100</span><span class=\"p\">)</span>\n     <span class=\"n\">email</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"p\">.</span><span class=\"n\">EmailField</span><span class=\"p\">()</span>\n\n     <span class=\"k\">def</span> <span class=\"nf\">__str__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n         <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">name</span>\n\n <span class=\"k\">class</span> <span class=\"nc\">Publisher</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"p\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n     <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"p\">.</span><span class=\"n\">CharField</span><span class=\"p\">(</span><span class=\"n\">max_length</span><span class=\"o\">=</span><span class=\"mi\">50</span><span class=\"p\">)</span>\n     <span class=\"n\">address</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"p\">.</span><span class=\"n\">CharField</span><span class=\"p\">(</span><span class=\"n\">max_length</span><span class=\"o\">=</span><span class=\"mi\">100</span><span class=\"p\">)</span>\n     <span class=\"n\">website</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"p\">.</span><span class=\"n\">URLField</span><span class=\"p\">()</span>\n\n     <span class=\"k\">def</span> <span class=\"nf\">__str__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n         <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">name</span>\n</code></pre>  </div> </div>\n\n <ul>\n <li>참고 : <a href=\"https://docs.djangoproject.com/en/3.1/ref/models/fields/\">https://docs.djangoproject.com/en/3.1/ref/models/fields/</a></li>\n <li>테이블 관계를 나타내는 필드\n <ul>\n <li>N:1 - ForeignKey(on_delete 옵션 필수)</li>\n <li>N:N - ManyToManyField</li>\n <li>1:N - OneToOneField</li>\n </ul>\n </li>\n </ul>\n </li>\n <li>\n <p>admins.py 파일에 등록 : admin 사이트에 나오도록 함</p>\n\n <div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code> <span class=\"c1\"># books/admins.py\n</span>\n <span class=\"kn\">from</span> <span class=\"nn\">django.contrib</span> <span class=\"kn\">import</span> <span class=\"n\">admin</span>\n\n <span class=\"c1\"># Register your models here.\n</span> <span class=\"kn\">from</span> <span class=\"nn\">django.contrib</span> <span class=\"kn\">import</span> <span class=\"n\">admin</span>\n <span class=\"kn\">from</span> <span class=\"nn\">books.models</span> <span class=\"kn\">import</span> <span class=\"n\">Book</span><span class=\"p\">,</span> <span class=\"n\">Author</span><span class=\"p\">,</span> <span class=\"n\">Publisher</span>\n\n <span class=\"n\">admin</span><span class=\"p\">.</span><span class=\"n\">site</span><span class=\"p\">.</span><span class=\"n\">register</span><span class=\"p\">(</span><span class=\"n\">Book</span><span class=\"p\">)</span>\n <span class=\"n\">admin</span><span class=\"p\">.</span><span class=\"n\">site</span><span class=\"p\">.</span><span class=\"n\">register</span><span class=\"p\">(</span><span class=\"n\">Author</span><span class=\"p\">)</span>\n <span class=\"n\">admin</span><span class=\"p\">.</span><span class=\"n\">site</span><span class=\"p\">.</span><span class=\"n\">register</span><span class=\"p\">(</span><span class=\"n\">Publisher</span><span class=\"p\">)</span>\n</code></pre>  </div> </div>\n </li>\n <li>\n <p>작업 반영하기</p>\n\n <div class=\"language-console highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"gp\"> ch3&gt;</span>python manage.py makemigrations\n<span class=\"gp\"> ch3&gt;</span>python manage.py migrate\n</code></pre>  </div> </div>\n </li>\n <li>\n <p>작업 확인하기</p>\n <ul>\n <li>console에 <code class=\"language-plaintext highlighter-rouge\">python manage.py runserver</code> 로 테스트서버를 가동 시킨 후, 웹사이트에 ‘http://localhost:8000/admin’ 으로 접속하여 등록한 테이블이 보이는지 확인한다.</li>\n </ul>\n </li>\n</ol>\n\n<h2 id=\"4-애플리케이션---urlconf-코딩\">4. 애플리케이션 - URLconf 코딩</h2>\n\n<h3 id=\"1-mysiteurlspy-파일에-books-어플리케이션-index-url을-등록\">(1) mysite/urls.py 파일에 books 어플리케이션 index url을 등록</h3>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">urlpatterns</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"n\">path</span><span class=\"p\">(</span><span class=\"s\">''</span><span class=\"p\">,</span> <span class=\"n\">views</span><span class=\"p\">.</span><span class=\"n\">HomeView</span><span class=\"p\">.</span><span class=\"n\">as_view</span><span class=\"p\">(),</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s\">'home'</span><span class=\"p\">),</span>\n    <span class=\"n\">path</span><span class=\"p\">(</span><span class=\"s\">'admin/'</span><span class=\"p\">,</span> <span class=\"n\">admin</span><span class=\"p\">.</span><span class=\"n\">site</span><span class=\"p\">.</span><span class=\"n\">urls</span><span class=\"p\">),</span>\n    <span class=\"n\">path</span><span class=\"p\">(</span><span class=\"s\">'polls/'</span><span class=\"p\">,</span> <span class=\"n\">include</span><span class=\"p\">(</span><span class=\"s\">'polls.urls'</span><span class=\"p\">)),</span>\n    <span class=\"n\">path</span><span class=\"p\">(</span><span class=\"s\">'books/'</span><span class=\"p\">,</span> <span class=\"n\">include</span><span class=\"p\">(</span><span class=\"s\">'books.urls'</span><span class=\"p\">)),</span>\n<span class=\"p\">]</span>\n</code></pre>  </div></div>\n\n<h3 id=\"2-booksurlspy-파일에-books-어플리케이션-url을-등록\">(2) books/urls.py 파일에 books 어플리케이션 url을 등록</h3>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kn\">from</span> <span class=\"nn\">django.urls</span> <span class=\"kn\">import</span> <span class=\"n\">path</span>\n<span class=\"kn\">from</span> <span class=\"nn\">.</span> <span class=\"kn\">import</span> <span class=\"n\">views</span>\n\n<span class=\"n\">app_name</span> <span class=\"o\">=</span> <span class=\"s\">'books'</span>\n\n<span class=\"n\">urlpatterns</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"c1\"># /books/\n</span>    <span class=\"n\">path</span><span class=\"p\">(</span><span class=\"s\">''</span><span class=\"p\">,</span> <span class=\"n\">views</span><span class=\"p\">.</span><span class=\"n\">BooksModelView</span><span class=\"p\">.</span><span class=\"n\">as_view</span><span class=\"p\">(),</span> <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"s\">'index'</span><span class=\"p\">),</span>\n    <span class=\"c1\"># /books/book/\n</span>    <span class=\"n\">path</span><span class=\"p\">(</span><span class=\"s\">'book/'</span><span class=\"p\">,</span> <span class=\"n\">views</span><span class=\"p\">.</span><span class=\"n\">BookList</span><span class=\"p\">.</span><span class=\"n\">as_view</span><span class=\"p\">(),</span> <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"s\">'book_list'</span><span class=\"p\">),</span> <span class=\"c1\"># 뷰 클래스 : ListView \n</span>    <span class=\"c1\"># /books/author/\n</span>    <span class=\"n\">path</span><span class=\"p\">(</span><span class=\"s\">'author/'</span><span class=\"p\">,</span> <span class=\"n\">views</span><span class=\"p\">.</span><span class=\"n\">AuthorList</span><span class=\"p\">.</span><span class=\"n\">as_view</span><span class=\"p\">(),</span> <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"s\">'author_list'</span><span class=\"p\">),</span> <span class=\"c1\"># 뷰 클래스 : ListView\n</span>    <span class=\"c1\"># /books/publichser/\n</span>    <span class=\"n\">path</span><span class=\"p\">(</span><span class=\"s\">'publisher/'</span><span class=\"p\">,</span> <span class=\"n\">views</span><span class=\"p\">.</span><span class=\"n\">PublisherList</span><span class=\"p\">.</span><span class=\"n\">as_view</span><span class=\"p\">(),</span> <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"s\">'publisher_list'</span><span class=\"p\">),</span> <span class=\"c1\"># 뷰 클래스 : ListView\n</span>    <span class=\"c1\"># /books/book/99\n</span>    <span class=\"n\">path</span><span class=\"p\">(</span><span class=\"s\">'book/&lt;int:pk&gt;/'</span><span class=\"p\">,</span> <span class=\"n\">views</span><span class=\"p\">.</span><span class=\"n\">BookDetail</span><span class=\"p\">.</span><span class=\"n\">as_view</span><span class=\"p\">(),</span> <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"s\">'book_detail'</span><span class=\"p\">),</span> <span class=\"c1\"># 뷰 클래스 : DetailView\n</span>    <span class=\"c1\"># /books/author/99\n</span>    <span class=\"n\">path</span><span class=\"p\">(</span><span class=\"s\">'author/&lt;int:pk&gt;'</span><span class=\"p\">,</span> <span class=\"n\">views</span><span class=\"p\">.</span><span class=\"n\">AuthorDetail</span><span class=\"p\">.</span><span class=\"n\">as_view</span><span class=\"p\">(),</span> <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"s\">'author_detail'</span><span class=\"p\">),</span> <span class=\"c1\"># 뷰 클래스 : DetailView\n</span>    <span class=\"c1\"># /books/publisher/99\n</span>    <span class=\"n\">path</span><span class=\"p\">(</span><span class=\"s\">'publisher/&lt;int:pk&gt;/'</span><span class=\"p\">,</span> <span class=\"n\">views</span><span class=\"p\">.</span><span class=\"n\">PublisherDetail</span><span class=\"p\">.</span><span class=\"n\">as_view</span><span class=\"p\">(),</span> <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"s\">'publisher_detail'</span><span class=\"p\">),</span> <span class=\"c1\"># 뷰 클래스 : DetailView\n</span><span class=\"p\">]</span>\n</code></pre>  </div></div>\n\n<h2 id=\"5-애플리케이션---클래스형-뷰-코딩하기\">5. 애플리케이션 - 클래스형 뷰 코딩하기</h2>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kn\">from</span> <span class=\"nn\">django.shortcuts</span> <span class=\"kn\">import</span> <span class=\"n\">render</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.views.generic.base</span> <span class=\"kn\">import</span> <span class=\"n\">TemplateView</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.views.generic</span> <span class=\"kn\">import</span> <span class=\"n\">ListView</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.views.generic</span> <span class=\"kn\">import</span> <span class=\"n\">DetailView</span>\n<span class=\"kn\">from</span> <span class=\"nn\">books.models</span> <span class=\"kn\">import</span> <span class=\"n\">Book</span><span class=\"p\">,</span> <span class=\"n\">Author</span><span class=\"p\">,</span> <span class=\"n\">Publisher</span>\n\n<span class=\"c1\"># Create your views here.\n</span>\n<span class=\"c1\"># 템플릿 뷰만 모델링하여 사용하는 경우 TemplateView 사용\n</span><span class=\"k\">class</span> <span class=\"nc\">BooksModelView</span><span class=\"p\">(</span><span class=\"n\">TemplateView</span><span class=\"p\">):</span>\n    <span class=\"c1\"># template_name 오버라이드 필수\n</span>    <span class=\"n\">template_name</span> <span class=\"o\">=</span> <span class=\"s\">'books/index.html'</span>\n\n    <span class=\"c1\"># 템플릿 파일에 넘겨줘야 할 데이터가 있는경우 get_context_data 오버라이드\n</span>    <span class=\"k\">def</span> <span class=\"nf\">get_context_data</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n        <span class=\"c1\"># get_context_data를 오버라이드 할때는 반드시 첫줄에 super() 메소드를 호출해야 한다.\n</span>        <span class=\"n\">context</span> <span class=\"o\">=</span> <span class=\"nb\">super</span><span class=\"p\">().</span><span class=\"n\">get_context_data</span><span class=\"p\">(</span><span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n        <span class=\"n\">context</span><span class=\"p\">[</span><span class=\"s\">'model_list'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">'Book'</span><span class=\"p\">,</span> <span class=\"s\">'Author'</span><span class=\"p\">,</span> <span class=\"s\">'Publisher'</span><span class=\"p\">]</span>\n        <span class=\"k\">return</span> <span class=\"n\">context</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">BookList</span><span class=\"p\">(</span><span class=\"n\">ListView</span><span class=\"p\">):</span>\n    <span class=\"c1\"># model 테이블에 들어있는 모든 레코드를 가져와 구성하는 경우에는 테이블명만 지정해 주면 된다.\n</span>    <span class=\"c1\"># object_list 속성 자동구성\n</span>    <span class=\"c1\"># 템플릿 파일 모델명_list.html 자동구성\n</span>    <span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">Book</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">AuthorList</span><span class=\"p\">(</span><span class=\"n\">ListView</span><span class=\"p\">):</span>\n    <span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">Author</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">PublisherList</span><span class=\"p\">(</span><span class=\"n\">ListView</span><span class=\"p\">):</span>\n    <span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">Publisher</span>\n\n<span class=\"c1\"># pk로 조회해서 특정 객체를 가져오는 경우에는 테이블명만 명시 해주면 된다.\n# 컨텍스트 변수로 object 를 자동으로 사용함\n# 템플릿 파일을 모델명_detail.html 로 자동으로 사용함\n</span><span class=\"k\">class</span> <span class=\"nc\">BookDetail</span><span class=\"p\">(</span><span class=\"n\">DetailView</span><span class=\"p\">):</span>\n    <span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">Book</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">AuthorDetail</span><span class=\"p\">(</span><span class=\"n\">DetailView</span><span class=\"p\">):</span>\n    <span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">Author</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">PublisherDetail</span><span class=\"p\">(</span><span class=\"n\">DetailView</span><span class=\"p\">):</span>\n    <span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">Publisher</span>\n</code></pre>  </div></div>\n<ul>\n <li>ListView, DetailView, TemplateView의 설명은 주석을 참고</li>\n</ul>\n\n<h2 id=\"6-애플리케이션---template-코딩\">6. 애플리케이션 - Template 코딩</h2>\n\n<h3 id=\"1-urlviewtemplate-맵핑관계\">(1) URL/VIEW/TEMPLATE 맵핑관계</h3>\n\n<table>\n <tbody>\n <tr>\n <td>URL 패턴</td>\n <td>VIEW</td>\n <td>TEMPLATE 파일명</td>\n </tr>\n <tr>\n <td>/books/</td>\n <td>BooksModelView</td>\n <td>index.html</td>\n </tr>\n <tr>\n <td>/books/book</td>\n <td>BookList</td>\n <td>book_list.html</td>\n </tr>\n <tr>\n <td>/books/author/</td>\n <td>AuthorList</td>\n <td>author_list.html</td>\n </tr>\n <tr>\n <td>/books/publisher/</td>\n <td>PublisherList</td>\n <td>publisher_list.html</td>\n </tr>\n <tr>\n <td>/books/book/3/</td>\n <td>BookDetail</td>\n <td>book_detail.html</td>\n </tr>\n <tr>\n <td>/books/auathor/3/</td>\n <td>AuthorDetail</td>\n <td>author_detail.html</td>\n </tr>\n <tr>\n <td>/books/publisher/3/</td>\n <td>PublisherDetail</td>\n <td>publisher_detail.html</td>\n </tr>\n </tbody>\n</table>\n\n<h3 id=\"2-layout-만들기--3단계-권장\">(2) Layout 만들기 : 3단계 권장</h3>\n\n<pre><code class=\"language-mermaid\">graph LR\na(base.html)--&gt;|extends|b(base_books.html)--&gt;|extends|c(book_list.html&lt;br&gt;book_detail.html)\n</code></pre>  \n\n<ul>\n <li>ch3/templates/base.html\n <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>    \n  &lt;!DOCTYPE html&gt;\n  &lt;html lang=\"en\"&gt;\n  &lt;head&gt;\n      {% load static %}\n      &lt;link rel=\"stylesheet\" href=\"{% static 'admin/css/base.css' %}\" /&gt;\n      &lt;meta charset=\"UTF-8\"&gt;\n      &lt;title&gt;{% block title %}My Amazing Site{% endblock %}&lt;/title&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n      &lt;div id=\"sidebar\"&gt;\n          {% block sidebar %}\n          &lt;ul&gt;\n              &lt;li&gt;&lt;a href=\"/\"&gt;Project_Home&lt;/a&gt; &lt;/li&gt;\n              &lt;li&gt;&lt;a href=\"/admin/\"&gt;Admin&lt;/a&gt; &lt;/li&gt;\n          &lt;/ul&gt;\n          {% endblock %}\n          &lt;br&gt;\n      &lt;/div&gt;\n\n      &lt;div id=\"content\"&gt;\n          {% block content %}{% endblock %}\n      &lt;/div&gt;\n  &lt;/body&gt;\n  &lt;/html&gt;\n    \n</code></pre>  </div> </div>\n <ul>\n <li><code class=\"language-plaintext highlighter-rouge\">load static</code> 으로 static 이라는 사용자 정의 태그 로딩 후, <code class=\"language-plaintext highlighter-rouge\">static</code> 사용자 정의 태그를 통해 admin/css/base.css 스타일 파일을 찾게 함</li>\n </ul>\n </li>\n <li>ch3/templates/base_books.html\n <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>    \n  {% extends 'base.html' %}\n\n  &lt;title&gt;{% block title %}Books Application Site{% endblock title %}&lt;/title&gt;\n  {% block sidebar %}\n      {{ block.super }}\n      &lt;ul&gt;\n          &lt;li&gt;&lt;a href=\"/books/\"&gt;Books_Home&lt;/a&gt;&lt;/li&gt;\n      &lt;/ul&gt;\n  {% endblock sidebar %}\n    \n</code></pre>  </div> </div>\n <ul>\n <li>sidebar 블록을 이어쓰려면, 를 필수로 해 주어야 함</li>\n </ul>\n </li>\n <li>ch3/books/templates/books/book_detail.html (나머지 author_detail.html, publisher_detail.html 도 유사함)\n <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>    \n  {% extends 'base_books.html' %}\n\n  {% block content %}\n      &lt;h1&gt;{{ object.title }}&lt;/h1&gt;\n      &lt;br&gt;\n      &lt;li&gt;Authors:\n          {% for author in object.authors.all %}\n              {{ author }}\n          {% if not forloop.last %},\n          {% else %}\n          {% endif %}\n          {% endfor %}\n      &lt;/li&gt;\n      &lt;li&gt;Publisher: {{ object.publisher }}&lt;/li&gt;\n      &lt;li&gt;Publication Date: {{ object.publication_date }}&lt;/li&gt;\n  {% endblock content %}\n    \n</code></pre>  </div> </div>\n <ul>\n <li>DetailView 에서는 모델의 조회 결과를 object 파라미터로 넘겨 주므로 object 파라미터를 사용함</li>\n </ul>\n </li>\n <li>ch3/books/templates/books/book_list.html(나머지 author_list.html, publisher_list.html 도 유사함)\n <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>    \n  {% extends \"base_books.html\" %}\n  {% block title %} Book List {% endblock title %}\n  {% block content %}\n  &lt;h2&gt;Book List&lt;/h2&gt;\n      &lt;ul&gt;\n          {% for book in object_list %}\n          &lt;li&gt;&lt;a href=\"{% url 'books:book_detail' book.id %}\" &gt;{{ book.title }}&lt;/a&gt;&lt;/li&gt;\n          {% endfor %}\n      &lt;/ul&gt;\n  {% endblock content %}\n    \n</code></pre>  </div> </div>\n <ul>\n <li>ListView 에서는 모델의 조회 결과를 object 파라미터로 넘겨 주므로 object 파라미터를 사용함</li>\n </ul>\n </li>\n</ul>\n\n<h2 id=\"7-home-페이지-작성\">7. home 페이지 작성</h2>\n<ul>\n <li>(http://localhost:8000) 접속 시 보여지는 첫 페이지</li>\n</ul>\n\n<ol>\n <li>mysite/urls.py ‘urlpatterns’에 경로 추가\n <ul>\n <li><code class=\"language-plaintext highlighter-rouge\"> path('', views.HomeView.as_view(), name='home'),</code></li>\n </ul>\n </li>\n <li>\n <p>mysite/views.py 에 하기 코딩 추가</p>\n\n <div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code> <span class=\"kn\">from</span> <span class=\"nn\">django.views.generic.base</span> <span class=\"kn\">import</span> <span class=\"n\">TemplateView</span>\n <span class=\"kn\">from</span> <span class=\"nn\">django.apps</span> <span class=\"kn\">import</span> <span class=\"n\">apps</span>\n\n <span class=\"k\">class</span> <span class=\"nc\">HomeView</span><span class=\"p\">(</span><span class=\"n\">TemplateView</span><span class=\"p\">):</span>\n     <span class=\"n\">template_name</span> <span class=\"o\">=</span> <span class=\"s\">'home.html'</span>\n\n     <span class=\"c1\"># 템플릿에 데이터를 전달하려면 get_context_data를 오버라이딩 해야 함\n</span>     <span class=\"k\">def</span> <span class=\"nf\">get_context_data</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n         <span class=\"n\">context</span> <span class=\"o\">=</span> <span class=\"nb\">super</span><span class=\"p\">().</span><span class=\"n\">get_context_data</span><span class=\"p\">(</span><span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n         <span class=\"c1\"># context['app_list'] = ['polls','books']\n</span>         <span class=\"n\">dictVerbose</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n         <span class=\"c1\"># 각 애플리케이션의 apps.py 에 선언된 속성들의 값을 순회\n</span>         <span class=\"k\">for</span> <span class=\"n\">app</span> <span class=\"ow\">in</span> <span class=\"n\">apps</span><span class=\"p\">.</span><span class=\"n\">get_app_configs</span><span class=\"p\">():</span>\n             <span class=\"c1\"># 그 중, site-packages 에 있는 app 속성은 외브 라이브러리 이므로, 제외하는 코딩\n</span>             <span class=\"k\">if</span> <span class=\"s\">'site-packages'</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">app</span><span class=\"p\">.</span><span class=\"n\">path</span><span class=\"p\">:</span>\n                 <span class=\"n\">dictVerbose</span><span class=\"p\">[</span><span class=\"n\">app</span><span class=\"p\">.</span><span class=\"n\">label</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">app</span><span class=\"p\">.</span><span class=\"n\">name</span>\n\n         <span class=\"n\">context</span><span class=\"p\">[</span><span class=\"s\">'verbose_dict'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">dictVerbose</span>\n         <span class=\"k\">return</span> <span class=\"n\">context</span>\n\n</code></pre>  </div> </div>\n <ul>\n <li>주석 참조</li>\n </ul>\n </li>\n <li>\n <p>home.html 작성</p>\n\n <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>    \n {% extends 'base.html' %}\n\n {% block content %}\n     &lt;h2&gt;YMkim Django Application&lt;/h2&gt;\n     &lt;ul&gt;\n         {% for key, value in verbose_dict.items %}\n             {% with key|add:\":\"|add:\"index\" as urlvar %}\n                 &lt;li&gt;&lt;a href=\"{% url urlvar %}\"&gt;{{ value }}&lt;/a&gt;&lt;/li&gt;\n             {% endwith %}\n         {% endfor %}\n     &lt;/ul&gt;\n {% endblock content %}\n    \n</code></pre>  </div> </div>\n </li>\n</ol>\n\n<h2 id=\"8-polls-애플리케이션---클래스-형-뷰로-전환\">8. Polls 애플리케이션 - 클래스 형 뷰로 전환</h2>\n<ul>\n <li>github에 올려 둔 소스를 참고하세요.\n <ul>\n <li>github 주소 : <a href=\"https://github.com/82iirriiss/python_basic_project\">https://github.com/82iirriiss/python_basic_project</a></li>\n </ul>\n </li>\n</ul>\n\n<h2 id=\"9-로그-추가하기\">9. 로그 추가하기</h2>\n\n<ol>\n <li>\n <p>로그 디렉토리 생성\n<code class=\"language-plaintext highlighter-rouge\">ch3&gt;mkdir logs</code></p>\n </li>\n <li>\n <p>settings.py 파일에 로그 설정하기</p>\n <ul>\n <li>각 컴포넌트 (formatters, handlers, loggers, filters)는 모두 ‘s’로 끝나니 철자 주의할 것</li>\n </ul>\n </li>\n</ol>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>    LOGGING = {\n    'version': 1,\n    'disable_existing_loggers': False,\n    'formatters': {\n        'verbose': {\n            'format': '[%(asctime)s] %(levelname)s [%(name)s:%(lineno)s] %(message)s',\n            'datefmt': '%d/%b/%Y %H:%M:%S'\n        },\n    },\n    'handlers': {\n            'file': {\n                'level': 'DEBUG',\n                'class': 'logging.FileHandler',\n                'filename': os.path.join(BASE_DIR, 'logs', 'mysite.log'),\n                'formatter': 'verbose'\n            }\n    },\n    'loggers': {\n        'polls': {\n            'handlers': ['file'],\n            'level': 'DEBUG'\n        }\n    }\n}\n</code></pre>  </div></div>\n\n","dir":"/python/extendExampleProject/","name":"addNewApplication.md","path":"python/extendExampleProject/addNewApplication.md","url":"/python/extendExampleProject/addNewApplication.html"},{"sort":1,"layout":"default","title":"PythonAnyWhere에 장고소스 배포하기","content":"# PythonAnyWhere에 장고소스 배포하기\n\n## 1. PythonAnyWhere 가입하기/로그인하기\n\n1. 접속: <www.pythonanywhere.com>\n2. 신규가입 : signup - 'Create a Beginner ACCOUNT' - 개인정보 입력 후 'Register' (이메일 컨펌이 필요함)\n- Beginner은, 도메인명을 바꿀 수 없으며, 장고 앱도 하나만 실행 할 수 있음 \n3. 로그인\n\n## 2. 장고 소스 올리기\n![pythonAnyWhere 메인화면](/assets/images/pythonAnyWhereDashboard.png)\n\n- Dashboard : 나의 사이트에 대한 CPU 사용량등 전체현황\n- Consoles : Bash쉘, Python쉘 작업창\n- Files : 파일과 디렉토리를 보거나, 파일 업로드\n- Web : 장고 앱을 실행하기 위해 필요한 항목 설정\n- Task : cron 작업 명령\n- Databases : mySql DB를 사용하기 위한 메뉴. 장고는 sqlite3를 사용하므로 사용하지 않음\n\n1. file 로 이동\n![pythonAnyWhere File화면](/assets/images/pythonAnyWhereFile.png)\n\n2. Directories 에 'pyBook/ch3'를 입력하여 'New Directory' 버튼을 입력하여 프로젝트 폴더를 생성\n3. 'Upload File'을 눌러 내 PC에서 압축한 프로젝트파일(ch3.zip)을 업로드 한다\n\n## 3. 리눅스 명령어로 압축 풀기\n![pythonAnyWhere File화면](/assets/images/pythonAnyWhereConsole.png)\n1. 'console' 화면으로 이동 - Bash 클릭하여 업로드 했던 파일 압축을 푼다\n```console\n$ cd pyBook/ch3\n$ unzip ch3.zip\n$ tree -L 3\n.\n├── ch3\n│ ├── books\n│ │ ├── __init__.py\n│ │ ├── __pycache__\n│ │ ├── admin.py\n│ │ ├── apps.py\n│ │ ├── migrations\n│ │ ├── models.py\n│ │ ├── templates\n│ │ ├── tests.py\n│ │ ├── urls.py\n│ │ └── views.py\n│ ├── db.sqlite3\n│ ├── logs\n│ │ └── mysite.log\n│ ├── manage.py\n│ ├── mysite\n│ │ ├── __init__.py\n│ │ ├── __pycache__\n│ │ ├── asgi.py\n│ │ ├── settings.py\n│ │ ├── urls.py\n│ │ ├── views.py\n│ │ └── wsgi.py\n│ ├── polls\n│ │ ├── __init__.py\n│ │ ├── __pycache__\n│ │ ├── admin.py\n│ │ ├── apps.py\n│ │ ├── forms.py\n│ │ ├── migrations\n│ │ ├── models.py\n│ │ ├── templates\n│ │ ├── tests.py\n│ │ ├── urls.py\n│ │ └── views.py\n│ └── templates\n│ ├── admin\n│ ├── base.html\n│ ├── base_books.html\n│ ├── base_polls.html\n│ └── home.html\n└── ch3.zip\n```\n\n## 4. 가상환경 만들기\n\n- Bash 쉘에서 계속 작업한다.\n\n```bash\n$ cd /home/kimyunmi/\n$ mkdir VENV\n$ cd VENV\n# python3.8을 사용하는 v3PyBook 가상환경을 생성\n$ virtualenv --python python3.8 v3PyBook\n# 가상환경 안으로 이동\n$ source /home/kimyunmi/VENV/v3PyBook/bin/activate\n# 가상환경에서 장고 설치\n(v3PyBook) $ pip install Django\n# 설치 목록 확인\n(v3PyBook) $ pip list\n\n# 가상환경 종료는,\n(v3PyBook) $ deactivate\n```\n\n## 5. PythonAnyWhere 웹서버에서 장고 설정 변경하기\n- PythonAnyWhere 안에서 웹서버가 실행되고 있음\n- 장고의 'console' 을 열고 settings.py를 수정한다.\n\n```console\n$ cd /home/kimyunmi/pyBook/ch3/ch3/mysite\n$ vim settings.py\n\n# i 나 a 로 편집모드로 진입하여 편집\nALLOWED_HOST = ['kimyunmi.pythonanywhere.com', 'localhost', '127.0.0.1'] # 변경\n\nSTATIC_URL = '/static/'\nSTATIC_ROOT = os.path.join(BASE_DIR, 'www_dir', 'static')\n# ESC + :wq 로 종료\n\n$ cd /home/kimyunmi/pyBook/ch3/ch3\n$ source /home/kimyunmi/VENV/v3PyBook/bin/activate\n(v3PyBook) $ python manage.py collectstatic\n```\n\n## 6. PythonAnyWhere 웹서버 설정하기\n- 웹서버가 장고를 인식 할 수 있도록, 웹서버의 설정을 변경해야 한다\n\n1. 'Web' 메뉴 선택 - 'Add a new web app' 선택 - 'Select a Python Web framework' 대화창에서 'Manual configuration (including virtualenvs)' 선택 - 'Select a Python version' 대화창에서 내가 개발한 파이썬 버전 선택 - 'Next' 클릭하여 마법사 종료\n![웹서버 생성](/assets/images/pythonAnyWhereWeb.png)\n2. 설정마법사가 종료되면, 일단 웹서버는 가동 중이다. 웹 서버 설정을 변경 해 보자\n![웹서버 설정](../../assets/images/pythonAnyWhereWebConf.png) \n 1. Code 섹션의 WSGI configuration file 을 클릭, 아래와 같이 수정한다.\n\n ```python\n import os\n import sys\n\n # 프로젝트 루트 디렉토리 지정\n path = 'home/kimyunmi/pyBook/ch3/ch3'\n if path not in sys.path:\n sys.path.append(path)\n\n os.environ['DJANGO_SETTINGS_MODULE'] = 'mysite.settings'\n\n from django.core.wsgi import get_wsgi_application\n application = get_wsgi_application()\n ```\n\n 2. Virtualenv 섹션에서 v3PyBook의 가상환경 경로를 입력하고 체크버튼 클릭 \n `/home/kimyunmi/VENV/v3PyBook/`\n 3. Static files 섹션에서 URL과 Directory 에 settings.py의 STATIC_ROOT 설정 항목 값을 등록한다\n - URL : /static/\n - Directory : /home/kimyunmi/pyBook/ch3/ch3/www_dir/static\n\n3. 모든 설정을 완료 한 후 초록색 Reload 버튼 클릭하여 웹서버 재 시작한다.\n\n## 7. 지금까지 작업한 것 확인하기\n- 웹 브라우저에 'kimyunmi(본인의 계정명).pythonanywhere.com' 을 실행하면, 페이지가 열린다.","dir":"/python/pythonAnyWhereCloudServerDeploy/","name":"pythonanywhereDeploy.md","path":"python/pythonAnyWhereCloudServerDeploy/pythonanywhereDeploy.md","url":"/python/pythonAnyWhereCloudServerDeploy/pythonanywhereDeploy.html"},{"sort":1,"layout":"default","title":"파이썬 코딩 시, 알아야 할 꿀팁!","content":"# 파이썬 코딩 시, 알아야 할 꿀팁!\n\n## 날짜 입력하기\n\n - datetime.datetime.now() 보다는, timezone.now() 사용을 추천함\n - current_year = timezone.now().year\n\n## __str__() 메소드\n\n - 객체를 string 으로 표현해 주기 위해 모든 클래스에 정의 할 수 있다.\n - Question 객체를 알아보기 쉬운 스트링으로 표현하기 위해 self.question_text를 __str__() 함수에서 리턴한다.\n\n## 장고 설치 위치 확인하기\n\n```console\n> python -c 'import django; print(django.__path__)'\n```\n\n## models 의 필드 알아보기\n- 도큐먼트 참조 : <https://docs.djangoproject.com/en/2.1/ref/models/fields/>\n\n## 테이블 간의 관계 (3가지)\n- ForeignKey\n- ManyToManyField\n- OneToOneField\n\n## 장고 파이썬 쉘 (jango python shell) 시작 명령어\n- python manage.py shell\n\n## 장고에서 지원하는 model의 필드\n- 참고 : <https://docs.djangoproject.com/en/3.1/ref/models/fields/>\n\n## CentOs 에서 Python의 특정버전을 범용적으로 사용하는 방법\n`sudo alternatives --set python /usr/bin/python3` \n\n## 운영서버 이전하기 전 설정 체크 명령어\n`$ python manage.py check --deploy`\n\n","dir":"/python/tip/","name":"tip.md","path":"python/tip/tip.md","url":"/python/tip/tip.html"},{"sort":1,"permalink":"/python/webStandardLibrary/","layout":"default","title":"웹 표준 라이브러리","content":"<h1 id=\"웹-표준-라이브러리\">웹 표준 라이브러리</h1>\n\n<p>source: <code class=\"language-plaintext highlighter-rouge\">python/webStandardLibrary/README.md</code></p>\n","dir":"/python/webStandardLibrary/","name":"README.md","path":"python/webStandardLibrary/README.md","url":"/python/webStandardLibrary/"},{"sort":1,"layout":"default","title":"웹 클라이언트 라이브러리","content":"# 웹 클라이언트 라이브러리\n> __KEY WORD__ \n> `#urllib.parse #urlparse() #urllib.request #urlopen() #POST요청 #Request() #build_open() #HTTPBasicAuthHandler #HTTPCookieProcessor\n> #install_open() #ProxyHandler #ProxyBasicAuthHandler #HTMLParser #feed()`\n\n## 1. urllib.parse 모듈\n> URL 분해, 조립, 변경, URL 문자 인코딩, 디코딩 등을 처리. \n> urlparse(), urljoin(), parse_qs(), quote(), encode() 함수등이 있음. \n> <https://docs.python.org/3/library/urllib.parse.html#module-urllib.parse> \n\n### urlparse()\n- 예제\n```\n>>> from urllib.parse import urlparse\n>>> result = urlparse(\"http://www.python.org:80/guido/python.html;philosophy?overall=3#n10\")\n>> result\nParseResult(scheme='http', netloc='www.python.org:80', path='/guido/python.html', params='philosophy', query='overall=3', fragment='n10')\n```\n\n## 2. urllib.request 모듈\n> 주어진 URL에서 데이터를 가져오는 기능\n\n### urlopen()\n- 문법\n```\nurlopen(url, data=None, [timeout])\n```\n + url 인자 : 문자나 Request 클래스\n + url에 file 스킴 지정 시, 파일을 열 수 있음\n + data 인자가 None 이거나 없으면 GET 요청, data 인자로 문자열이 있으면 POST 요청 \n\n### urlopen()으로 get 방식 요청하기\n```\n>>> from urllib.request import urlopen\n>>> f = urlopen('http://www.example.com')\n>>> print(f.read(500).decode('utf-8'))\n```\n\n### urlopen()으로 post 방식 요청하기\n + data 인자는 `바이트 스트링` 이어야 함\n- 예제\n``` \n>>> from urllib.request import urlopen\n>>> data = \"language=python&framework=django\"\n>>> f = urlopen(\"http://127.0.0.1:8000\", bytes(data, encoding='utf-8'))\n>> print(f.read(500).decode('utf-8'))\n```\n\n### urlopen()과 Request 클래스 이용하여 요청 헤드 지정하기\n```\n>>> from urllib.request import urlopen, Request\n>>> from urllib.parse import urlencode\n>>>\n>>> url = 'http://127.0.0.1:8000'\n>>> data = {\n 'name':'김윤미',\n 'email':'kimyn@naver.com',\n 'url':'http://www.naver.com'\n}\n>>> encDate = urlencode(data)\n>>> postData = bytes(encData, encoding='utf-8')\n>>> req = Request(url, data=postData)\n>>> req.add_header('Content-Type', 'application/x-www-form-rulencoded')\n>>> f = req.urlopen(req)\n>>> print(f.info())\n>>> print(f.read(500).decode('utf-8'))\n```\n\n### build_opener()와 HTTPBasicAuthHandler 클래스를 이용하여 인증요청 보내기\n```\n>>> from urllib.request import HTTPBasicAuthHandler, build_opener\n>>> auth_handler = HTTPBasicAuthHandler()\n>>> auth_handler.add_password(realm='kym', user='ymkim', passwd='ymkimadmin', uri='http:// 127.0.0.1:8000/auth')\n>>> opener = build_opener(auth_handler)\n>>> resp = opener.open('http://127.0.0.1:8000/ahtu/')\n>>> print(resp.read().decode('utf-8'))\n```\n + 핸들러 생성 => 생성한 핸들러를 오프너에 전달하여 오프너 생성 => 오프너로 요청\n\n### build_open()와 HTTPCookieProcessor 클래스로 쿠키데이터 포함한 요청 하기\n```\nfrom urllib.request import Request, HTTPCookieProcessor, build_opener\nurl = 'http://127.0.0.1:8000/cookie'\n# get 방식으로 쿠키핸들러 요청하기\n# 쿠키 핸들러 생성, 쿠키 데이터 저장\ncookie_handler = HTTPCookieProcessor()\nopener = build_open(cookie_handler)\n\nreq = Request(url)\nres = opener.open(req)\nprint(res.info())\nprint(res.read().decode('utf-8'))\n\n# 이전의 요청에서 받은 쿠키를 헤더에 담아서 Post 요청\ndata = 'language=python&framework=django'\nencData = bytes(data, encoding='utf-8')\nreq = Request(url, encData)\nres = opener.open(req)\nprint(res.info())\nprint(res.read().decode('utf-8'))\n```\n\n### install_opener() 와 ProxyHandler 및 ProxyBasicAuthHandler 클래스로 프록시 처리\n```python\nimport urllib.request\n\nurl = 'http://www.example.com'\nproxyServer = 'http://www.proxy.com:3128'\n\n# proxy 서버를 설정함\nproxy_handler = urllib.request.ProxyHandler({'http':proxyServer})\n# 프록시 서버 설정 무시하고 웹서버로 요청 시,\n# proxy_handler = urllib.request.ProxyHandler({})\n\n# 프록시 서버에 대한 인증 처리\nproxy_auth_handler = urllib.request.ProxyBasicAuthHandler()\nproxy_auth_handler.add_password('realm', 'host', 'username', 'password')\n\n# 2개의 핸들러를 오프너에 등록\nopener = urllib.request.build_opener(proxy_handler, proxy_auth_handler)\n# 디폴트 오프너로 등록\nurllib.request.install_opener(opener)\n\n# opener.open() 대신 urlopen()을 사용\nf = urllib.request.urlopen(url)\nprint(\"geturl():\", f.geturl())\nprint(f.read(300).decode('utf-8'))\n```\n\n### urllib.request와 HTMLParser를 이용해서 이미지만 검색하여 리스트를 보여주기\n```python\nfrom html.parser import HTMLParser\nfrom urllib.request import urlopen\n\n# HTMLParser 를 사용할 때는, 이렇게 HTMLParser를 상속받고, 필요한 메소드를 overrwide 합니다.\nclass ImageParser(HTMLParser):\n # 'img' 태그를 찾기 위해서 handler_starttag 를 오버라이드 합니다.\n def handle_starttag(self, tag, attrs):\n if tag != 'img':\n return\n if not hasattr(self, 'result'):\n self.result = []\n\n for name, value in attrs:\n if name == 'src':\n # img src 태그를 찾으면 self.result 목록에 추가합니다.\n self.result.append(value)\n\n\ndef parse_image(data):\n parser = ImageParser()\n # HTML문장을 feed() 함수에 넣어주면, 바로 파싱하고 그 결과를 parser.result에 추가\n parser.feed(data)\n # set 에 parser.result를 넣어주어 중복된 값을 삭제합니다.\n dataSet = set( x for x in parser.result)\n return dataSet\n\ndef main():\n url = \"http://www.google.co.kr\"\n # urlopen 함수를 이용하여 구글의 첫페이지를 가져옵니다.\n with urlopen(url) as f:\n chatset = f.info().get_param('charset')\n data = f.read().decode(chatset)\n\n dataSet = parse_image(data)\n print('\\n>>>> Fetch Images from', url)\n print('\\n'.join(sorted(dataSet)))\n\n```\n\n## 3. http.client 모듈\n> GET, POST 이외의 방식으로 요청하는등 저수준의 더 세밀한 기능이 필요할 때 사용 \n> putheader(), endheaders(), send() 등의 함수가 있다. \n> 참조: <https://docs.python.org/3/library/http.client.html> \n\n### http.client 모듈의 코딩 순서\n\n|순번 |코딩순서 |코딩예시|\n|-----|---------|--------|\n|1 |연결 객체 생성 | conn = http.client.HTTPConnection('www.naver.com') |\n|2 |요청 보냄|conn.request('GET','/index.html') |\n|3 |응답 객체 생성|res = conn.getresponse() |\n|4 |응답 데이터 읽음 |data = res.read() |\n|5 |연결 닫음 |conn.close() |\n\n### GET 방식 요청하기\n\n```python\nfrom http.client import HTTPConnection\n\nhost = 'www.naver.com'\n# HTTPConnection()의 인수로 url('http://www....')이 아닌 host('www....')를 이용한다.\nconn = HTTPConnection(host)\n# conn.request(메소드, url, [body], [header])\nconn.request('GET','/')\nres1 = conn.getresponse()\nprint(res1.status, res1.reason)\n# 데이터를 모두 읽어들여야 다음 요청이 가능하다. 그렇지 않으면 error가 발생한다.\ndata1 = res1.read()\n\n# 두번째 요청\nconn.request('GET','/')\nres2 = conn.getresponse()\nprint(r2.status, r2.reason)\ndata2 = res2.read()\nprint(data2.decode())\nconn.close()\n```\n\n### HEAD 메소드로 요청하기\n\n```python\nfrom http.client import HTTPConnection\nconn = HTTPConnection('www.naver.com')\nconn.request('HEAD','/')\nresp = conn.getresponse()\ndata = resp.read()\n# head를 요청하였으므로, data( =body) 에는 아무것도 없어서 \n# 0 이 출력될 것이다.\nprint(len(data))\n```\n\n### POST 방식으로 요청하기\n```python\nfrom http.client import HTTPConnection\nfrom urllib.parse import urlencode\n\nhost = '127.0.0.1:8000'\n# 인코딩 해야 함\nparams = urlencode({\n 'language':'python',\n 'name':'김윤미',\n 'email':'kym@naver.com'\n})\nheaders = {\n 'Content-Type':'application/x-www-form-urlencoded',\n 'Accept':'text/plain'\n}\nconn = HTTPConnection(host)\nconn.request('POST','', params, headers)\nresp = conn.getresponse()\nprint(resp.status, resp.reason)\n\ndata = resp.read()\nprint(data.encode('utf-8'))\n\nconn.close()\n```\n\n### PUT 메소드로 요청하기\n\n```python\nfrom http.client import HTTPConnection\nfrom urllib.parse import urlencode\n\nhost = '127.0.0.1:8000'\n# 인코딩 해야 함\nparams = urlencode({\n 'language':'python',\n 'name':'김윤미',\n 'email':'kym@naver.com'\n})\nheaders = {\n 'Content-Type':'application/x-www-form-urlencoded',\n 'Accept':'text/plain'\n}\nconn = HTTPConnection(host)\nconn.request('PUT','', params, headers)\nresp = conn.getresponse()\nprint(resp.status, resp.reason)\n\ndata = resp.read(300)\nprint(data.encode('utf-8'))\n\nconn.close()\n```\n\n### 웹사이트에서 이미지만을 검색하여 그 이미지들을 다운로드 하는 방법\n```python\nimport os\nfrom http.client import HTTPConnection\nfrom urllib.parse import urljoin, urlunparse\nfrom urllib.request import urlretrieve\nfrom html.parser import HTMLParser\n\n# HTMLParser를 사용할 때는, HTMLParser를 상속하고, 필요한 메소드를 오버라이드하여 사용함.\nclass ImageParser(HTMLParser):\n # 이미지 태그를 찾기 위해 handle_starttag를 오버라이드 함\n def handle_starttag(self, tag, attrs):\n if tag != 'img':\n return\n if not hasattr(self, 'result'):\n self.result = []\n for name, value in attrs:\n if name == 'src':\n self.result.append(value)\n\n# HTML 문장을 feed()에 주면, 바로 파싱하고 parser.result 리스트에 추가함.\ndef download_image(url, data):\n if not os.path.exists('DOWNLOAD'):\n os.makedirs('DOWNLOAD')\n\n parser = ImageParser()\n parser.feed(data)\n dataSet = set(x for x in parser.result)\n\n for x in sorted(dataSet):\n # 다운로드 하기위해 baseUrl과 파일명을 합쳐서 완전한 다운로드 주소를 만듦\n imageUrl = urljoin(url, x)\n basename = os.path.basename(imageUrl)\n print('basename:',basename)\n targetFile = os.path.join('DOWNLOAD', basename)\n\n print('Downloading...', imageUrl)\n # src로부터 파일을 가져와서 targetFile로 생성해 줌.\n urlretrieve(imageUrl, targetFile)\n\ndef main():\n host = 'www.google.co.kr'\n\n conn = HTTPConnection(host)\n conn.request('GET','')\n resp = conn.getresponse()\n # 인코딩 방식을 알아내는 방법\n charset = resp.msg.get_param('charset')\n data = resp.read().decode(charset)\n conn.close()\n\n print('\\n>>>>>> Download Images from ', host)\n url = urlunparse(('http',host,'','','',''))\n download_image(url,data)\n\nif __name__ == '__main__':\n main()\n```\n","dir":"/python/webStandardLibrary/","name":"webClientLIbrary.md","path":"python/webStandardLibrary/webClientLIbrary.md","url":"/python/webStandardLibrary/webClientLIbrary.html"},{"sort":2,"layout":"default","title":"장고 파이썬 쉘로 데이터 조작하기","content":"# 장고 파이썬 쉘로 데이터 조작하기\n\n> <font color='red'>간단한 데이터 관리는 Admin 사이트 UI를 활용하지만, 복잡하고 다양한 데이터 처리나 웹 브라우저에 접속 할 필요가 없을 때, 일반적으로 shell 로 데이터를 처리한다.</font> \n> Create \n> Read \n> Update \n> Delete \n> 데이터 조작하기 실습 \n\n\n## 1. 장고 파이썬 쉘 시작하는 명령어 \n- manage.py 를 통해 DJANGO_SETTINGS_MODULE 속성을 이용하여 미리 mysite/settings.py 파일을 임포트 함.\n\n ```\n ch3>python manage.py shell\n ```\n\n## 2. Create - 데이터 생성/입력\n- save() 명령 실행, 내부적으로 SQL의 INSERT 문장 실행\n\n ```\n ch3> python manage.py shell\n In [1]: from polls.models import Question, Choice\n In [2]: from django.utils import timezone\n In [3]: q = Question(question_text='What's new?', pub_date=timezone.now())\n In [4]: q.save()\n ```\n\n\n## 3. Read - 데이터 조회\n\n> 조회 결과는 QuerySet 객체(컬랙션) 로 반환됨 \n> QuerySet은 SELECT 문장에 해당하며 QuerySet 객체를 반환하려면, objects 객체를 이용해야 함 \n> Where에 해당하는 함수는, filter() 와 exclude() 가 있음 \n> 1개의 데이터만 반환하는 것이 확실할 때는, get() 함수를 쓸 수 있음 \n> SQL의 OFFSET이나 LIMIT 에 해당하는 기능은 배열 슬라이스를 사용 할 수 있으며, 이때는 리스트를 반환함 \n\n1. 전체 레코드 조회하여 <font color='red'>QuerySet 반환받기</font>\n - 핵심 키워드 : `Question.objects.all()`\n\n ```\n In [16]: Question.objects.all()\n Out[16]: <QuerySet [<Question: What is your hobby?>, <Question: Who do you like best?>, <Question: Where do you live?>, <Question: What's new?>]>\n ```\n\n2. 조건에 맞는 레코드 검색하기 (Where) : filter(), exclude()\n - objects.all(), filter(), exclude()는 모두 <font color='red'>QuerySet 컬랙션을 반환</font>하므로 `체인`식 호출이 가능\n\n ```\n In [12]: Question.objects.all().filter(question_text__startswith='What').exclude(pub_date__gte=datetime.now().strftime(\"%Y-%m-%d\")).filter(pub_date__gte=datetime(2005, 1, 30))\n Out[12]: <QuerySet [<Question: What is your hobby?>]>\n ```\n\n3. 한개의 요소만 있는것이 확실한 경우 get() 사용\n> 1개의 <font color='red'>객체를 리턴함</font>\n\n ```\n In [13]: Question.objects.get(pk=1)\n Out[13]: <Question: What is your hobby?>\n ```\n\n4. SQL의 OFFSET 또는 LIMIT 에 해당하는 개수 제한하기\n> 배열 슬라이스 문법을 사용함 \n> <font color='red'> 리스트를 반환함 </font>\n\n ```\n In [14]: Question.objects.all()[:2]\n Out[14]: <QuerySet [<Question: What is your hobby?>, <Question: Who do you like best?>]>\n\n In [15]: Question.objects.all()[1:3]\n Out[15]: <QuerySet [<Question: Who do you like best?>, <Question: Where do you live?>]>\n ```\n\n## 4. Update - 데이터 수정하기\n\n1. 한개의 객체 (row)만 수정하기 : save() 메소드 사용\n\n ```\n In [23]: q=Question.objects.get(question_text__startswith='What is')\n\n In [24]: q.question_text = 'What is your favorit thing?'\n\n In [25]: q.save()\n\n In [26]: Question.objects.all()\n Out[26]: <QuerySet [<Question: What is your favorit thing?>, <Question: Who do you like best?>, <Question: Where do you live?>, <Question: What's new?>]>\n ```\n\n2. 여러개의 객체 한번에 수정하기 : update() 메소드 사용\n\n ```\n In [28]: Question.objects.filter(question_text__startswith='What').update(question_text='Everything is the same')\n Out[28]: 2\n ```\n\n## 5. Delete - 데이터 삭제\n> delete() 메소드 사용 \n> Fk 로 연결된 Choice 데이터도 연쇄 삭제됨 \n\n1. 조건에 해당하는 데이터 삭제하기\n\n ```\n In [32]: Question.objects.filter(question_text__startswith='Everything').delete()\n Out[32]: (5, {'polls.Choice': 3, 'polls.Question': 2})\n\n In [33]: Question.objects.all()\n Out[33]: <QuerySet [<Question: Who do you like best?>, <Question: Where do you live?>]>\n\n In [34]: Choice.objects.all()\n Out[34]: <QuerySet [<Choice: Reading>, <Choice: Soccer>, <Choice: Climbing>, <Choice: seoul, Korea>, <Choice: jeju, Korea>, <Choice: Asan, Korea>]>\n ```\n\n2. 모든 데이터 삭제하기 : all()메소드를 사용해야만 모두 삭제 할 수 있음. 삭제의 위험성을 낮추기 위한 조치\n\n - (O) `Question.objects.all().delete()`\n - (x) `Question.objects.delete()`\n\n## 6. FK 로 연결된 Choice 모델 데이터 조작하기\n> choice_set 속성을 이용한다. \n\n### (1) Question 테이블의 레코드 하나를 조회한다\n\n >>> q = Question.objects.get(pk=2)\n\n### (2) 조회된 Question 객체 q에 연결된 Choice 레코드를 모두 조회한다\n\n In [37]: q.choice_set.all()\n Out[37]: <QuerySet [<Choice: Reading>, <Choice: Soccer>, <Choice: Climbing>]>\n\n### (3) question 객체에 답변항목인 choice 객체 3개를 생성해 보자\n\n In [36]: q = Question.objects.get(pk=2)\n\n In [37]: q.choice_set.all()\n Out[37]: <QuerySet [<Choice: Reading>, <Choice: Soccer>, <Choice: Climbing>]>\n\n In [38]: q.choice_set.create(choice_text='Sleeping', votes=0)\n Out[38]: <Choice: Sleeping>\n\n In [39]: q.choice_set.create(choice_text='Eating', votes=0)\n Out[39]: <Choice: Eating>\n\n In [40]: c = q.choice_set.create(choice_text='Palying', votes=0)\n\n### (4) choice 객체에 연결되어 있는 Question 객체를 조회해 보자\n\n In [40]: c = q.choice_set.create(choice_text='Palying', votes=0)\n\n In [41]: c.question\n Out[41]: <Question: Who do you like best?>\n\n### (5) 반대로, question 객체에 연결된 choice 객체를 조회해 보자\n\n In [42]: q.choice_set.all()\n Out[42]: <QuerySet [<Choice: Reading>, <Choice: Soccer>, <Choice: Climbing>, <Choice: Sleeping>, <Choice: Eating>, <Choice: Palying>]>\n\n In [43]: q.choice_set.count()\n Out[43]: 6\n\n### (6) __ 를 이용하여 객체간의 관계를 표현해 보자\n\n(ex) pub_date 속성이 올해인 Question 객체에 연결된 Choice 객체를 모두 조회하는 명령\n\n In [44]: current_year = timezone.now().year\n\n In [45]: Choice.objects.filter(question__pub_date__year=current_year)\n Out[45]: <QuerySet [<Choice: Reading>, <Choice: Soccer>, <Choice: Climbing>, <Choice: seoul, Korea>, <Choice: jeju, Korea>, <Choice: Asan, Korea>, <Choice: Sleeping>, <Choice: Eating>, <Choice: Palying>]>\n\n### (7) choice_set 중에 한개의 객체를 삭제해 보자\n\n In [46]: c = q.choice_set.filter(choice_text__startswith='Sleeping')\n\n In [47]: c.delete()\n Out[47]: (1, {'polls.Choice': 1})\n\n In [48]:","dir":"/python/DjangoCoreFunction/","name":"dataAlterbyPythonShell.md","path":"python/DjangoCoreFunction/dataAlterbyPythonShell.md","url":"/python/DjangoCoreFunction/dataAlterbyPythonShell.html"},{"sort":2,"permalink":"/python/DjangoWebFramework/","layout":"default","title":"Django 웹 프레임워크","content":"<h1 id=\"django-웹-프레임워크\">Django 웹 프레임워크</h1>\n\n<blockquote>\n <p>MVT 패턴 <br />\nORM 지원 <br />\n관리자화면 자동 구성 <br />\n정규표현식을 이용한 우아한 URL 지원 <br />\n자체 템플릿 지원 <br />\n여러유형/여러장소의 캐시 시스템 운영 <br />\n다국어 지원 <br />\n풍부한 개발환경 (테스트서버 지원등) <br />\n소스 변경 사항 자동 반영 (웹서버 재실행 필요 없음)</p>\n</blockquote>\n\n<p>source: <code class=\"language-plaintext highlighter-rouge\">python/DjangoWebFramework/README.md</code></p>\n","dir":"/python/DjangoWebFramework/","name":"README.md","path":"python/DjangoWebFramework/README.md","url":"/python/DjangoWebFramework/"},{"sort":2,"layout":"default","title":"운영 서버 적용 전 장고의 설정 변경 사항","content":"# 운영 서버 적용 전 장고의 설정 변경 사항\n\n## 1. 운영서버에 필요한 항목이 잘 설정되었는지 체크하는 명령어\n`$python manage.py check --deploy`\n\n## 2. settings.py의 SECRET_KEY\n\n- 운영모드에서는 settings.py 파일에 하드코딩된 SECRET_KEY 를 **환경변수**에 저장하거나 **파일에 저장**하여 그 경로를 settings.py 파일에 적어준다.\n```python\nimport os\nSECRET_KEY = os.environ['SECRET_KEY']\n# 또는,\nwith open (os.path.join(BASE_DIR, 'www_dir', 'secret_key.txt')) as f:\n SECRET_KEY = f.read().strip()\n```\n\n## 3. settigns.py의 DEBUG 모드\n\n- 운영모드에서는 settings.py 파일의 DEBUG 모드를 **False**로 변경한다.\n\n## 4. settigns.py의 ALLOWED_HOSTS 항목\n\n- 운영모드에서는 장고가 실행되는 서버의 IP 주소나 도메인을 등록한다.\n\n## 5. settings.py 파일의 STATIC_ROOT 항목과 collectstatic 명령\n\n- 운영모드에서는 웹서버에게 정적파일의 위치를 알려주어야 한다.\n- settings.py 파일의 'STATIC_ROOT' 항목은 `collectstatic` 명령 실행 시, 정적파일을 한곳에 모아주는 디렉토리 임\n```python\nSTATIC_ROOT = os.path.join(BASE_DIR, 'www_dir', 'static')\n```\n- 이 디렉토리는 웹 서버의 설정 파일에도 등록해야 함\n + Apache의 경우, httpd.conf의 Alias/static/ 항목에 등록\n\n- collectstatic 명령 실행\n + <font color='red'>주의!</font>\n - settings.py의 STATICFILES_DIRS 항목에 STATIC_ROOT 항목에 정의된 디렉토리는 없어야 함\n - collectstatic 명령 시, STATICFILES_DIRS 항목에 정의된 디렉토리의 정적파일을 모아서, STATIC_ROOT에 복사해 주기 때문\n\n```console\n$ python manage.py collectstatic\n```\n\n## 6. settings.py의 DATABASES NAME 항목과 접근권한\n\n1. settings.py 파일의 DATABASES의 NAME 속성값의 경로를 **db/db.sqlist3**으로 변경\n```python\nDATABASES = {\n 'NAME' : os.path.join(BASE_DIR, 'db', 'db.sqlite3')\n}\n```\n\n2. DATABASE 디렉토리 및 파일의 접근권한 설정 ( 웹서버가 rw 할 수 있도록 )\n```console\nch3 > mkdir db\nch3 > mv db.sqlite3 db/\nch3 > chmod 777 db/\nch3 > chmod 666 db/db.sqlite3 \n```\n\n## 7. settings.py의 LOGGING 항목과 로그파일 위치 접근권한\n- settings.py 파일의 LOGGING 항목에 로그파일 위치가 정의되어 있음\n- 웹 서버가 로그파일에 접근 할 수 있도록 접근권한 설정\n```console\nch3 >chmod 777 logs/\nch3 >chmod 666 logs/mysite.log\n```\n## 8. 캐시서버와 데이터베이스 서버의 접속 PASSWORD 다른곳에 저장\n- SECRET_KEY 처럼, settings.py 파일에 하드코딩된 비밀번호를 다른 곳에 저장\n\n## 9. 메일발송 기능이 있을 경우, SERVER_EMAIL 및 DEFAULT_FROM_EMAIL 항목 설정\n- 발신자 주소를 root@localhost 및 webmaster@localhost 로 지정\n ","dir":"/python/DjangoWebServerConfig/","name":"jangoSettingCheckListInProductMode.md","path":"python/DjangoWebServerConfig/jangoSettingCheckListInProductMode.md","url":"/python/DjangoWebServerConfig/jangoSettingCheckListInProductMode.html"},{"sort":2,"permalink":"/python-grammar/","layout":"default","title":"파이썬 기본문법","content":"<h1 id=\"파이썬-기본문법\">파이썬 기본문법</h1>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>{% include list.liquid all=true %}\n\n\n</code></pre>  </div></div>\n\n","dir":"/python-grammar/","name":"README.md","path":"python-grammar/README.md","url":"/python-grammar/"},{"sort":2,"layout":"default","title":"장고의 웹애플리케이션 개발 방식","content":"# 장고의 웹애플리케이션 개발 방식\n\n+ 프로젝트 : 전체 프로그램\n+ 애플리케이션 : 모듈화된 단위 프로그램\n\n## 1. MVT 개발방식\n\n### (1) MVT의 정의\n1. `M` : Module ( DB테이블을 클래스로 만들어, DB와 객체를 맵핑 해주는 역할 ), modules.py 파일에 정의\n2. `V` : Views (장고에서는, Controller를 View로 구분한다.), views.py 파일에 정의\n3. `T` : Templete (템플릿, html 파일을 생성해 주는 템플릿 파일 ), templetes.py 파일에 정의\n\n### (2) 예시\n\n```mermaid\nflowchart LR\n id1((웹클라이언트))<--Response-->id2([View])--Model CRUD--> id3([Model]);\n id1--Request-->id6[URL\\n conf];\n id6--Request-->id2;\n id2--Templete Rendering-->id4([Templete]);\n id3--ORM-->id5[(DB)];\n```\n\n+ URLconf : URL을 분석하여, URL에 해당하는 뷰를 결정\n\n## 2. Model - 데이터베이스 정의\n> ORM 기법으로 테이블을 클래스로 맵핑하기 때문에 데이터베이스 엔진이 바뀌더라도 변경을 하지 않아도 된다. \n> models.py 파일에 정의 \n> 참고 : <https://docs.djangoproject.com/en/3.2/topics/db/models> \n\n### (1) 예시 \n\n```python\nfrom django.db import models\n\nclass Person(models.Model):\n first_name = models.CharField(max_length=30)\n last_name = models.CharField(max_length=30)\n```\n\n+ DB에 테이블을 생성하지 않아도, 웹서버 실행 시 테이블이 없으면 자동생성 함\n\n### (2) DB 스키마 자동 생성의 규칙\n1. 테이블명 : 애플리케이션이름_모델 클래스명 (모두 소문자)\n2. PrimaryKey : 장고에서 자동부여 (=id)\n\n## 3. URLconf - URL 정의\n> urls.py 파일에 정의 \n\n### (1) 예시\n\n```python\nfrom django.urls import path\nfrom . import views\n\nurlpatterns = [\n path('articles/2003/',views.special_case_2003),\n path('articles/<int:year>/',views.year_archive),\n path('articles/<int:year>/<int:month>/',views.month_archive),\n path('articles/<int:year>/<int:month>/<slug:slug>/',views.article_detail),\n]\n```\n\n### (2) URL 분석하는 순서\n1. settings.py 파일에서 ROOT_URLCONF 항목을 읽어 최상위 URLconf(urls.py)의 위치를 알아냄\n2. URLconf 로딩하여, urlpatterns 변수에 지정된 URL 리스트를 검사\n3. 매치된 URL에 해당하는 view를 호출 (view 는 클래스나 메소드, 호출 시, HTTPRequest객체와 <>안에 정의된 파라미터를 함께 전달함)\n4. 매칭에 실패시, 에러 처리하는 뷰 호출\n\n### (3) <> (Path Converter)에 사용되는 타입\n1. str : 지정하지 않으면 기본값\n2. int\n3. slug : slug 형식의 문자열 (ASCII, 숫자, 하이픈, 밑줄)\n4. uuid \n5. path : /를 포함한 모든 문자열, 패턴의 일부가 아니라 전체를 추출\n\n### (4) 정규표현식을 사용한 URL 표현법\n\n+ 예시\n - path() : 타입을 사용하여 파라미터 정의\n - re_path() : 정규식을 사용하여 파라미터 정의\n\n```python\nfrom django.urls import path, re_path\nfrom . import views\n\nurlpatterns = [\n path('articles/2003/', views.special_case_2003),\n re_path(r'^articles/(?P<year>[0-9]{4})/$', views.year_archive),\n re_path(r'^articles/(?P<year>[0-9]{4})/(?P<month>[0-9]{2})/$', views.month_archive),\n re_path(r'^articles/(?P<year>[0-9]{4})/(?P<month>[0-9]{2})/(?P<slug>[\\w-]+)/$',views.article_detail)\n]\n```\n\n### (5) 정규표현식에 사용되는 문자들\n\n|표현 |의미 |\n|:--- |:--- |\n|.(Dot) |모든 문자 1개 |\n|^(Carot) |문자열의 시작 |\n|$ |문자열의 끝 |\n|[] |[]안의 문자중 하나 |\n|[^] |[]안의 문자 이외의 문자 하나 |\n|* |0회 이상 반복 |\n|+ |1번 이상 반복 |\n|? |0 또는 1번 반복 |\n|{n} |n회 반복 |\n|{m,n} |m~n회 반복 |\n|A\\|B |A또는 B |\n|[a-z] |a~z의 소문자 |\n|\\w |영문대문자, 영문소문자, 숫자, 밑줄 중 1글자 |\n|\\d |숫자 한개 |\n\n## 4. View - 로직정의\n> 웹 요청을 받고 응답을 반환함 \n> views.py 파일에 정의 \n> 다양한 형태의 응답 데이터를 만들어내기 위한 로직 작성 \n\n### (1) 예시\n\n```python\nfrom django.http import HttpResponse\nimport datetime\n\ndef current_datetime(request):\n now = datetime.datetime.now()\n html = \"<html><body>It is now %s.</body></html>\" % now\n return HttpResponse(html)\n```\n\n+ 에러를 응답하고 싶다면, HttpResponse클래스의 하위 클래스로 정의되어 있음 \n `return HttpResponseNotFound('<h1>Page not found</h1>')`\n\n## 5. Templete - 화면 UI\n> jango 자체 템플릿 있음, 탬플릿 태그/필터 기능 사용 가능하여 파이썬 코드를 직접 사용 가능 \n> 템플릿 파일은 지정된 곳에 반드시 위치 시켜야 함 \n> jango 에서 템플릿 찾을 때는, TEMPLETES 및 INSTALLED_APPS 에서 지정된 앱의 디렉토리 검색 (settings.py 파일에 정의되어 있음) \n\n### (1) 템플릿 위치 찾기\n1. settings.py 파일에 정의\n2. settings.py 파일 예제\n\n```python\nINSTALLED_APPS = [\n 'django.contrib.admin',\n 'django.contrib.auth',\n 'django.contrib.contenttypes'\n]\n\nTEMPLETES = [\n 'DIRS': [os.path.join(BASE_DIR,'templete')]\n]\n```\n\n- TEMPLETES 에 정의된 디렉토리를 먼저 검색\n- INSTALLED_APPS 항목에 등록된 각 앱의 templetes 디렉토리 검색\n\n3. (2)의 파일에서 검색결과 템플릿 위치\n- BASE_DIR의 위치를 /private/programmer/phthon 이라고 가정하자.\n\n```\n<!-- TEMPLETES에 정의된 디렉토리 검색 -->\n/private/programmer/phthon/templetes\n\n<!-- INSTALLED_APPS 항목에 들록된 앱에서 templetes 디렉토리 검색 -->\n/Phthon3/Lib/site-packages/django/admin/templetes\n/Phthon3/Lib/site-packages/django/auth/templetes\n/Phthon3/Lib/site-packages/django/contenttypes/templetes\n```\n\n## 6. MVT 코딩순서\n> 개발 시, 자신만의 코딩순서를 정하는 것이 로직을 풀어나가는데 일관성을 유지할 수 있고 노하우를 빨리 습득 할 수 있다. \n\n1. 프로젝트 뼈대 만들기 : 앱 개발에 필요한 디렉토리와 파일 생성\n2. 모델 코딩하기 : 테이블 관련 사항 개발 (models.py, admin.py)\n3. URLconf 코딩하기 : urls.py\n4. 템플릿과 뷰를 동시에 코딩하기 : tempeletes/ 디렉토리 하위의 *.html 및 views.py\n","dir":"/python/DjangoWebFramework/","name":"jangoDevelopmentPattern.md","path":"python/DjangoWebFramework/jangoDevelopmentPattern.md","url":"/python/DjangoWebFramework/jangoDevelopmentPattern.html"},{"sort":2,"layout":"default","title":"개발 뼈대 세우기 시 알아두기","content":"# 개발 뼈대 세우기 시 알아두기\n\n## 1. 프로젝트 생성\n```bash\n$ source /home/centos/VENV/venv/bin/activate\n(venv) $ cd /home/centos/projectDir/\n(venv) $ django-admin startproject mysite\n# 베이스디렉토리명 변경\n(venv) $ mv mysite myPrj \n```\n- 베이스디렉토리(루트디렉토리) mysite와 하위의 프로젝트 관리용 디렉토리 mysite 2개가 생성됨\n- 베이스디렉토리명은 변경해도 아무 영향이 없으므로, 프로젝트명으로 변경\n\n## 2. 설정파일 settings.py 파일 변경 (mysite/settings.py)\n\n1. **ALLOWED_HOSTS** \n- 서버의 IP나 도메인 등록\n- `ALLOWED_HOSTS = ['192.168.111.100','localhost','127.0.0.1']`\n2. **INSTALLED_APPS**\n- startapp 명령으로 신규 앱을 생성 후, INSTALLED_APPS 에 등록\n```bash\n(venv) $ python3 manage.py startapp bookmark\n(venv) $ cat /bookmark/apps.py\n(생략)\nclass BookmarkConfig(AdminConfig)\n(생략)\n(venv) $ cd ..\n(venv) $ vim mysite/settings.py\n```\n```python\n# 앱 추가\nINSTALLED_APPS = [..(생략),\nbookmark.apps.BookmarkConfig,\n]\n```\n\n3. **TEMPLATES의 'DIRS' 항목**\n```python\nTEMPLATES = [\n ...\n 'DIRS'=[os.path.join(BASE_DIR, 'templates')],\n ...\n]\n```\n\n4. **데이트베이스 엔진 (기본은 sqlite3)**\n```python\nDATABASES = {\n 'default': {\n 'ENGINE': 'django.db.backends.sqlite3' # 이부분 내가 사용코저 하는 DB 엔진으로 변경. 오라클, mysql 등..\n }\n}\n```\n5. **TIME_ZONE**\n- 한국시간으로 변경\n- `TIME_ZONE = 'Asia/Seoul'`\n6. **STATIC_URL, STATICFILES_DIRS**\n- 정적파일들을 모아둘 경로를 지정\n```python\nSTATIC_URL = '/static/'\nSTATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')] #추가\n```\n\n7. **MEDIA_URL, MEDIA_ROOT**\n- 파일 업로드 기능을 개발할 때 필요한 설정\n```python\nMEDIA_URL = '/media/'\nMEDIA_ROOT = os.path.join(BASE_DIR, 'media')\n```\n\n8. **USE_TZ**\n- 한국 시간대만 사용하는 프로젝트의 경우, 아래와 같이 설정하면 DB에 저장되는 시간도 한국시간으로 저장되어 편리함\n- `USE_TZ = False`\n9. **LANGUAGE_CODE**\n- Admin 사이트 화면의 메뉴 및 설명이나, 날짜/시간에 대한 표현이 달라지므로 주의\n- 아래와 같이 설정하면 한국어로 표현됨\n- `LANGUAGE_CODE = 'ko-kr'`\n\n## 3. 기본테이블 생성 (User, Group)\n1. **장고가 기본적으로 제공하는 User, Group 테이블을 생성하는 과정**\n```bash\n(venv)$ python3 manage.py migrate\n```\n\n## 4. 슈퍼유저 생성\n1. **장고가 제공하는 Admin 사이트에 접속할 관리자(슈퍼유저) 생성 과정**\n2. Username, Email, Password, Password(again) 을 입력 해야 함\n```bash\n(venv) $ python3 manage.py createsuperuser\n```\n\n## 5. 애플리케이션 생성\n```bash\n(venv) $ python3 manage.py startapp bookmark\n```\n\n## 6. 애플리케이션 등록\n1. **bookmark 앱 생성시 자동으로 생성된 apps.py에 정의된 BookmarkConfig를 settings.py에 등록해야 함**\n```python\nINSTALLED_APPS = [\n ....\n 'bookmark.apps.BookmarkConfig', # 추가\n]\n```\n","dir":"/python/PracticeProgram/","name":"makeBorn.md","path":"python/PracticeProgram/makeBorn.md","url":"/python/PracticeProgram/makeBorn.html"},{"sort":2,"layout":"default","title":"웹 서버 라이브러리","content":"# 2. 웹 서버 라이브러리\n> 웹서버는 프레임워크를 사용해서 개발하는 경우가 대부분이지만, 웹 서버 라이브러리의 동작원리를 익히는 것이 고급 개발자로 가는 길이다. \n\n## http.server의 주요 클래스\n\n|클래스 명 |주요기능 |\n|:--- |:--- |\n|HTTPServer |. 웹서버를 만들기 위한 클래스, ip와 port를 바인딩 함 <br>. HTTPServer객체 생성 시, 핸들러가 반드시 필요함 |\n|BaseHTTPRequestHandler |. 핸들러를 만들기 위한 기반 클래스. HTTP 처리 로직이 들어 있음<br>. 이 클래스를 상속 받아, 자신의 로직 처리를 담당하는 핸들러를 만들 수 있음 |\n|SimpleHTTPRequestHandler|. BaseHTTPRequestHandler를 상속받아 만든 클래스<br>. GET과 HEAD 메소드 처리가 가능한 핸들러|\n|CGIHTTPRequestHAndler|. SimpleHTTPRequestHandler클래스를 상속받아 만든 클래스<br>. 추가적으로 POST와 CGI 처리가 가능한 핸들러 클래스|\n\n## 가장 간단한 웹서버 만들기 샘플\n> HTTPServer와 BaseHTTPRequestHandler 를 이용\n\n```python\nfrom http.server import HTTPServer, BaseHTTPRequestHandler\n\nclass MyHandler(BaseHTTPRequestHandler):\n def do_GET(self):\n self.send_response_only(200, 'OK')\n self.send_header('Content-Type', 'text/plain')\n self.end_headers()\n self.wfile.write(b\"Hello World\")\n\nif __name__ == '__main__':\n # 서버의 ip, port, 핸들러를 인자로 하여, HttpServer객체를 생성한다.\n server = HTTPServer(('',8888), MyHandler)\n print(\"Started WebServer on port 8888......\")\n print(\"Press ^C to quit WebServer\")\n # 요청을 처리함\n server.serve_forever()\n```\n- 웹서버를 만드는 방법은 일정한 룰에 의해 작성됨\n\n## SimpleHTTPRequestHandler 클래스\n> 별도의 코딩이 필요 없음 \n> do_GET(), do_HEAD() 메소드가 정의되어 있음 \n\n```\n$ python -m http.server 8888\n```\n- 웹브라우저에 http://localhost:8888 을 요청하면, 내 PC의 디렉터리 목록이 보여진다.\n\n## CGIHTTPRequestHandler 클래스\n> 미리 구현되어 있어서, 즉시 웹서버 실행이 가능함 \n> do_POST()메소드가 정의되어 있고 CGI 웹서버 실행만 가능함 \n> CGI 웹서버 실행시 --cgi 옵션을 이용 \n> 디폴트 포트번호는 8000 \n> http.server --cgi 실행위치가 웹서버의 루트 디렉토리가 됨\n\n```\n$python -m http.server 8888 --cgi\n```\n\n### CGIHTTPRequestHandler 클래스를 이용하여 Post 요청 해보기\n- 서버 스크립트\n + 반드시 cgi-bin 폴더안에 파일을 생성해야 함\n + 파일에 실행권한을 주어야 함 \n `$ chmod 755 ./cgi-bin/cgi_server.py` \n + 새로운 터미널을 열고 cgi-bin 폴더의 상위폴더에서 http.server --cgi 를 실행하면, 자동으로 cgi-bin 폴더안의 cgi-server.py가 실행됨 \n `$ python -m http.server 8888 --cgi`\n\n```python\n#!/usr/bin/env python\n\nimport cgi\n\nform = cgi.FieldStorage()\nname = form.getvalue('name')\nemail = form.getvalue('email')\nurl = form.getvalue('url')\n\nprint('Content-Type: text/plain')\nprint()\n\nprint('Welcome... CGI Script')\nprint('name is ', name)\nprint('email is ', email)\nprint('url is ', url)\n```\n\n- 클라이언트 스크립트\n + http.server --cgi 명령을 실행한 위치가 루트가 되므로, url이 .../cgi-bin/cgi_server.py 가 되는 것임 \n\n```python\nfrom urllib.request import urlopen\nfrom urllib.parse import urlencode\n\nurl = 'http://127.0.0.1:8888/cgi-bin/cgi_server.py'\ndata = urlencode({\n 'name':'김윤미',\n 'email':'kym@naver.com',\n 'url':'http://www.naver.com'\n})\npostData = data.encode()\n\nf = urlopen(url, postData)\nprint(f.read().decode('utf-8'))\n\n```","dir":"/python/webStandardLibrary/","name":"webServerLibrary.md","path":"python/webStandardLibrary/webServerLibrary.md","url":"/python/webStandardLibrary/webServerLibrary.html"},{"sort":3,"layout":"default","title":"CGI/WSGI 라이브러리","content":"<h1 id=\"cgiwsgi-라이브러리\">CGI/WSGI 라이브러리</h1>\n\n<blockquote>\n <p>CGI/WSGI는 웹서버로 들어오는 요청을 웹어플리케이션으로 처리를 위임하여 결과를 반환받을 때 웹서버와 웹 어플리케이션 사이의 규약을 준수한 라이브러리 <br />\nCGI의 단점을 업그레이드 시킨것이 WSGI 임 <br />\nDjango 는 WSGI를 사용함</p>\n</blockquote>\n\n<h2 id=\"cgi-관련-모듈-현재에-와서-사용빈도-낮음\">CGI 관련 모듈 (현재에 와서 사용빈도 낮음)</h2>\n<ul>\n <li>cgi 모듈 : FieldStorage 클래스 정의 ( post 요청으로 들어온 파라미터를 처리하기 위한 클래스 )</li>\n <li>cgitb 모듈 : 에러 발생 시, 에러에 대한 상세 정보를 제공하기 위한 모듈</li>\n</ul>\n\n<h2 id=\"wsgi\">WSGI</h2>\n<ul>\n <li>WSGI 서버 (mod_wsgi, uWSGI, Gunicorn) : 범용 웹서버인 apache나 NginX는 wsgi 처리 기능이 없으므로, 그러한 웹서버와의 통신 규격을 처리해 주는 파이썬 모듈</li>\n <li>Django도 wsgi 규격을 처리해 줌으로 WSGI 서버라 할 수 있다</li>\n</ul>\n\n<h2 id=\"wsgi의-애플리케이션-처리-과정\">WSGI의 애플리케이션 처리 과정</h2>\n<ol>\n <li>웹서버가 요청을 받음 : url 분석 / 필요시 WSGI에 처리 위임</li>\n <li>WSGI 서버가 파라미터 전달받음 : wsgi.py 실행 / application(environ, start_response) 함수 호출 / console 출력\n <ul>\n <li>environ : 프레임워크에 정의되어 있음, HTTP_HOST, HTTP_USER_AGENT, SERVER_PROTOCOL 등의 HTTP 환경변수</li>\n <li>start_response(status, headers) : 반드시 호출해야 하며, 인자가 이미 정해져 있음. 그냥 사용하면 됨</li>\n </ul>\n </li>\n <li>application 이 실행됨 : environ 환경변수 처리 / 뷰 처리 / HTTPRequest 객체 생성 / start_response() 함수 호출 / HTTPResponse 리턴\n <ul>\n <li>application 함수의 리턴값은 iterable 타입이어야 함</li>\n </ul>\n </li>\n</ol>\n\n<h2 id=\"wsgirefsimple_server-모듈\">wsgiref.simple_server 모듈</h2>\n<blockquote>\n <p>웹 프레임워크가 제공하는 wsgi 서버<br />\nWSGIServer 클래스, WSGIRequestHandler 클래스 제공<br />\n장고의 runserver 도 wsgiref.simple_server 로 만듦</p>\n</blockquote>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kn\">from</span> <span class=\"nn\">wsgiref.simple_server</span> <span class=\"kn\">import</span> <span class=\"n\">make_server</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">application</span><span class=\"p\">(</span><span class=\"n\">environ</span><span class=\"p\">,</span> <span class=\"n\">start_response</span><span class=\"p\">):</span>\n    <span class=\"n\">status</span> <span class=\"o\">=</span> <span class=\"s\">'200 OK'</span>\n    <span class=\"n\">headers</span> <span class=\"o\">=</span> <span class=\"p\">[(</span><span class=\"s\">'Content-Type'</span><span class=\"p\">,</span><span class=\"s\">'text/plain'</span><span class=\"p\">)]</span>\n    <span class=\"n\">start_response</span><span class=\"p\">(</span><span class=\"n\">status</span><span class=\"p\">,</span> <span class=\"n\">headers</span><span class=\"p\">)</span>\n    <span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">b'This is a simple WSGI Application'</span><span class=\"p\">]</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">response</span>\n\n<span class=\"k\">if</span> <span class=\"n\">__name__</span> <span class=\"o\">==</span> <span class=\"s\">'__main__'</span><span class=\"p\">:</span>\n    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s\">'Started WSGI Server on port 8888'</span><span class=\"p\">)</span>\n    <span class=\"c1\"># wsgi API 규격 : make_server(), serve_forever()\n</span>    <span class=\"n\">server</span> <span class=\"o\">=</span> <span class=\"n\">make_server</span><span class=\"p\">(</span><span class=\"s\">''</span><span class=\"p\">,</span><span class=\"mi\">8888</span><span class=\"p\">,</span><span class=\"n\">application</span><span class=\"p\">)</span>\n    <span class=\"n\">server</span><span class=\"p\">.</span><span class=\"n\">serve_forever</span><span class=\"p\">()</span>\n</code></pre>  </div></div>\n<ul>\n <li>웹브라우저에 ‘http://localhost:8888’ 실행하여 확인</li>\n</ul>\n","dir":"/python/webStandardLibrary/","name":"CgiWsgiLibrary.md","path":"python/webStandardLibrary/CgiWsgiLibrary.md","url":"/python/webStandardLibrary/CgiWsgiLibrary.html"},{"sort":3,"permalink":"/python/DjangoCoreFunction/","layout":"default","title":"Django 핵심기능","content":"<h1 id=\"django-핵심기능\">Django 핵심기능</h1>\n\n<blockquote>\n <p>Admin 사이트 꾸미기\n장고 파이썬 쉘로 데이터 조작하기\n템플릿 시스템\n폼 처리하기\n클래스형 뷰 <br />\n로그 남기기</p>\n</blockquote>\n\n<p>source: <code class=\"language-plaintext highlighter-rouge\">python/DjangoCoreFunction/README.md</code></p>\n","dir":"/python/DjangoCoreFunction/","name":"README.md","path":"python/DjangoCoreFunction/README.md","url":"/python/DjangoCoreFunction/"},{"sort":3,"layout":"default","title":"프로젝트 뼈대 만들기","content":"<h1 id=\"프로젝트-뼈대-만들기\">프로젝트 뼈대 만들기</h1>\n<blockquote>\n <p>프로젝트를 위해 필요한 디렉토리 및 파일을 구성하기 <br />\n설정파일 셋팅하기 <br />\n기본 테이블 생성하기 <br />\n슈퍼유저 생성하기 <br />\n프로젝트 하위에 애플리케이션 개발을 위한 디렉토리와 파일을 구성하기</p>\n</blockquote>\n\n<h2 id=\"1-프로젝트-디렉토리-및-파일의-구성\">1. 프로젝트 디렉토리 및 파일의 구성</h2>\n\n<ul>\n <li>프로젝트 뼈대가 완성된 디렉토리 체계 + templetes 디렉토리, static 디렉토리, logs 디렉토리등 필요한 디렉토리 추가</li>\n</ul>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>[ch3] ------db.sqlite3\n      |---manage.py\n      |---[mysite]------__init__.py\n      |             |---settings.py\n      |             |---urls.py\n      |             |---wsgi.py\n      |---[polls]-------__init__.py\n                    |---admin.py\n                    |---apps.py\n                    |---[migrations]------__init__.py\n                    |---models.py\n                    |---tests.py\n                    |---views.py\n      \n</code></pre>  </div></div>\n<ul>\n <li>뼈대 디렉토리에 대한 설명</li>\n</ul>\n\n<table>\n <thead>\n <tr>\n <th style=\"text-align: left\">항목명</th>\n <th style=\"text-align: left\">설명</th>\n </tr>\n </thead>\n <tbody>\n <tr>\n <td style=\"text-align: left\"><font color=\"skyblue\">ch3 디렉토리 </font></td>\n <td style=\"text-align: left\">최상위 루트 디렉토리. 그냥 디렉토리일 뿐임. <br /> settings.py 파일에서 BASE_DIR 항목으로 지정됨</td>\n </tr>\n <tr>\n <td style=\"text-align: left\">db.sqlite3</td>\n <td style=\"text-align: left\">데이터베이스 파일, 테이블이 들어 있음</td>\n </tr>\n <tr>\n <td style=\"text-align: left\">manage.py</td>\n <td style=\"text-align: left\">장고 명령어 처리하는 파일</td>\n </tr>\n <tr>\n <td style=\"text-align: left\"><font color=\"skyblue\">mysite 디렉토리</font></td>\n <td style=\"text-align: left\">프로젝트명으로 만들어진 디렉토리, 프로젝트의 최상위<br />프로젝트 관련 파일들이 들어 있음</td>\n </tr>\n <tr>\n <td style=\"text-align: left\">__init__.py</td>\n <td style=\"text-align: left\">디렉토리에 있으면, 패키지로 인식함</td>\n </tr>\n <tr>\n <td style=\"text-align: left\">settings.py</td>\n <td style=\"text-align: left\">프로젝트 설정파일</td>\n </tr>\n <tr>\n <td style=\"text-align: left\">urls.py</td>\n <td style=\"text-align: left\">최상위 URLconf 파일</td>\n </tr>\n <tr>\n <td style=\"text-align: left\">wsgi.py</td>\n <td style=\"text-align: left\">웹서버와 연동하기 위한 WSGI 연동 파일</td>\n </tr>\n <tr>\n <td style=\"text-align: left\"><font color=\"skyblue\">polls 디렉토리</font></td>\n <td style=\"text-align: left\">애플리케이션명으로 생성된 디렉토리<br />해당 애플리케이션 파일들이 들어 있음</td>\n </tr>\n <tr>\n <td style=\"text-align: left\">__init__.py</td>\n <td style=\"text-align: left\">이 파일이 있으면 파이썬 패키지로 인식함</td>\n </tr>\n <tr>\n <td style=\"text-align: left\">admin.py</td>\n <td style=\"text-align: left\">Admin 사이트에 모델을 등록해주는 파일</td>\n </tr>\n <tr>\n <td style=\"text-align: left\">apps.py</td>\n <td style=\"text-align: left\">어플리케이션의 설정 클래스를 정의</td>\n </tr>\n <tr>\n <td style=\"text-align: left\"><font color=\"skyblue\">migrations 디렉토리</font></td>\n <td style=\"text-align: left\">데이터베이스 변경사항 관리하기 위한 디렉토리</td>\n </tr>\n <tr>\n <td style=\"text-align: left\">models.py</td>\n <td style=\"text-align: left\">데이터베이스 모델 클래스 정의</td>\n </tr>\n <tr>\n <td style=\"text-align: left\">tests.py</td>\n <td style=\"text-align: left\">단위테스트용 파일. 없어도 됨</td>\n </tr>\n <tr>\n <td style=\"text-align: left\">views.py</td>\n <td style=\"text-align: left\">뷰 함수 정의</td>\n </tr>\n <tr>\n <td style=\"text-align: left\"><font color=\"skyblue\">templetes 디렉토리</font></td>\n <td style=\"text-align: left\">프로젝트별 템플릿과 어플리케이션별 템플릿을 위한 디렉토리를 생성함<br />mysite/templetes 및 polls/templetes 위치에 생성됨</td>\n </tr>\n <tr>\n <td style=\"text-align: left\"><font color=\"skyblue\">static 디렉토리</font></td>\n <td style=\"text-align: left\">정적파일들을 저장(CSS, javascript파일, image 등)<br />프로젝트 레벨과 어플리케이션 레벨에 생성됨<br />mysite/static 및 polls/static 위치에 생성될 수 있음</td>\n </tr>\n <tr>\n <td style=\"text-align: left\"><font color=\"skyblue\">logs 디렉토리</font></td>\n <td style=\"text-align: left\">로그파일들이 생성되는 디렉토리<br />settings.py 파일에 LOGGING 항목으로 위치가 지정됨</td>\n </tr>\n </tbody>\n</table>\n\n<h2 id=\"2-프로젝트-뼈대-생성하기\">2. 프로젝트 뼈대 생성하기</h2>\n<blockquote>\n <p>프로젝트는 django-admin startproject 명령어로 생성함\n어플리케이션은 python manage.py startapp 명령어를 이용하여 생성함</p>\n</blockquote>\n\n<ul>\n <li>전체 작업 미리보기</li>\n</ul>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>&gt;django-admin startproject mysite   //mysite라는 프로젝트 생성,base_dir(root 디렉토리) 도 mysite로 생성됨, 후에 mysite 라는 이름은 추후 원하는 이름으로 변경해도 됨. \n&gt; mv mysite rootdir                 //하위의 프로젝트 디렉토리와 햇깔릴 수 있으므로, base 디렉토리를 다른 이름으로 변경함\n&gt; cd mysite                         // base 디렉토리 안으로 이동\n&gt;python manage.py startapp polls    //manage.py 파일은 장고 명령어를 처리하는 파일임. polls 이라는 어플리케이션을 생성\n&gt; cd mysite                         // 프로젝트 관리 디렉토리로 이동\n&gt;notepad settings.py    //settings.py 파일을 열어 설정을 확인함\n&gt; cd ..                 //base 디렉토리로 이동, manage.py 파일이 base 디렉토리 하위에 있기 때문에...\n&gt;python manage.py migrate   //데이터베이스에 기본테이블 생성, db.sqlite3 파일이 생성됨\n&gt;python manage.py runserver //현재까지 생성된 작업을 테스트용 서버에서 확인, 웹 브라우저에서 http://localhost:8000 으로 확인함.\n</code></pre>  </div></div>\n<h3 id=\"1--프로젝트-생성하기\">(1) 프로젝트 생성하기</h3>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>$ &gt; django-admin startproject mysite\n$ &gt; cd mv mysite dootdir\n</code></pre>  </div></div>\n<ul>\n <li>mysite base 디렉토리와 하위에 mysite 프로젝트 관리 디렉토리가 생성됨</li>\n <li>base 디렉토리와 프로젝트 디렉토리 이름이 같으면 햇깔리므로 base 디렉토리 이름을 변경함</li>\n <li>mysite 프로젝트 디렉토리 하위에 <strong>init</strong>.py, wsgi.py, asgi.py, urls.py, settings.py 파일이 생성됨</li>\n</ul>\n\n<h3 id=\"2-어플리케이션-생성하기\">(2) 어플리케이션 생성하기</h3>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>$ &gt; cd rootdir\n$rootdir &gt; python manage.py startapp polls\n</code></pre>  </div></div>\n<ul>\n <li>polls 디렉토리 생성</li>\n <li>polls 하위에 admin.py, apps.py, migrations, models.py, tests.py views.py, <strong>init</strong>.py 생성됨</li>\n</ul>\n\n<h3 id=\"3-프로젝트-설정파일-확인-및-변경\">(3) 프로젝트 설정파일 확인 및 변경</h3>\n<blockquote>\n <p>mysite 프로젝트 디렉토리 하위의 settings.py 파일을 변경. <br />\n각종 디렉토리 위치, 로그 형식, 프로젝트에 포함된 어플리케이션들의 이름등이 정의되어 있음.</p>\n</blockquote>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>$ mysite &gt; vim settings.py\n</code></pre>  </div></div>\n<h4 id=\"ㄱ-allowed_hosts-항목\">ㄱ. ALLOWED_HOSTS 항목</h4>\n<blockquote>\n <p>DEBUG=True 면 개발모드, false 면 운영모드 <br />\n운영모드의 경우, 반드시 ALLOWED_HOSTS에 서버의 IP나 도메인을 지정해야 함</p>\n</blockquote>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">ALLOWED_HOSTS</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">'localhost'</span><span class=\"p\">,</span><span class=\"s\">'127.0.0.1'</span><span class=\"p\">]</span>\n</code></pre>  </div></div>\n\n<h4 id=\"ㄴ-installed_apps-항목\">ㄴ. INSTALLED_APPS 항목</h4>\n<blockquote>\n <p>프로젝트에 포함되는 어플리케이션을 모두 설정파일에 등록 <br />\n간단하게 어플리케이션 이름 (polls)을 등록해도 되지만, 어플리케이션의 설정 클래스를 등록하는 것이 더 정확함 <br />\npolls 의 어플리케이션 설정 클래스는 polls 하단의 apps.py 파일내에 있음</p>\n</blockquote>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">INSTALLED_APPS</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"s\">'django.contrib.admin'</span><span class=\"p\">,</span>\n    <span class=\"s\">'django.contrib.auth'</span><span class=\"p\">,</span>\n    <span class=\"s\">'django.contrib.contenttypes'</span><span class=\"p\">,</span>\n    <span class=\"s\">'django.contrib.sessions'</span><span class=\"p\">,</span>\n    <span class=\"s\">'django.contrib.messages'</span><span class=\"p\">,</span>\n    <span class=\"s\">'django.contrib.staticfiles'</span><span class=\"p\">,</span>\n    <span class=\"s\">'polls.apps.AppConfig'</span>\n<span class=\"p\">]</span>\n</code></pre>  </div></div>\n\n<h4 id=\"ㄷ-databases-항목\">ㄷ. DATABASES 항목</h4>\n<blockquote>\n <p>장고는 default로 SQLite3 데이터베이스 엔진을 사용하도록 설정됨 <br />\n다른 데이터베이스 엔진으로 변경 할 수도 있음</p>\n</blockquote>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">DATABASES</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s\">'default'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"s\">'ENGINE'</span><span class=\"p\">:</span> <span class=\"s\">'django.db.backends.sqlite3'</span><span class=\"p\">,</span>\n        <span class=\"s\">'NAME'</span><span class=\"p\">:</span> <span class=\"n\">BASE_DIR</span> <span class=\"o\">/</span> <span class=\"s\">'db.sqlite3'</span><span class=\"p\">,</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre>  </div></div>\n\n<h4 id=\"ㄹ-타임존-항목-지정\">ㄹ. 타임존 항목 지정</h4>\n<blockquote>\n <p>‘UTC’(섹계표준시)로 되어 있는 것을 ‘Asia/Seoul’로 변경</p>\n</blockquote>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\"># TIME_ZONE = 'UTC'\n</span><span class=\"n\">TIME_ZONE</span> <span class=\"o\">=</span> <span class=\"s\">'Asia/Seoul'</span>\n</code></pre>  </div></div>\n\n<ul>\n <li>USE_TZ 항목\n <ul>\n <li>USE_TZ=True 로 설정하면, DB는 UTC 시간으로 저장되고 UI 처리시에는 TIME_ZONE 항목에 설정된 시간대를 반영하여 처리</li>\n <li>USE_TZ=False 로 하면, DB와 UI 모두 TIME_ZONE 항목에 설정된 시간대로 반영됨</li>\n <li>USE_TZ=True 로 하면, 일광절약시간제를 반영하여 알아서 계산해 줌</li>\n <li>우리나라의 경우, <strong>일광절약시간제를 사용하지 않기 때문에, USE_TZ을 False로 설정하는 것이 더 편리함</strong></li>\n </ul>\n </li>\n</ul>\n\n<h3 id=\"4-기본-테이블-생성하기\">(4) 기본 테이블 생성하기</h3>\n<blockquote>\n <p><strong>사용자 및 그룹 테이블등을 기본적으로 생성해주는 작업</strong><br />\nmigrate 명령을 실행하면 db.SQLite3 파일이 자동 생성됨</p>\n</blockquote>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>$ rootdir&gt; python manage.py migrate\n</code></pre>  </div></div>\n<h3 id=\"5-지금까지-작업한-것-확인하기\">(5) 지금까지 작업한 것 확인하기</h3>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>$ rootdir&gt; python manage.py runserver 0.0.0.0:8000 // 주소 0.0.0.0 의 의미는, 현재 명령을 실행하는 서버의 ip와 무관하게 웹 접속을 받겠다는 의미\n</code></pre>  </div></div>\n\n<ul>\n <li>runserver 사용법\n <ol>\n <li>\n <blockquote>\n <p>python manage.py runserver : 디폴트로 127.0.0.1:8000 을 사용함</p>\n </blockquote>\n </li>\n <li>\n <blockquote>\n <p>python manage.py runserver 8888 : 127.0.0.1:8888 을 사용함</p>\n </blockquote>\n </li>\n <li>\n <blockquote>\n <p>python manage.py runserver 0.0.0.0:8000&amp; : &amp;를 명령 끝에 추가하면, 백그라운드에서 실행함</p>\n </blockquote>\n </li>\n </ol>\n </li>\n</ul>\n\n<h3 id=\"6-자동생성된-관리자-화면-확인하기\">(6) 자동생성된 관리자 화면 확인하기</h3>\n\n<ul>\n <li>http://127.0.0.1:8000/admin 으로 접속</li>\n</ul>\n\n<ol>\n <li>id, pw 입력창 보여짐 : 관리자(superUser) 생성이 필요함</li>\n</ol>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>$&gt;python manage.py createsuperuser\n</code></pre>  </div></div>\n<ol>\n <li>console 화면의 지시에 따라 Username, Email, Password, Password(again) 을 입력하여 관리자 계정 생성</li>\n <li>http://127.0.0.1:8000/admin 으로 접속하여 생성한 계정으로 로그인 함</li>\n <li>Users와 Groups 테이블이 보임 =&gt; django.contrib.auth 애플리케이션에 User와 Group 이 미리 정의되어 있기 때문에 보여짐</li>\n</ol>\n\n<h3 id=\"7-생성된-프로젝트-뼈대-확인하기\">(7) 생성된 프로젝트 뼈대 확인하기</h3>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code># window\n$ C:&gt; tree /F rootdir\n# macos\n&gt; brew install tree\n&gt; tree rootdir\n</code></pre>  </div></div>\n\n<p><img src=\"../../../assets/images/project_tree.png\" alt=\"project tree\" /></p>\n","dir":"/python/DjangoWebFramework/","name":"applicationArchithect.md","path":"python/DjangoWebFramework/applicationArchithect.md","url":"/python/DjangoWebFramework/applicationArchithect.html"},{"sort":3,"layout":"default","title":"모델 개발 시 알아두기","content":"<h1 id=\"모델-개발-시-알아두기\">모델 개발 시 알아두기</h1>\n\n<h2 id=\"1-bookmarkmodelspy-에-테이블-정의\">1. bookmark/models.py 에 테이블 정의</h2>\n<ol>\n <li><strong>테이블 - 클래스, 컬럼 - 클래스 변수</strong></li>\n <li><strong>테이블 클래스는 django.db.models.Model 클래스를 상속</strong></li>\n</ol>\n\n<h2 id=\"2-admin-사이트에-테이블-반영\">2. Admin 사이트에 테이블 반영</h2>\n<ol>\n <li>models.py 에서 정의한 테이블을 bookmark/admin.py 파일에 등록</li>\n <li>admin.site.register(Bookmark, BookmarkAdmin) 함수 호출대신 데코레이션 <font color=\"red\">@admin.register(Bookmark)</font> 사용하면 편리함</li>\n</ol>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kn\">from</span> <span class=\"nn\">django.contrib</span> <span class=\"kn\">import</span> <span class=\"n\">admin</span>\n<span class=\"kn\">from</span> <span class=\"nn\">bookmark.models</span> <span class=\"kn\">import</span> <span class=\"n\">Bookmark</span>\n\n<span class=\"o\">@</span><span class=\"n\">admin</span><span class=\"p\">.</span><span class=\"n\">register</span><span class=\"p\">(</span><span class=\"n\">Bookmark</span><span class=\"p\">)</span>\n<span class=\"k\">class</span> <span class=\"nc\">BookmarkAdmin</span><span class=\"p\">(</span><span class=\"n\">admin</span><span class=\"p\">.</span><span class=\"n\">ModelAdmin</span><span class=\"p\">):</span>\n    <span class=\"n\">list_display</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"s\">'id'</span><span class=\"p\">,</span> <span class=\"s\">'title'</span><span class=\"p\">,</span> <span class=\"s\">'url'</span><span class=\"p\">)</span>\n</code></pre>  </div></div>\n\n<h2 id=\"3-데이터베이스-변경-사항-반영\">3. 데이터베이스 변경 사항 반영</h2>\n\n<ol>\n <li><strong>새로 생성한 bookmark 에 대한 DB 변경 사항을 추출하여, 반영하는 작업</strong></li>\n</ol>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"o\">(</span>venv<span class=\"o\">)</span> <span class=\"nv\">$ </span>python3 manage.py makemigrations bookmark <span class=\"c\">#bookmark 생략 가능</span>\n<span class=\"o\">(</span>venv<span class=\"o\">)</span> <span class=\"nv\">$ </span>python3 manage.py migrate\n</code></pre>  </div></div>\n\n<h3 id=\"-마이그레이션-명령-\"><font color=\"blue\">⌘ 마이그레이션 명령 </font></h3>\n<div style=\"background-color: #D9EEF1;border-radius: 5px;padding: 10px;\">\n1. (venv) $ python3 manage.py showmigrations : 모든 마이그레이션 보여주고, 각 마이그레이션 별 적용여부 확인<br />\n2. (venv) $ python3 manage.py sqlmigrate bookmark 0001 : bookmark 앱의 0001번 마이그레이션을 적용 할 때 사용될 sql 문 보여줌\n</div>\n\n<h2 id=\"4-컬럼의-데이터필드-타입\">4. 컬럼의 데이터필드 타입</h2>\n\n<ul>\n <li>from django.db import models</li>\n</ul>\n\n<h3 id=\"1-modelsslugfield옵션\">(1) models.SlugField(옵션,)</h3>\n\n<ol>\n <li>슬러그(Slug)란?\n <ul>\n <li>페이지나 포스트를 설명하는 핵심단어의 집합</li>\n <li>웹 개발시에는 특정 콘텐츠의 고유주소로도 사용됨</li>\n <li>보통, 페이지나 포스트의 제목에서 조사, 전치사, 쉼표, 마침표등을 빼고 띄어쓰기는 하이픈(-)으로 바꾸어 만듦</li>\n <li>URL에서 Slug를 고유주소로 사용함으로써 검색 엔진에서 빨리 페이지를 찾아주고 정확도를 높일 수 있음</li>\n </ul>\n </li>\n <li>SlugField 필드타입\n <ul>\n <li>URL 에서 pk 대신 사용됨. pk (=id) 를 사용하는 것 보다 슬러그를 사용하면 이해하기 쉬움</li>\n <li>Slug 필드의 기본 길이는 50</li>\n <li>해당 Slug 필드에는 기본적으로 <strong>인텍스</strong>가 생성됨</li>\n </ul>\n </li>\n</ol>\n\n<h3 id=\"2-modelscharfield\">(2) models.CharField()</h3>\n<h3 id=\"3-modelstextfield\">(3) models.TextField()</h3>\n<h3 id=\"4-modelsdatetimefield\">(4) models.DateTimeField()</h3>\n<h2 id=\"5-데이터-필드의-옵션들\">5. 데이터 필드의 옵션들</h2>\n\n<ol>\n <li>blank=True : 빈칸 허용 여부</li>\n <li>auto_now_add=True : models.DateTimeField 의 옵션으로, 생성될 때 시간을 자동 기록</li>\n <li>auto_now=True : models.DateTimeField 의 옵션으로, 객체가 저장될 때 (= 객체가 변경될 때) 시간을 자동으로 기록</li>\n <li>verbose_name=’TITLE’ : 폼 화면에서 레이블로 사용되는 문구로, 해당 컬럼의 별칭</li>\n <li>max_length=50 : 최대 길이</li>\n <li>allow_unicode=True : 한글입력을 허용함</li>\n <li>help_text=’도움말’ : Admin 사이트에서 입력필드를 설명하는 문구</li>\n</ol>\n\n<h2 id=\"6-model-클래스의-meta-내부-클래스\">6. Model 클래스의 Meta 내부 클래스</h2>\n\n<ol>\n <li>필드 속성외에 필요한 모델의 파라미터 정의</li>\n <li>예제</li>\n</ol>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">class</span> <span class=\"nc\">Post</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"p\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n    <span class=\"p\">...(</span><span class=\"n\">생략</span><span class=\"p\">)...</span>\n    <span class=\"k\">class</span> <span class=\"nc\">Meta</span><span class=\"p\">:</span>\n        <span class=\"n\">verbose_name</span> <span class=\"o\">=</span> <span class=\"s\">'post'</span> <span class=\"c1\"># 테이블의 단수 별칭\n</span>        <span class=\"n\">verbose_name_plural</span> <span class=\"o\">=</span> <span class=\"s\">'posts'</span> <span class=\"c1\"># 테이블의 복수 별칭\n</span>        <span class=\"n\">db_table</span> <span class=\"o\">=</span> <span class=\"s\">'blog_posts'</span> <span class=\"c1\"># 데이터베이스에 저장되는 테이블의 이름 (이렇게 지정하지 않으면, 앱명_모델클래스명 이 기본이므로 blog_post 였을 것임.)\n</span>        <span class=\"n\">ordering</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"s\">'-modify_dt'</span><span class=\"p\">,)</span> <span class=\"c1\"># 내림차순 정렬\n</span></code></pre>  </div></div>\n<ul>\n <li>verbose_name : 테이블의 단수 별칭</li>\n <li>verbose_name_plural : 테이블의 복수 별칭</li>\n <li>db_table : DB에 저장될 테이블의 이름</li>\n <li>ordering : 테이블 조회시 기본 정렬</li>\n</ul>\n\n<h2 id=\"7-model-클래스의-함수-정의\">7. Model 클래스의 함수 정의</h2>\n\n<ol>\n <li>예제\n <div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">class</span> <span class=\"nc\">Post</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"p\">.</span><span class=\"n\">Model</span><span class=\"p\">)</span> <span class=\"p\">:</span>\n <span class=\"p\">...(</span><span class=\"n\">생략</span><span class=\"p\">)...</span>\n\n <span class=\"k\">def</span> <span class=\"nf\">__str__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n     <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">title</span>\n    \n <span class=\"k\">def</span> <span class=\"nf\">get_absolute_url</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n     <span class=\"k\">return</span> <span class=\"n\">reverse</span><span class=\"p\">(</span><span class=\"s\">'blog:post_detail'</span><span class=\"p\">,</span> <span class=\"n\">args</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">slug</span><span class=\"p\">,))</span>\n    \n <span class=\"k\">def</span> <span class=\"nf\">get_previous</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n     <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">get_previous_by_modify_dt</span><span class=\"p\">()</span>\n\n <span class=\"k\">def</span> <span class=\"nf\">get_next</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n     <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">get_next_by_modify_dt</span><span class=\"p\">()</span>\n</code></pre>  </div> </div>\n </li>\n</ol>\n\n<ul>\n <li>__str__ 함수 : 모델을 출력 할 때, __str__() 함수를 이용함</li>\n <li>get_absolute_url() 함수 : ‘blog:post_detail’의 URL 을 리턴하고, 인자로 slug 값을 리턴합, templates 에서 모델객체.get_absolute_url 로 호출</li>\n <li>get_previous() 함수 : 장고의 내장함수 <font color=\"red\">get_previous_by_modify_dt()</font>를 리턴하여, modify_dt로 정렬 하였을 때 이전 모델객체(row)를 반환, templates 에서 모델객체.get_previous 로 호출</li>\n <li>get_next() 함수 : 장고의 내장함수 <font color=\"red\">get_next_by_modify_dt()</font>를 리턴하여, modify_dt로 정렬 하였을 때 다음 모델 객체(row)를 반환, templates 에서 모델명.get_next 로 호출</li>\n</ul>\n\n<h2 id=\"8-model-클래스를-adminpy에-등록\">8. Model 클래스를 admin.py에 등록</h2>\n\n<h3 id=\"1-등록-속성\">(1) 등록 속성</h3>\n\n<ol>\n <li>예제\n <div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"o\">@</span><span class=\"n\">admin</span><span class=\"p\">.</span><span class=\"n\">register</span><span class=\"p\">(</span><span class=\"n\">Post</span><span class=\"p\">)</span>\n<span class=\"k\">class</span> <span class=\"nc\">PostAdmin</span><span class=\"p\">(</span><span class=\"n\">admin</span><span class=\"p\">.</span><span class=\"n\">admin</span><span class=\"p\">.</span><span class=\"n\">ModelAdmin</span><span class=\"p\">):</span>\n <span class=\"n\">list_display</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"s\">'id'</span><span class=\"p\">,</span><span class=\"s\">'title'</span><span class=\"p\">,</span><span class=\"s\">'modify_dt'</span><span class=\"p\">)</span>\n <span class=\"n\">list_fiter</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"s\">'modify_dt'</span><span class=\"p\">)</span>\n <span class=\"n\">search_fields</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"s\">'title'</span><span class=\"p\">,</span> <span class=\"s\">'content'</span><span class=\"p\">)</span>\n <span class=\"n\">prepopulated_fields</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s\">'slug'</span><span class=\"p\">:(</span><span class=\"s\">'title'</span><span class=\"p\">,)}</span>\n</code></pre>  </div> </div>\n </li>\n <li>list_display : Admin 사이트에 보여지는 컬럼의 순서</li>\n <li>list_filter : 특정 필터링 결과만 보여짐</li>\n <li>search_fields : 지정된 컬럼으로 검색할 수 있는 검색필드 보여짐</li>\n <li>prepopulated_fields : 자동 입력으로, 위의 예제에서는 slug를 title을 사용해 미리 채워지도록 함</li>\n</ol>\n","dir":"/python/PracticeProgram/","name":"DevModel.md","path":"python/PracticeProgram/DevModel.md","url":"/python/PracticeProgram/DevModel.html"},{"sort":3,"layout":"default","title":"템플릿 시스템","content":"# 템플릿 시스템\n> 템플릿 코드 : 렌더링 하기 전의 템플릿 파일 \n> 템플릿 파일 : 렌더링을 마친 후 html 등의 문서파일로 해석된 파일 \n\n## 1. 템플릿 변수\n\n1. 변수의 표현식\n\n```\n{% raw %}\n{{variable}}\n{{variable.prop}}\n{% endraw %}\n```\n\n2. 정의되어 있지 않은 변수일 경우, '' 빈 문자열로 채워줌. 이 값을 변경하려면 settings.py 파일의 다음과 같은 속성을 지정해 주면 됨\n\n `TEMPLATE_STRING_IF_INVALID`\n\n## 2. 템플릿 필터 \n> 필터 참고하기 : <https://docs.djangoproject.com/en/2.1/ref/templates/builtins>\n\n1. 파이프(\\|) 문자 사용\n{%raw%}\n `{{ name:lower}}` : name 변수값을 소문자로 변경해 주는 필터\n{%endraw%}\n2. 필터를 체인으로 연결 할 수 있음\n{%raw%}\n `{{text|escape|linebreaks}}` : text 문자열의 특수문자를 escape 해주고, 그 결과를 <p> 태그로 감싸줌\n{%endraw%}\n3. 몇가지 필터는 인자를 가진 경우도 있음\n - bio 변수값 중 앞에 30개의 단어만 보여주고, 줄바꿈 문자는 모두 없애는 필터\n {%raw%}\n `{{bio|truncatewords:30}}`\n {%endraw%}\n - 인자에 빈칸이 있는 경우 따옴표로 감싸줌\n {%raw%}\n `{{list|join:\" // \"}}` : list 요소를 ' // '로 연결해 줌. list가 ['a','b','c'] 라면 'a // b // c' 가 됨\n {%endraw%}\n - value 값이 False 이거나 없는 경우, \"nothing\"으로 보여줌\n {%raw%}\n `{{value|default:\"nothing\"}}`\n {%endraw%}\n - value 변수값의 길이를 반환\n {%raw%}\n `{{value|length}}` : value 변수는 문자열이나 리스트도 가능함\n {%endraw%}\n - value 변수값에서 HTML 태그를 모두 없애 줌\n {%raw%}\n `{{value|striptags}}`\n {%endraw%}\n - value 값이 복수이면 복수 접미사를 붙여줌\n {%raw%}\n `{{value|pluralize}}` : value가 복수이면 's'를 붙여줌 \n `{{value|pluralize:'es'}}`: value가 복수이면 'es'를 붙여줌 \n `{{value|pluralize:'ies'}}` : value가 복수이면 'ies'를 붙여줌 \n {%endraw%}\n - value에 2를 더하기를 해줌\n {%raw%}\n `{{value|add:'2'}}`\n {%endraw%}\n - 예시\n {%raw%}\n `{{'python'|add:'django'}}` => 'pythondjango' \n `{{[1,2,3]|add:[4,5,6]}}` => [1,2,3,4,5,6] \n `{{'5'|add:'10'}}` => 15 \n {%endraw%}\n\n## 3. 템플릿 태그\n\n### (1) {%raw%}{% for %} 태그{%endraw%}\n- 예시\n\n```html\n{%raw%}\n{% for athlete in athlete_list %}\n <li>{{ athlete.name }}</li>\n{% endfor %}\n{%endraw%}\n```\n\n- loop 시 사용할 수 있는 여러가지 변수\n\n|변수명 |설명 |\n|-------|-------|\n|forloop.counter |1부터 카운트 |\n|forloop.counter0 |0부터 카운트 |\n|forloop.revcounter |역순으로 1부터 카운트 |\n|forloop.revcounter0 |역순으로 0부터 카운트 |\n|forloop.first |루프 첫번째 실행이면 True |\n|forloop.last |루프 마지막 실행이면 True |\n|forloop.parentloop |중첩 루프에서 바로 상위의 루프를 의미함 |\n\n### (2) {%raw%}{% if %} 태그{%endraw%}\n- 예시\n\n```html\n{%raw%}\n{% if athlete_list %}\n Number of athletes: {{ athlete_list|length }}\n{% elif athlete_in_locker_room_list %}\n Athletes should be out of the locker room soon!\n{% else %}\n No athletes.\n{% endif %}\n{%endraw%}\n```\n\n- {%raw%}`{{if athlete_list|length > 1 }}` : {% if %} 태그에 필터와 연산자를 사용 할 수 있다.{%endraw%}\n- {%raw%}and, or, not, and not, ==, !=, <, >, <=, >=, in, not in : {% if %} 태그에 불린 연산자를 사용 할 수 있다.{%endraw%}\n\n### (3) {%raw%}{% csrf_token %} 태그{%endraw%}\n\n- POST 방식의 폼을 사용하는 템플릿 코드에서 csrf_token을 사용 해야 함\n- 위치는, <form> 엘리먼트 첫줄에 넣어줌 \n- CSRF 토큰값 검증 실행하면,403 에러를 보여줌\n- 외부 URL로는 보내지 말것\n- 예시\n\n```\n{%raw%}\n <form action='.' method='post'>{% csrf_token %}\n{%endraw%}\n```\n\n### (4) {%raw%}{% url %} 태그{%endraw%}\n> 소스에 url 하드코딩을 방지하기 위해 사용\n\n- 형식 \n ```\n {%raw%}\n {% url 'namespace:view-name' arg1 arg2 %}\n {%endraw%}\n ```\n\n + namespace : urls.py 파일의 include()함수 또는 app_name 변수에 정의한 이름공간\n + view-nme : urls.py 파일에서 정의한 URL 패턴이름\n + argN : 뷰 함수에서 사용하는 인자로, PathParameter. 빈칸으로 구분함\n\n- 예시 \n ```\n {%raw%}\n <form action=\"{% url 'polls:vote' question.id %}\" method=\"post\">\n {%endraw%}\n ```\n\n### (5) {%raw%}{% with %} 태그{%endraw%}\n> 특정 값을 변수에 저장해 두는 기능 \n\n- 예시\n ```\n {%raw%}\n {% with total=business.employees.count %}\n {{ total }} people works at business\n {% endwith %}\n\n // 또는\n\n {% with business.employees.count as total %}\n {{ total }} people works at business\n {% endwith %}\n {%endraw%}\n ```\n\n\n### (6) {%raw%}{% load %} 태그{%endraw%}\n> 사용자 정의 태그 및 필터를 로딩 \n> 참고 : <https://docs.djangoproject.com/en/2.1/ref/templates/builtins/>\n\n- 예시 : somelibrary.py 와 package.otherlibrary.py 에 있는 사용자 정의 태그 및 필터를 로딩 해 줌\n ```\n {%raw%}{% load somelibrary package.otherlibrary %}{%endraw%}\n ```\n\n## 4. 템플릿 주석\n\n1. 한줄 주석 : {# #}\n ```\n {%raw%}{# greeting #}hello \n {# {% if foo %}bar{% else %} #}{%endraw%}\n ```\n2. 여러줄 주석 :{%raw%} {% comment %} ~ {% endcomment %} {%endraw%}\n\n- {%raw%}{% comment %} 태그는 중첩해서 사용할 수 없다.{%endraw%}\n\n ```\n {%raw%}\n {%comment \"Optional note\" %}\n <p>Commented out text here</p>\n {% endcomment %}\n {%endraw%}\n ```\n\n## 5. HTML 이스케이프\n> django 는 탬플릿으로 변수를 넘겨 줄 때, HTML 태그에 사용되는 몇몇 문자를 자동으로 이스케이프 한다. \n\n1. 자동 이스케이프 하는 문자들\n - &lt; : &amp;lt; 으로 변경\n - &gt; : &amp;gt; 으로 변경\n - ' : &amp;39; 으로 변경\n - \" : &amp;quot;으로 변경\n - &amp; : &amp;amp; 으로 변경\n\n2. 자동 이스케이프를 방지하는 방법 ( HTML 태그를 입력한 그대로 태그로 이용하고 싶을 때)\n\n - safe 필터를 사용하는 방법\n ```\n {% raw %}\n # data = \"<b>data\" 라고 가정할 때,\n This will not be escaped: {% data:safe %}\n {% endraw %}\n ```\n\n - {%raw%} **{% autoescape %}** 태그를 사용하는 방법 {%endraw%}, <font color='red'>autoescape 태그를 사용하는 것을 권장</font>\n ```\n {%raw%}\n {% autoescape off %}\n Hello {{ name }}\n {% endautoescape %}\n {%endraw%}\n ```\n\n## 6. 템플릿 상속\n> block 태그 이용\n\n### 예제 : 부모 템플릿 base.html\n\n```\n{%raw%}\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n <link rel=\"stylesheet\" href=\"style.css\"/>\n <title>{% block title %}My amazing site{% endblock %}</title>\n</head>\n\n<body>\n <div id=\"sidebar\">\n {% block sidebar %}\n <ul>\n <li><a href=\"/\">HOME</li>\n <li><a href=\"/blog/\">Blog</a></li>\n </ul>\n {% endblock %}\n </div>\n <div id=\"content\">\n {% block content %}{% endblock %}\n </div>\n</body>\n</html>\n{%endraw%}\n```\n\n### 예제 : 자식 템플릿\n\n```\n{%raw%}\n{% extends \"base.html\" %} \n\n{% block title %}My amazing blog{% endblock %}\n{% block content %}\n{% for entry in blog_entries %}\n <h2>{{ entry.title }}</h2>\n <p>{{ entry.body }}</p>\n{% endfor %}\n{% endblock %}\n{%endraw%}\n```\n\n+ 부모 템플릿을 extends 키워드로 상속함\n+ 부모 템플릿 block 중, title 과 content 만 다시 작성하였으므로, sidebar 는 부모의 코드를 그대로 재사용함\n\n\n### 템플릿 상속은 3단계를 권장\n\n+ 1 단계 : 사이트 전체의 룩앤필을 담고 있는 base.html\n+ 2 단계 : base.html 을 상속받는 하위 섹션별 템플릿, base_news.html, base_sports.html 등..\n+ 3 단계 : 적절한 2단계 템플릿을 상속받는 개별 페이지\n\n### 템플릿 상속을 정의할 때 유의사항\n\n+ extends 태그는 가장 먼저 나와야 함\n+ 1 단계 부모템플릿에 공통된 부분을 많이 코딩하는게 좋음\n+ 부모 템플릿의 bock을 그대로 사용하고 싶다면, 자식 템플릿에서 {{block.super}} 를 사용. 부모 템플릿을 사용하면서 내용을 추가 할 때 사용\n+ endblock content 처럼 endblock 뒤에 block 이름을 명시 해 주어도 됨","dir":"/python/DjangoCoreFunction/","name":"templateSystem.md","path":"python/DjangoCoreFunction/templateSystem.md","url":"/python/DjangoCoreFunction/templateSystem.html"},{"sort":4,"layout":"default","title":"URLconf 개발 시 알아두기","content":"<h1 id=\"urlconf-개발-시-알아두기\">URLconf 개발 시 알아두기</h1>\n\n<h2 id=\"pathparameter\">PathParameter</h2>\n\n<h3 id=\"1-slug\">1. Slug</h3>\n\n<ol>\n <li>예시\n <div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">re_path</span><span class=\"p\">(</span><span class=\"s\">r'^post/(?P&lt;slug&gt;[-\\w]+)/$'</span><span class=\"p\">,</span> <span class=\"n\">views</span><span class=\"p\">.</span><span class=\"n\">PostDV</span><span class=\"p\">.</span><span class=\"n\">as_view</span><span class=\"p\">(),</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s\">'post_detail'</span><span class=\"p\">)</span>\n</code></pre>  </div> </div>\n <ul>\n <li>slug의 pathparameter 지정을 <slug:slug> 로 할 경우, 한글을 인식하지 못함.</slug:slug></li>\n <li>\n <slug> 컨버터는 '[-a-zA-Z0-9_]+'만 허용하기 때문.\n</slug>\n </li>\n <li>그러므로, 정규 표현식을 사용하여 한글도 입력 할 수 있도록 해 주어야 함</li>\n </ul>\n </li>\n</ol>\n","dir":"/python/PracticeProgram/","name":"DevURLconf.md","path":"python/PracticeProgram/DevURLconf.md","url":"/python/PracticeProgram/DevURLconf.html"},{"sort":4,"layout":"default","title":"애플리케이션 개발하기 - Model 코딩","content":"<h1 id=\"애플리케이션-개발하기---model-코딩\">애플리케이션 개발하기 - Model 코딩</h1>\n<blockquote>\n <p>데이터베이스에 테이블을 생성하는 작업</p>\n</blockquote>\n\n<h2 id=\"1-작업순서\">1. 작업순서</h2>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>&gt; vim models.py     // 테이블을 정의함\n&gt; vim admins.py     // 관리자 페이지에서 테이블이 화면에 보이도록 함\n&gt; python manage.py makemigrations       // 데이터베이스에 변경이 필요한 부분 추출\n&gt; python manage.py migrate              // 데이터베이스에 변경사항 반영함\n&gt; python manage.py runserver            // 현재까지 작업을 개발서버에 반영함\n</code></pre>  </div></div>\n\n<h2 id=\"2-테이블-정의\">2. 테이블 정의</h2>\n<blockquote>\n <p>Question 과 Choice 두개의 테이블이 필요<br />\npolls/models.py 파일에 정의</p>\n</blockquote>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kn\">from</span> <span class=\"nn\">django.db</span> <span class=\"kn\">import</span> <span class=\"n\">models</span>\n\n<span class=\"c1\"># Create your models here.\n</span>\n<span class=\"c1\"># Question 테이블의 PK : 장고는 자동으로 Not Null &amp; Autoincrement인 id 를 만들어 줌\n</span><span class=\"k\">class</span> <span class=\"nc\">Question</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"p\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n    <span class=\"n\">question_text</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"p\">.</span><span class=\"n\">CharField</span><span class=\"p\">(</span><span class=\"n\">max_length</span><span class=\"o\">=</span><span class=\"mi\">200</span><span class=\"p\">)</span>\n    <span class=\"c1\"># DateTimeField의 'date published' 는 pub_date에 대한 레이블 문구. Admin 사이트에서 볼 수 있음.\n</span>    <span class=\"n\">pub_date</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"p\">.</span><span class=\"n\">DateTimeField</span><span class=\"p\">(</span><span class=\"s\">'date published'</span><span class=\"p\">)</span>\n    <span class=\"c1\"># 객체를 문자열로 표현하기 위해 선언하는 함수\n</span>    <span class=\"k\">def</span> <span class=\"nf\">__str__</span> <span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">question_text</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Choice</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"p\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n    <span class=\"c1\"># 항상 인수로 전달된 테이블의 PK 와 연결됨. 실제 테이블에는 '_id' 라는 접미사가 붙음\n</span>    <span class=\"n\">question</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"p\">.</span><span class=\"n\">ForeignKey</span><span class=\"p\">(</span><span class=\"n\">Question</span><span class=\"p\">,</span> <span class=\"n\">on_delete</span><span class=\"o\">=</span><span class=\"n\">models</span><span class=\"p\">.</span><span class=\"n\">CASCADE</span><span class=\"p\">)</span>\n    <span class=\"n\">choice_text</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"p\">.</span><span class=\"n\">CharField</span><span class=\"p\">(</span><span class=\"n\">max_length</span><span class=\"o\">=</span><span class=\"mi\">200</span><span class=\"p\">)</span>\n    <span class=\"n\">votes</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"p\">.</span><span class=\"n\">IntegerField</span><span class=\"p\">(</span><span class=\"n\">default</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">__str__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">choice_text</span>\n</code></pre>  </div></div>\n\n<h2 id=\"3-admin-사이트에-테이블-반영\">3. Admin 사이트에 테이블 반영</h2>\n<blockquote>\n <p>생성한 테이블을 admin 사이트에 보이도록 등록함\npolls/admins.py 파일</p>\n</blockquote>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kn\">from</span> <span class=\"nn\">django.contrib</span> <span class=\"kn\">import</span> <span class=\"n\">admin</span>\n<span class=\"kn\">from</span> <span class=\"nn\">polls.models</span> <span class=\"kn\">import</span> <span class=\"n\">Question</span><span class=\"p\">,</span> <span class=\"n\">Choice</span>\n<span class=\"c1\"># Register your models here.\n</span>\n<span class=\"n\">admin</span><span class=\"p\">.</span><span class=\"n\">site</span><span class=\"p\">.</span><span class=\"n\">register</span><span class=\"p\">(</span><span class=\"n\">Question</span><span class=\"p\">)</span>\n<span class=\"n\">admin</span><span class=\"p\">.</span><span class=\"n\">site</span><span class=\"p\">.</span><span class=\"n\">register</span><span class=\"p\">(</span><span class=\"n\">Choice</span><span class=\"p\">)</span>\n</code></pre>  </div></div>\n\n<h2 id=\"4-데이터베이스에-변경사항-반영\">4. 데이터베이스에 변경사항 반영</h2>\n<blockquote>\n <p>polls/migration 디렉토리 밑에 테이블의 변경사항을 기록하는 파일이 생성됨. 이 파일은 실제 db 동기화 ( = migrate) 시, 참조하게 됨</p>\n</blockquote>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>ch3&gt; python manage.py makemigrations\nMigrations for 'polls':\n  polls/migrations/0001_initial.py\n    - Create model Question\n    - Create model Choice\nch3&gt; python manage.py migrate\nOperations to perform:\n  Apply all migrations: admin, auth, contenttypes, polls, sessions\nRunning migrations:\n  Applying polls.0001_initial... OK\n</code></pre>  </div></div>\n\n<ul>\n <li><strong>데이터베이스 migrate 시, 사용하게 된 aql 스키마를 아래와 같이 확인 할 수 있다</strong></li>\n</ul>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>ch3&gt; python manage.py sqlmigrate polls 0001 \n</code></pre>  </div></div>\n\n<h2 id=\"5-지금까지-작업한-것-확인하기\">5. 지금까지 작업한 것 확인하기</h2>\n<blockquote>\n <p>웹 브라우저의 Admin 사이트에서 추가된 테이블을 확인한다.</p>\n</blockquote>\n\n<p><img src=\"/assets/images/admin_polls_Question_Choice.png\" alt=\"Admin 사이트에 추가된 테이블\" /></p>\n","dir":"/python/DjangoWebFramework/","name":"applicationDevelopment-Model.md","path":"python/DjangoWebFramework/applicationDevelopment-Model.md","url":"/python/DjangoWebFramework/applicationDevelopment-Model.html"},{"sort":4,"layout":"default","title":"Django 의 폼 처리 기능","content":"<h1 id=\"django-의-폼-처리-기능\">Django 의 폼 처리 기능</h1>\n<blockquote>\n <p>장고는 FORM 의 데이터를 전송 할 때는, POST 방식만 사용 <br />\n검색 폼 같은 경우는 GET 방식을 사용하여 북마크 등을 용이하게 함</p>\n</blockquote>\n\n<h2 id=\"1-django-의-폼-기능\">1. Django 의 폼 기능</h2>\n\n<ol>\n <li>폼이란?\n <ul>\n <li>HTML의 &lt;form&gt; 태그</li>\n <li>django의 Form 클래스</li>\n <li>서버로 제출되는 구조화된 데이터</li>\n </ul>\n </li>\n <li>Django의 폼 클래스\n <ul>\n <li>폼 클래스의 필드는 html의 input 엘리먼트와 매핑됨</li>\n <li>폼 클래스의 필드 역시 클래스 임</li>\n <li>데이터가 없는 폼 클래스를 언바운드 폼이라고 함. html에서 보여질 때 비어있거나 디폴트 값으로 채워짐</li>\n <li>데이터가 있는 폼 클래스를 바운드 폼이라고 함. 데이터 유효성 검사에 사용됨</li>\n <li>is_valid() 함수를 내부적으로 실행 시켜, 유효성 검사를 성공하면 True를 반환하고, 검사에 성공한 값을 cleaned_data 속성에 넣음</li>\n </ul>\n </li>\n <li>폼의 필드 클래스의 기능\n <ul>\n <li>폼 데이터를 저장하고 있음</li>\n <li>폼이 제출되면 자신의 유효성을 검사</li>\n <li>저장하는 데이터의 종류에 따라 자신의 타입을 정함</li>\n <li>폼 필드는 HTML에서 위젯으로 표현</li>\n <li>필드 타입마다 디폴트 위젯 클래스를 가지고 있으며, 오버라이딩 될 수 있음</li>\n </ul>\n </li>\n <li>폼을 포함한 템플릿 코드의 렌더링 절차\n <ol>\n <li>렌더링 할 객체를 뷰로 가져오기 (ex. 데이터베이스의 객체)</li>\n <li>그 객체를 템플릿 파일로 넘겨주기</li>\n <li>템플릿 문법을 처리하여 html 언어로 변환하기</li>\n </ol>\n </li>\n</ol>\n\n<h2 id=\"2-폼-클래스의-처리\">2. 폼 클래스의 처리</h2>\n<blockquote>\n <p>폼클래스로 폼 생성 -&gt; 뷰에서 폼클래스 처리 -&gt; 폼 클래스를 템플릿으로 변환</p>\n</blockquote>\n\n<h3 id=\"1-폼클래스로-폼-생성\">(1) 폼클래스로 폼 생성</h3>\n\n<ul>\n <li>polls/forms.py 에 폼클래스 선언</li>\n <li>django.forms.Form 의 자식 클래스로 생성</li>\n <li>\n <p>폼 클래스는 모든 필드에 대해 유효성 검사를 실행하는 is_valid() 메소드를 내장하고 있다.</p>\n\n <div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>  <span class=\"kn\">from</span> <span class=\"nn\">django</span> <span class=\"kn\">import</span> <span class=\"n\">forms</span>\n\n  <span class=\"k\">class</span> <span class=\"nc\">NameForm</span><span class=\"p\">(</span><span class=\"n\">forms</span><span class=\"p\">.</span><span class=\"n\">Form</span><span class=\"p\">):</span>\n      <span class=\"n\">your_name</span> <span class=\"o\">=</span> <span class=\"n\">forms</span><span class=\"p\">.</span><span class=\"n\">CharField</span><span class=\"p\">(</span><span class=\"n\">label</span><span class=\"o\">=</span><span class=\"s\">'Your name'</span><span class=\"p\">,</span> <span class=\"n\">max_length</span><span class=\"o\">=</span><span class=\"mi\">100</span><span class=\"p\">)</span>\n</code></pre>  </div> </div>\n </li>\n</ul>\n\n<h3 id=\"2-뷰에서-폼클래스-처리\">(2) 뷰에서 폼클래스 처리</h3>\n\n<ul>\n <li>\n <p>뷰에서 폼을 보여주기 위한 get 방식과 폼을 제출하기 위한 post 방식을 구현한다.</p>\n\n <div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>  <span class=\"kn\">from</span> <span class=\"nn\">django.shrtcuts</span> <span class=\"kn\">import</span> <span class=\"n\">render</span>\n  <span class=\"kn\">from</span> <span class=\"nn\">django.http</span> <span class=\"kn\">import</span> <span class=\"n\">HttpResponseRedirect</span>\n\n  <span class=\"k\">def</span> <span class=\"nf\">get_name</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">):</span>\n      <span class=\"c1\"># post 요청 처리\n</span>      <span class=\"k\">if</span> <span class=\"n\">request</span><span class=\"p\">.</span><span class=\"n\">method</span> <span class=\"o\">==</span> <span class=\"s\">'POST'</span><span class=\"p\">:</span>\n          <span class=\"n\">form</span> <span class=\"o\">=</span> <span class=\"n\">NameForm</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">.</span><span class=\"n\">POST</span><span class=\"p\">)</span>\n          <span class=\"k\">if</span> <span class=\"n\">form</span><span class=\"p\">.</span><span class=\"n\">is_valid</span><span class=\"p\">():</span>\n              <span class=\"c1\"># 폼 데이터가 유효하면, 데이터를 cleaned_data에 복사하고, '/thanks/'로 리다이렉트 함\n</span>              <span class=\"n\">new_name</span> <span class=\"o\">=</span> <span class=\"n\">form</span><span class=\"p\">.</span><span class=\"n\">cleaned_data</span><span class=\"p\">[</span><span class=\"s\">'name'</span><span class=\"p\">]</span>\n              <span class=\"k\">return</span> <span class=\"n\">HttpResponseRedirect</span><span class=\"p\">(</span><span class=\"s\">'/thanks/'</span><span class=\"p\">)</span>\n      <span class=\"k\">else</span><span class=\"p\">:</span>\n          <span class=\"n\">form</span> <span class=\"o\">=</span> <span class=\"n\">NameForm</span><span class=\"p\">()</span>\n      <span class=\"c1\"># get 방식이거나 폼이 유효하지 않을 때, 'name.html' 템플릿으로 값은 비어 있고 필드만 생성되어 있는 폼 객체를 전달한다.\n</span>      <span class=\"k\">return</span> <span class=\"n\">render</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"s\">'name.html'</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s\">'form'</span><span class=\"p\">:</span><span class=\"n\">form</span><span class=\"p\">})</span>\n</code></pre>  </div> </div>\n </li>\n</ul>\n\n<h3 id=\"3-폼-클래스를-템플릿으로-변환\">(3) 폼 클래스를 템플릿으로 변환</h3>\n\n<ul>\n <li>\n <p>폼 객체를 템플릿에서 표현하는 방법은 이외에 3가지가 더 있다.</p>\n\n <ol>\n <li>{{form.as_table}} : form의 각 필드를 &lt;tr&gt; 태그로 감싸서 렌더링, {{ form }} 과 같음</li>\n <li>{{form.as_p}} : form의 각 필드를 &lt;p&gt; 태그로 감싸서 렌더링</li>\n <li>{{form.as_ul}} : form의 각 필드를 &lt;li&gt; 태그로 감싸서 렌더링</li>\n </ol>\n </li>\n <li>\n <p>폼 객체는 필드만 전달하므로, &lt;form&gt; 요소와 &lt;input type=’submit’&gt; 요소, 그외 기타 &lt;table&gt;, &lt;ul&gt; 등은 직접 작성 해야 한다.</p>\n\n <ul>\n <li>name.html\n <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>    \n&lt;form action='/your_name/' method='post'&gt;\n{% csrf_token %}\n{{ form }}\n&lt;/form&gt;\n    \n</code></pre>  </div> </div>\n\n <p>↓ 렌더링</p>\n\n <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>    \n&lt;form action='/your_name/' method='post'&gt;\n&lt;label for=\"your_name\"&gt;Your name : &lt;/label&gt;\n&lt;input id='your_name' type='text' name='your_name' maxlength='100'&gt;\n&lt;input type='submit' value='Submit'&gt;\n&lt;/form&gt;\n    \n</code></pre>  </div> </div>\n </li>\n </ul>\n </li>\n</ul>\n\n","dir":"/python/DjangoCoreFunction/","name":"DjangoForm.md","path":"python/DjangoCoreFunction/DjangoForm.md","url":"/python/DjangoCoreFunction/DjangoForm.html"},{"sort":5,"layout":"default","title":"애플리케이션 개발하기 - URLconf, View 및 Templete 코딩","content":"# 애플리케이션 개발하기 - URLconf, View 및 Templete 코딩\n> ch3/mysite/urls.py 파일에 정의 \n\n## 1. 처리 흐름 설계\n\n|URL 패턴 |View 이름 |Templete 이름 |\n|:--- |:--- |:--- |\n|/polls/ |index() |index.html |\n|/polls/5/ |detail() |detail.html |\n|/polls/5/vote/ |vote() |REDIRECT:/polls/5/result |\n|/polls/5/results/ |results() |results.html |\n\n## 2. 작업 순서\n> URLconf -> templete or view\n\n1. urls.py 작성\n2. views.index(), index.html 작성\n3. views.detail(), detail.html 작성\n4. views.vote() 작성\n5. views.results(), results.html 작성\n\n## 3. URLconf 코딩\n> admin 사이트를 포함하여 5개의 url 가 필요함.\n> ch3/mysite/urls.py 에 코딩\n\n- mysite/settings.py 파일의 ROOT_URLCONF 항목이 정의되어 있으며, 이 항목에 정의된 urls.py 파일을 가장 먼저 분석함\n- 지금처럼 mysite/urls.py 에 polls에 대한 urlconf를 작성할 수도 있고, mysite/urls.py와 polls/urls.py에 나누어서 작성 할 수도 있음\n- <font color='red'>파일을 나누어 작성하는 방법을 추천함, 예시 2 (계층적인 구조로 유지보수에 좋음)</font>\n\n- **예시 1** (mysite/urls.py 에 한번에 작성하는 방법)\n\n + mysite/urls.py\n \n ```python\n from django.contrib import admin\n from django.urls import path\n from polls import views\n\n # URL 패턴 매칭이 위에서 아래로 진행되므로, 순서에 유의 해야 함\n # path() 함수는, route, view 2개의 필수 인자와 kwargs, name 2개의 선택 인자를 받음\n # route: URL 스트링\n # view: 호출되는 뷰 함수\n # kwargs: URL에서 추출된 파라미터 외에 추가적인 파라미터를 함수에 전달 할때 사용\n # name: 각 URL 패턴별로 이름을 붙여줌. 이 이름을 Templete 에서 많이 사용함.\n urlpatterns = [\n path('admin/', admin.site.urls),\n path('polls/', views.index, name='index'),\n path('polls/<int:question_id>/', views.detail, name='detail'),\n path('polls/<int:question_id>/vote/',views.vote, name='vote'),\n path('polls/<int:question_id>/results/',views.results, name='results'),\n\n ]\n\n ```\n- **예시 2** (mysite/urls.py와 polls/urls.py에 나누어서 작성하는 방법)\n \n + mysite/urls.py\n\n ```python\n from django.contrib import admin\n from django.urls import path, include\n import polls\n\n urlpatterns = [\n path('admin/', admin.site.urls),\n path('polls/',include('polls.urls')),\n ]\n ```\n\n + polls/urls.py\n\n ```python\n from django.urls import path\n from . import views\n\n # URL 패턴 매칭이 위에서 아래로 진행되므로, 순서에 유의 해야 함\n # path() 함수는, route, view 2개의 필수 인자와 kwargs, name 2개의 선택 인자를 받음\n # route: URL 스트링\n # view: 호출되는 뷰 함수\n # kwargs: URL에서 추출된 파라미터 외에 추가적인 파라미터를 함수에 전달 할때 사용\n # name: 각 URL 패턴별로 이름을 붙여줌. 이 이름을 Templete 에서 많이 사용함.\n\n # app_name 은, URL가 중복되는 경우 네임스페이스를 구별해 줌 (예를 들어, polls 애플리케이션과 임의의 blogs 라는 애플리케이션이 'detail' 이라는 url 패턴을 갖는 경우,)\n app_name = 'polls'\n urlpatterns = [\n path('', views.index, name='index'), # /polls/\n path('<int:question_id>/', views.detail, name='detail'), # /polls/5/\n path('<int:question_id>/vote/',views.vote, name='vote'), # /polls/5/vote/\n path('<int:question_id>/results/',views.results, name='results'), # /polls/5/results\n\n ]\n ```\n\n## 4. 뷰 함수 index() 및 템플릿 작성\n\n### (1) 템플릿파일을 생성할 디렉토리 생성\n\n1. 템플릿 디렉토리 생성\n\n```\n~polls>mkdir templates\n# templates안에 또 polls 디렉토리를 생성하여 그 하위에 템플릿 파일을 저장하는 이유는, 이름이 같은 템플릿 파일들의 충돌을 막기 위함\n~polls>mkdir templates/polls\n```\n2. settings.py 파일 **TEMPLATES** 항목의 **DIRS**에 템플릿 디렉토리 경로 지정\n\n```\n# mysite/settings.py\n(생략)\nTEMPLATES = [\n {\n 'BACKEND': 'django.template.backends.django.DjangoTemplates',\n 'DIRS': [os.path.join(BASE_DIR,'templates')],\n 'APP_DIRS': True,\n 'OPTIONS': {\n 'context_processors': [\n 'django.template.context_processors.debug',\n 'django.template.context_processors.request',\n 'django.contrib.auth.context_processors.auth',\n 'django.contrib.messages.context_processors.messages',\n ],\n },\n },\n]\n(생략)\n```\n\n### (2) index.html 템플릿 파일 생성\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n <meta charset=\"UTF-8\">\n <title>Title</title>\n</head>\n<body>\n {% if latest_list %}\n <ul>\n {% for question in latest_question_list %}\n <li><a href=\"/polls/{{ question.id }}/\">{{ question.question_text }}</a> </li>\n {% endfor %}\n </ul>\n {% else %}\n <p>No polls are available.</p>\n {% endif %}\n</body>\n</html>\n```\n\n### (3) index() 뷰 함수 생성\n> polls/views.py 파일에 함수 정의\n\n```python\nfrom django.shortcuts import render\nfrom polls.models import Question\n\n# Create your views here.\ndef index(request):\n # Question 테이블 객체에서 pub_date 컬럼의 역순으로 정렬하여 5개의 최근 Question 객체를 가져옴\n latest_question_list = Question.objects.all().order_by('-pub_date')[:5]\n context = {'latest_question_list':latest_question_list}\n # render() 는 context를 인자로 받아 HTTPResponse를 반환함\n return render(request, 'polls/index.html', context)\n```\n\n- 단축함수란?\n + 템플릿 변수를 로딩한 후에 컨텍스트 변수를 적용하고, 그 결과를 HTTPResponse 객체에 담아 반환하는 작업등의 공통 기능들을 장고에서 미리 만들어 내장함수로 제공하는 함수.\n + 예를 들어, render() 함수\n\n## 5. 뷰 함수 detail() 및 폼 템플릿 작성\n\n### (1) detail.html 템플릿 작성\n\n```html\n{% raw %}\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n <meta charset=\"UTF-8\">\n <title>Title</title>\n</head>\n<body>\n <h1>{{ question.question_text }}</h1>\n {% if error_message %}<p><strong>{{ error_message }}</strong></p>{% endif %}\n <!-- url 탬플릿 태그 사용, polls:vote는 URLconf 에서 적은 url 패턴 이름 -->\n <form action=\"{% url 'polls:vote' question.id %}\" method=\"post\">\n <!--폼을 처리하는 경우, CSRF 공격을 방지하기 위한 기능-->\n {%csrf_token%}\n <!--vote() 뷰 함수에서 request.POST['choice'] 구문으로 액세스 할 수 있음-->\n <!--input 태그의 name, id 속성은 request.POST 사전에서 key, value 로 상돋됨-->\n {% for choice in question.choice_set.all %}\n <input type=\"radio\" name=\"choice\" id=\"choice{{ forloop.counter }}\" value=\"{{ choice.id }}\"/>\n <label for=\"choice{{ forloop.counter }}\">{{choice.choice_text}}</label><br/>\n {% endfor %}\n <input type=\"submit\" value = \"Vote\" />\n </form>\n</body>\n</html>\n{% endraw %}\n```\n\n- choice_set 속성 : Question:Choice 의 관계가 1:N 으로, 이런 관계일 때 XXX_set 이라는 속성을 기본적으로 제공함\n\n### (2) detail() 뷰 함수 작성\n\n```python\nfrom django.shortcuts import render, get_object_or_404\nfrom polls.models import Question\n\n# Create your views here.\n# def index(request):(생략)\n\ndef detail(request, question_id):\n question = get_object_or_404(Question, pk=question_id)\n return render(request, 'polls/detail.html', {'question':question})\n```\n- 단축함수 `get_object_or_404` : 첫번째 인자는 모델 클래스, 두번째 인자부터 조건. 조건에 맞는 객체를 조회하고, 없으면 404 에러를 반환. 'get_list_or_404()' 함수도 있음\n\n## 6. 뷰 함수 vote() 및 리다이렉션 작성\n{% raw %}\n> detail.html 로 부터 /polls/5/vote url로 POST 방식으로 전달됨 \n> detail.html : `<form action=\"{% url 'polls:vote' question.id %}\" method='POST'>` \n> urls.py : `path('polls/<int:question_id>/vote/', views.vote, name='vote' )` \n{% endraw %}\n\n\n### (1) vote() 뷰 함수 작성하고 Redirect 하기\n\n```python\nfrom django.shortcuts import render, get_object_or_404\nfrom polls.models import Question, Choice\nfrom django.http import HttpResponseRedirect\nfrom django.urls import reverse\n\n# Create your views here.\n# def index(request): (생략)\n# def detail(request, question_id):(생략)\n\ndef vote(request, question_id):\n question = get_object_or_404(Question, pk=question_id)\n try:\n selected_choice = question.choice_set.get(pk=request.POST['choice'])\n except (KeyError, Choice.DoesNotExist):\n # 설문 투표 폼을 다시 보여준다\n return render(request, 'polls/detail.html', {'question':question, 'error_message':\"You didn't select a choice.\"})\n\n else:\n selected_choice.votes +=1\n selected_choice.save()\n # POST 데이터를 정상적으로 처리하였으면,\n # 항상 HttpResponseRedirect를 반환하여 리다리엑션 처리함\n return HttpResponseRedirect(reverse('polls:results', args=(question_id,)))\n```\n\n- redirect : django.http.HttpResponseRedirect 함수 사용.\n- KeyError : request.POST['choice'] 의 choice 라는 키가 없을 때 발생하는 에러\n- Choice.DoesNotExist : 검색 조건에 맞는 Choice 객체가 없을 때 발생하는 에러\n- `reverse()` : 보통 URL 패턴의 URL 스트링으로 부터 url 검색을 시작하는데, reverse() 함수는 URL 패턴 이름으로 URL 스트링을 찾아가도록 하는 함수.\n- <font color='red'>소스에 URL 스트링을 하드코딩 하지 말고 reverse() 함수를 사용하도록 함</font>\n\n## 7. 뷰 함수 results() 와 템플릿 작성\n\n### (1) results() 뷰 함수 작성\n\n```python\ndef results(request, question_id):\n question = get_object_or_404(Question, pk=question_id)\n return render(request, 'polls/results.html', {'question':question})\n```\n\n### (2) results.html 탬플릿 작성\n\n```html\n{% raw %}\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n <meta charset=\"UTF-8\">\n <title>Title</title>\n</head>\n<body>\n <h1>{{ quesiton.question_text }}</h1>\n <ul>\n {% for choice in question.choice_set.all %}\n <li>{{choice.text}} - {{choice.votes}} vote{{choice.votes|pluralize}}</li>\n {% endfor %}\n </ul>\n <a href=\"{% url 'polls:detail' question.id %}\">Vote Again?</a>\n</body>\n</html>\n{% endraw %}\n```\n\n- `vote{{choice.votes|pluralize}}`: choice.votes 값에 따라 복수로 표현할지를 결정 하는 pluralize 탬플릿 필터, 결과적으로 'vote' 또는 'votes'로 보여짐\n\n## 8. 지금까지 작업 확인하기\n\n1. 테스트서버 실행\n`$ch3>python manage.py runserver`\n\n2. 웹 브라우저에서 'http://localhost:8000/polls' 실행\n - 현재 데이터가 하나도 없어서 빈 페이지로 나타남\n ![polls/index.html](/assets/images/polls_index.png)\n\n3. Admin 사이트(http://localhost:8000/admin)로 로그인 하여, Question, Choice 테이블에 데이터 입력\n - Questions 테이블\n\n |question_text|Date|Time|\n |What is your hobby?|today|now|\n |What do you like best?|today|now|\n |Where do you live?|today|now|\n\n - Choices ( 나머지 question_text에도 3개 정도의 choice_text를 임의로 등록해 보자.)\n\n |question_text|choice_text|vote|\n |What is your hobby?|Reading|0|\n |What is your hobby?|Soccer|0|\n |What is your hobby?|Climbing|0|\n\n4. 웹 브라우저에서 'http://localhost:8000/polls' 실행\n - Question 목록이 보여짐\n![Question list](/assets/images/polls_index_question_list.png)\n\n5. 'What is your hobby?' 를 클릭하여, 'http://localhost:8000/polls/1/' 실행\n - choice 목록이 보여짐\n![Question list](/assets/images/polls_detail.png)\n\n6. 'Reading'에 체크하고 'vote' 버튼 클릭하여 'http://localhost:8000/1/vote/' 실행 -> 'http://localhost:8000/1/results' 로 redirect 됨\n - choice의 투표 결과가 보여지는 result.html 화면이 보여짐\n ![Question list](/assets/images/polls_result.png)\n","dir":"/python/DjangoWebFramework/","name":"jangoDevelopment-View_Templete.md","path":"python/DjangoWebFramework/jangoDevelopment-View_Templete.md","url":"/python/DjangoWebFramework/jangoDevelopment-View_Templete.html"},{"sort":5,"permalink":"/python/extendExampleProject/","layout":"default","title":"실습예제 심화","content":"<h1 id=\"실습예제-심화\">실습예제 심화</h1>\n\n<blockquote>\n <p>예제 프로젝트 저장소 : <a href=\"https://github.com/82iirriiss/python_basic_project\">https://github.com/82iirriiss/python_basic_project</a></p>\n</blockquote>\n\n<blockquote>\n <p>기존의 프로젝트를 클래스 뷰나 템플릿 상속을 통해 더 세련된 코드로 변경 해 보자 <br />\n기존의 프로젝트에 새로운 어플리케이션을 추가 해 보자 <br />\nmodel 작성에 ManyToManyField 속성이 추가됨 <br />\nviews 작성시, 클래스뷰를 사용하기 <br />\n로깅 기능 추가하기</p>\n</blockquote>\n\n<p>source: <code class=\"language-plaintext highlighter-rouge\">python/extendExampleProject/README.md</code></p>\n","dir":"/python/extendExampleProject/","name":"README.md","path":"python/extendExampleProject/README.md","url":"/python/extendExampleProject/"},{"sort":5,"layout":"default","title":"뷰 개발 시 알아두기","content":"<h1 id=\"뷰-개발-시-알아두기\">뷰 개발 시 알아두기</h1>\n\n<h2 id=\"제네릭-뷰--djangoviewsgeneric\">제네릭 뷰 : django.views.generic</h2>\n\n<h3 id=\"1-listview\">1. ListView</h3>\n<ol>\n <li>예제\n <div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">class</span> <span class=\"nc\">BookmarkListView</span><span class=\"p\">(</span><span class=\"n\">ListView</span><span class=\"p\">):</span>\n <span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">Bookmark</span>\n</code></pre>  </div> </div>\n </li>\n <li>명시적으로 지정하지 않아도 템플릿으로 전달하는 컨텍스트 변수와 템플릿 이름을 알아서 지정함\n <ul>\n <li>개발자가 원하면 지정할 수도 있음</li>\n <li>컨텍스트 변수 : <font color=\"red\">object_list</font></li>\n <li>템플릿 파일명 : 모델명(소문자)_list.html (ex: bookmark_list.html)</li>\n </ul>\n </li>\n</ol>\n\n<h3 id=\"2-detailview\">2. DetailView</h3>\n<ol>\n <li>예제\n <div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">class</span> <span class=\"nc\">BookmarkDetailView</span><span class=\"p\">(</span><span class=\"n\">DetailView</span><span class=\"p\">):</span>\n <span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">Bookmark</span>\n</code></pre>  </div> </div>\n </li>\n <li>명시적으로 지정하지 않아도 컨텍스트 변수와 템플릿 파일명을 알아서 지정함\n <ul>\n <li>개발자가 원하면 지정할 수도 있음</li>\n <li>컨텍스트 변수 : object</li>\n <li>템플릿 파일명 : 모델명(소문자)_detail.html</li>\n </ul>\n </li>\n</ol>\n\n<h3 id=\"3-날짜-제네릭-뷰--djangoviewsgenericdates-\">3. 날짜 제네릭 뷰 ( django.views.generic.dates )</h3>\n<h4 id=\"1-archiveindexview\">[1] ArchiveIndexView</h4>\n\n<ol>\n <li>예시\n <div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">class</span> <span class=\"nc\">PostAV</span><span class=\"p\">(</span><span class=\"n\">ArchiveIndexView</span><span class=\"p\">):</span>\n<span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">Post</span>\n<span class=\"n\">date_field</span> <span class=\"o\">=</span> <span class=\"s\">'modify_dt'</span>\n</code></pre>  </div> </div>\n </li>\n <li>모델(=테이블)로 부터 객체 리스트를 가져와 날짜필드로 정렬하여 출력함</li>\n <li>date_field=’modify_dt’ : 정렬 시 기준이 되는 컬럼을 ‘modify_dt’ 로 정함</li>\n <li>따로 지정하지 않는다면, 템플릿 파일명은 ‘모델클래스_archive.html’ 이다. ( post_archive.html )</li>\n</ol>\n\n<h4 id=\"2-yeararchiveview\">[2] YearArchiveView</h4>\n\n<ol>\n <li>예시\n <div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">class</span> <span class=\"nc\">PostYAV</span><span class=\"p\">(</span><span class=\"n\">YearArchiveView</span><span class=\"p\">):</span>\n<span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">Post</span>\n<span class=\"n\">date_field</span> <span class=\"o\">=</span> <span class=\"s\">'modify_dt'</span>\n<span class=\"n\">make_object_list</span> <span class=\"o\">=</span> <span class=\"bp\">True</span>\n</code></pre>  </div> </div>\n </li>\n <li>날짜 필드의 연도를 기준으로 객체 리스트를 가져와 그 객체들이 속한 <strong>월을 리스트</strong>로 출력</li>\n <li>make_object_list = True : 연도에 해당하는 객체의 리스트를 만들어 템플릿에 넘겨줌. 컨텍스트 변수로 object_list 를 사용함</li>\n <li>따로 지정하지 않으면, 템플릿 파일명은 ‘모델명_archive_year.html’ 이다. ( post_archive_year.html )</li>\n</ol>\n\n<h4 id=\"3-montharchiveview\">[3] MonthArchiveView</h4>\n<ol>\n <li>예시\n <div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">class</span> <span class=\"nc\">PostMAV</span><span class=\"p\">(</span><span class=\"n\">MonthArchiveView</span><span class=\"p\">):</span>\n<span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">Post</span>\n<span class=\"n\">date_field</span> <span class=\"o\">=</span> <span class=\"s\">'modify_dt'</span>\n</code></pre>  </div> </div>\n </li>\n <li>날짜 필드의 연도/월을 기준으로 객체 리스트를 가져와 해당 연도/월에 속한 객체의 리스트를 출력</li>\n <li>따로 지정하지 않으면, 템플릿 파일명은 ‘모델명_archive_month.html’ 이다. ( post_archive_month.html )</li>\n</ol>\n\n<h4 id=\"4-dayarchiveview\">[4] DayArchiveView</h4>\n<ol>\n <li>예시\n <div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">class</span> <span class=\"nc\">PostDAV</span><span class=\"p\">(</span><span class=\"n\">DayArchiveView</span><span class=\"p\">):</span>\n<span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">Post</span>\n<span class=\"n\">date_field</span> <span class=\"o\">=</span> <span class=\"s\">'modify_dt'</span>\n</code></pre>  </div> </div>\n </li>\n <li>날짜 필드의 연/월/일을 기준으로 객체 리스트를 가져와 출력</li>\n <li>따로 지정하지 않으면, 템플릿 파일명은 ‘모델명_archive_day.html’ 이다. ( post_archive_day.html )</li>\n</ol>\n\n<h4 id=\"5-todayarchiveview\">[5] TodayArchiveView</h4>\n<ol>\n <li>예시\n <div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">class</span> <span class=\"nc\">PostTAV</span><span class=\"p\">(</span><span class=\"n\">TodayArchiveView</span><span class=\"p\">):</span>\n<span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">Post</span>\n<span class=\"n\">date_field</span> <span class=\"o\">=</span> <span class=\"s\">'modify_dt'</span>\n</code></pre>  </div> </div>\n </li>\n <li>날짜 필드가 오늘인 객체 리스트를 가져와 그 리스트를 출력</li>\n <li>따로 지정하지 않으면, 템플릿 파일명은 ‘모델명_archive_day.html’ 이다. <br />\n( post_archive_day.html, DayArchiveView를 상속한 PostDAV 뷰클래스와 같은 템플릿을 사용한다)</li>\n</ol>\n","dir":"/python/PracticeProgram/","name":"DevView.md","path":"python/PracticeProgram/DevView.md","url":"/python/PracticeProgram/DevView.html"},{"sort":5,"layout":"default","title":"클래스 형 뷰","content":"<h1 id=\"클래스-형-뷰\">클래스 형 뷰</h1>\n<blockquote>\n <p>이전까지는 뷰를 함수로 작성하였으나, 클래스형 뷰를 사용하면 장점이 많음</p>\n</blockquote>\n\n<h2 id=\"1-클래스형-뷰의-첫단계---urlconf-설정\">1. 클래스형 뷰의 첫단계 - URLconf 설정</h2>\n<ul>\n <li>urls.py</li>\n <li>URLconf에 함수가 아닌 클래스 뷰를 사용 할 것이라는 표시를 해 주어야 함</li>\n <li>MyView 라는 클래스 뷰를 사용한다 가정하면,\n <div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>  <span class=\"kn\">from</span> <span class=\"nn\">django.urls</span> <span class=\"kn\">import</span> <span class=\"n\">path</span>\n  <span class=\"kn\">from</span> <span class=\"nn\">polls.views</span> <span class=\"kn\">import</span> <span class=\"n\">MyView</span>\n\n  <span class=\"n\">urlpatterns</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n      <span class=\"n\">path</span><span class=\"p\">(</span><span class=\"s\">'about/'</span><span class=\"p\">,</span> <span class=\"n\">MyView</span><span class=\"p\">.</span><span class=\"n\">as_view</span><span class=\"p\">())</span>\n  <span class=\"p\">]</span> \n</code></pre>  </div> </div>\n <ul>\n <li><strong>as_view()</strong> : URL해석기는 기본적으로 데이터를 함수로 전달하므로, 클래스로 진입하기 위한 as_view() 내장 메소드가 필요. ‘진입 메소드’ 라고 함</li>\n <li><strong>dispatch()</strong> : 내장 메소드. as_view()에서 인스턴스를 생성하고, 인스턴스 내에서 GET/POST 메소드 요청을 중계하는 역할. 메소드가 없을 땐, <strong>HttpResponseNotAllowed</strong> 익센션 발생시킴</li>\n </ul>\n </li>\n</ul>\n\n<h2 id=\"2-클래스형-뷰-작성--myview-클래스\">2. 클래스형 뷰 작성 : MyView 클래스</h2>\n<ul>\n <li>\n <p>views.py</p>\n\n <div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>  <span class=\"kn\">from</span> <span class=\"nn\">django.http</span> <span class=\"kn\">import</span> <span class=\"n\">HttpResponse</span>\n  <span class=\"kn\">from</span> <span class=\"nn\">django.views.generic</span> <span class=\"kn\">import</span> <span class=\"n\">View</span>\n\n  <span class=\"k\">class</span> <span class=\"nc\">MyView</span><span class=\"p\">(</span><span class=\"n\">View</span><span class=\"p\">):</span>\n      <span class=\"k\">def</span> <span class=\"nf\">get</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"p\">):</span>\n          <span class=\"c1\"># 뷰 로직 작성\n</span>          <span class=\"k\">return</span> <span class=\"n\">HttpResponse</span><span class=\"p\">(</span><span class=\"s\">'result'</span><span class=\"p\">)</span>\n</code></pre>  </div> </div>\n </li>\n</ul>\n\n<h2 id=\"3-클래스형-뷰의-메소드-구분\">3. 클래스형 뷰의 메소드 구분</h2>\n<ul>\n <li>GET, POST 등 HTTP 메소드에 따른 처리 기능이 지정된 메소드명으로 구분 할 수 있음\n <ul>\n <li>def get():</li>\n <li>def post():</li>\n <li>def head():</li>\n </ul>\n </li>\n <li>클래스형 뷰로 HEAD 메소드 코딩 예제\n <div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>  <span class=\"c1\"># views.py\n</span>  <span class=\"kn\">from</span> <span class=\"nn\">django.http</span> <span class=\"kn\">import</span> <span class=\"n\">HttpResponse</span>\n  <span class=\"kn\">from</span> <span class=\"nn\">django.views.generic</span> <span class=\"kn\">import</span> <span class=\"n\">ListView</span>\n  <span class=\"kn\">from</span> <span class=\"nn\">books.models</span> <span class=\"kn\">import</span> <span class=\"n\">Book</span>\n\n  <span class=\"k\">class</span> <span class=\"nc\">BookListView</span><span class=\"p\">(</span><span class=\"n\">ListView</span><span class=\"p\">):</span>\n      <span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">Book</span>\n\n      <span class=\"k\">def</span> <span class=\"nf\">head</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n          <span class=\"n\">last_book</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">get_queryset</span><span class=\"p\">().</span><span class=\"n\">latest</span><span class=\"p\">(</span><span class=\"s\">'publication_date'</span><span class=\"p\">)</span>\n          <span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">HttpResponse</span><span class=\"p\">(</span><span class=\"s\">''</span><span class=\"p\">)</span>\n          <span class=\"n\">response</span><span class=\"p\">[</span><span class=\"s\">'Last-Modified'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">last_book</span><span class=\"p\">.</span><span class=\"n\">publication_date</span><span class=\"p\">.</span><span class=\"n\">strftime</span><span class=\"p\">(</span><span class=\"s\">'%a, %d %b %Y %H:%M:%S GMT'</span><span class=\"p\">)</span>\n          <span class=\"k\">return</span> <span class=\"n\">response</span>\n</code></pre>  </div> </div>\n </li>\n</ul>\n\n<h2 id=\"4-클래스형-뷰의-상속기능\">4. 클래스형 뷰의 상속기능</h2>\n<ul>\n <li>먼저 <strong>제네릭뷰</strong>에 대해 알아야 함. 클래스 뷰의 대부분이 제네릭 뷰를 상속받고 있음</li>\n <li>\n <p><strong>제네릭뷰</strong> : 모델, 뷰, 템플릿 개발과정의 공통된 단순반복 작업들을 추상화하고, 장고에서 미리 만들어 제공해주는 클래스형 뷰를 의미</p>\n </li>\n <li>제네릭뷰의 예제\n <ul>\n <li>some_app/urls.py\n <div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>  <span class=\"kn\">from</span> <span class=\"nn\">django.urls</span> <span class=\"kn\">import</span> <span class=\"n\">path</span>\n  <span class=\"kn\">from</span> <span class=\"nn\">some_app.views</span> <span class=\"kn\">import</span> <span class=\"n\">AboutView</span>\n\n  <span class=\"n\">urlpatterns</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n      <span class=\"n\">path</span><span class=\"p\">(</span><span class=\"s\">'about/'</span><span class=\"p\">,</span> <span class=\"n\">AboutView</span><span class=\"p\">.</span><span class=\"n\">as_view</span><span class=\"p\">())</span>\n  <span class=\"p\">]</span>\n</code></pre>  </div> </div>\n </li>\n <li>some_app/views.py\n <div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>  <span class=\"kn\">from</span> <span class=\"nn\">django.views.generic</span> <span class=\"kn\">import</span> <span class=\"n\">TemplateView</span>\n\n  <span class=\"k\">class</span> <span class=\"nc\">AboutView</span><span class=\"p\">(</span><span class=\"n\">TemplateView</span><span class=\"p\">):</span>\n      <span class=\"n\">template_name</span> <span class=\"o\">=</span> <span class=\"s\">\"about.html\"</span>\n</code></pre>  </div> </div>\n </li>\n </ul>\n </li>\n <li>또는,\n <ul>\n <li>간단히 호출만 하는 뷰라면, urls.py에서 한번에 처리가 가능\n <div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>  <span class=\"kn\">from</span> <span class=\"nn\">django.urls</span> <span class=\"kn\">import</span> <span class=\"n\">path</span>\n  <span class=\"kn\">from</span> <span class=\"nn\">django.views.generic</span> <span class=\"kn\">import</span> <span class=\"n\">TemplateView</span>\n\n  <span class=\"n\">urlpatterns</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n      <span class=\"n\">path</span><span class=\"p\">(</span><span class=\"s\">'about/'</span><span class=\"p\">,</span> <span class=\"n\">TemplateView</span><span class=\"p\">.</span><span class=\"n\">as_view</span><span class=\"p\">(</span><span class=\"n\">template_name</span><span class=\"o\">=</span><span class=\"s\">'about.html'</span><span class=\"p\">))</span>\n  <span class=\"p\">]</span>\n</code></pre>  </div> </div>\n <ul>\n <li>template_name 은 TemplateView 클래스에 정의된 클래스 속성인데, <strong>오버라이드</strong> 하고 있다.</li>\n </ul>\n </li>\n </ul>\n </li>\n</ul>\n\n<h2 id=\"5-클래스형-제네릭-뷰의-종류\">5. 클래스형 제네릭 뷰의 종류</h2>\n<blockquote>\n <p>참고 : <a href=\"https://docs.djangoproject.com/en/2.1/ref/class-based-views\">https://docs.djangoproject.com/en/2.1/ref/class-based-views</a></p>\n <ul>\n <li>Base View : 뷰 클래스 생성하고 다른 제네릭 뷰의 부모 클래스를 제공하는 기본 클래스 뷰</li>\n <li>Generic Display View : 객체의 리스트를 보여주고, 특정 개체의 상세정보를 보여줌</li>\n <li>Generic Edit View : 폼을 통해 객체를 생성, 수정, 삭제 하는 기능 제공</li>\n <li>Generic Date View : 날짜 기반 객체를 연/월/일 페이지로 구분하여 보여줌</li>\n </ul>\n</blockquote>\n\n<table>\n <thead>\n <tr>\n <th>제네릭 뷰 분류</th>\n <th>제네릭 뷰 이름</th>\n <th>뷰의 기능 또는 역할</th>\n </tr>\n </thead>\n <tbody>\n <tr>\n <td>Base View</td>\n <td>View<br />TemplateView<br />RedirectView</td>\n <td>최상위 뷰<br />주어진 템플릿을 렌더링<br />주어진 URL을 리다이렉트 시킴</td>\n </tr>\n <tr>\n <td>Generic Display View</td>\n <td>ListView<br />DetailView</td>\n <td>조건에 맞는 여러개의 객체를 보여줌<br />객체 하나에 대한 상세한 정보 제공</td>\n </tr>\n <tr>\n <td>Generic Edit View</td>\n <td>FormView<br />CreateView<br />UpdateView<br />DeleteView</td>\n <td>주어진 폼을 보여줌<br />객체를 생성하는 폼을 보여줌<br />기존객체를 수정하는 폼을 보여줌<br />기존객체를 삭제하는 폼을 보여줌</td>\n </tr>\n <tr>\n <td>Generic Date View</td>\n <td>ArchiveIndexView<br />YearArchiveView<br />MonthArchiveView<br />WeekArchiveView<br />DayArchiveView<br />TodayArchiveView<br />DateDetailView</td>\n <td>조건에 맞는 여러개의 객체 및 그 객체들에 대한 날짜정보를 보여줌<br />연도가 주어지면 그 연도에 해당하는 객체들을 보여줌<br />연,월이 주어지면 그에 해당하는 객체들이 보여짐<br />연도와 주차가 주어지면 그에 해당하는 객체들을 보여줌<br />연,월,일이 주어지면 그 날짜에 해당하는 객체들을 보여줌<br />오늘 날짜에 해당하는 객체들을 보여줌<br />연,월,일,기본키가 주어지면 그에 해당하는 특정 객체 하나에 대한 상세한 정보를 보여줌</td>\n </tr>\n </tbody>\n</table>\n\n<h2 id=\"6-클래스형-뷰에서-폼-처리\">6. 클래스형 뷰에서 폼 처리</h2>\n<ul>\n <li>Get 처리, 유효한 Post 처리, 유효하지 않은 Post 처리</li>\n</ul>\n\n<h3 id=\"1-클래스형-뷰로-폼을-처리하는-예시---view\">(1) 클래스형 뷰로 폼을 처리하는 예시 - View</h3>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kn\">from</span> <span class=\"nn\">django.http</span> <span class=\"kn\">import</span> <span class=\"n\">HttpResponseRedirect</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.shortcuts</span> <span class=\"kn\">import</span> <span class=\"n\">render</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.views.generic</span> <span class=\"kn\">import</span> <span class=\"n\">View</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">.forms</span> <span class=\"kn\">import</span> <span class=\"n\">MyForm</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">MyFormView</span><span class=\"p\">(</span><span class=\"n\">View</span><span class=\"p\">):</span>\n    <span class=\"n\">form_class</span> <span class=\"o\">=</span> <span class=\"n\">MyForm</span>\n    <span class=\"n\">initial</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s\">'key'</span><span class=\"p\">:</span><span class=\"s\">'value'</span><span class=\"p\">}</span>\n    <span class=\"n\">template_name</span> <span class=\"o\">=</span> <span class=\"s\">'form_template.html'</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">get</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n        \n        <span class=\"n\">form</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">form_class</span><span class=\"p\">(</span><span class=\"n\">initial</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">initial</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">render</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">template_name</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s\">'form'</span><span class=\"p\">:</span><span class=\"n\">form</span><span class=\"p\">})</span> <span class=\"c1\"># get 방식 요청은, 비어있는 form 제공\n</span>\n    <span class=\"k\">def</span> <span class=\"nf\">post</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n        <span class=\"n\">form</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">form_class</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">.</span><span class=\"n\">POST</span><span class=\"p\">)</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">form</span><span class=\"p\">.</span><span class=\"n\">is_valid</span><span class=\"p\">():</span>\n            <span class=\"c1\"># cleaned_data로 관련로직 처리\n</span>            <span class=\"k\">return</span> <span class=\"n\">HttpResponseRedirect</span><span class=\"p\">(</span><span class=\"s\">'/success/'</span><span class=\"p\">)</span> <span class=\"c1\"># 유효한 form 처리, 성공적으로 리다이렉트\n</span>\n        <span class=\"k\">return</span> <span class=\"n\">render</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">template_name</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s\">'form'</span><span class=\"p\">:</span><span class=\"n\">form</span><span class=\"p\">})</span> <span class=\"c1\"># 유효하지 않은 form 처리, 이전에 입력했던 값들을 그대로 template 에 보여줌\n</span>\n</code></pre>  </div></div>\n\n<h3 id=\"2-formview-제네릭뷰로-폼을-처리하는-예시---formview\">(2) FormView 제네릭뷰로 폼을 처리하는 예시 - FormView</h3>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kn\">from</span> <span class=\"nn\">.forms</span> <span class=\"kn\">import</span> <span class=\"n\">MyForm</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.views.generic.edit</span> <span class=\"kn\">import</span> <span class=\"n\">FormView</span>\n\n<span class=\"c1\"># FromView에 이미 정의되어 있으므로, get(), post()가 불필요함\n</span><span class=\"k\">class</span> <span class=\"nc\">MyFormView</span><span class=\"p\">(</span><span class=\"n\">FormView</span><span class=\"p\">):</span>\n    <span class=\"n\">form_class</span> <span class=\"o\">=</span> <span class=\"n\">MyForm</span>\n    <span class=\"n\">template_name</span> <span class=\"o\">=</span> <span class=\"s\">'form_template.html'</span>\n    <span class=\"n\">success_url</span> <span class=\"o\">=</span> <span class=\"s\">'/thanks/'</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">form_valid</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">form</span><span class=\"p\">):</span>\n        <span class=\"c1\">#cleaned_data로 관련 로직 처리\n</span>        <span class=\"k\">return</span> <span class=\"nb\">super</span><span class=\"p\">(</span><span class=\"n\">MyFormView</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"p\">).</span><span class=\"n\">form_valid</span><span class=\"p\">(</span><span class=\"n\">form</span><span class=\"p\">)</span>\n</code></pre>  </div></div>\n\n<ul>\n <li>FromView에 이미 정의되어 있으므로, get(), post()가 불필요함</li>\n <li>form_class : 사용자에게 보여줄 form, forms.py에 정의한 폼 클래스</li>\n <li>template_name : 렌더링할 템플릿 파일 이름</li>\n <li>success_url : MyFormView 가 정상적으로 처리되었을 때 리다이렉트 할 주소</li>\n <li>form_valid() : 유효한 폼 데이터로 처리할 로직. super()를 사용하면, success_url로 리다이렉트까지 처리됨</li>\n</ul>\n","dir":"/python/DjangoCoreFunction/","name":"DjangoViewClass.md","path":"python/DjangoCoreFunction/DjangoViewClass.md","url":"/python/DjangoCoreFunction/DjangoViewClass.html"},{"sort":6,"layout":"default","title":"로그 남기기","content":"<h1 id=\"로그-남기기\">로그 남기기</h1>\n<ul>\n <li>파이썬 로깅 모듈 4가지\n <ul>\n <li>로거</li>\n <li>핸들러</li>\n <li>필터</li>\n <li>포맷터</li>\n </ul>\n </li>\n <li>\n <font color=\"red\">로깅 관련 설정 파일</font>\n <ul>\n <li>장고 디폴트 로그 설정 : [장고 설치 홈]/site-package/utils/log.py</li>\n <li>사용자 로그 설정 : settings.py의 LOGGING_CONFIG, LOGGING 항목</li>\n </ul>\n </li>\n <li>로깅 주요 컴포넌트 관계</li>\n</ul>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>\n    [Logger]------------&gt;[Handler]&lt;--------------[Fomatter]\n             /   |  \\\n            /    |___\\__&gt;[Handler]&lt;--------------[Fomatter]\n           /          \\\n          /            \\\n   ---------------------------------\n   | [Filter]--&gt;[Filter]--&gt;[Filter] |    \n   ---------------------------------       \n\n</code></pre>  </div></div>\n<ul>\n <li>한개의 Logger에 여러 개의 Handler 지정 가능</li>\n <li>필터 체인 가능, 필터는 Logger 나 Handler 양쪽에 적용 가능</li>\n</ul>\n\n<h2 id=\"1-로거\">1. 로거</h2>\n<ul>\n <li>로거 : 로그 메시지를 처리하기 위해 메시지를 담아두는 저장소</li>\n <li>\n <p>로거 레벨</p>\n\n <table>\n <thead>\n <tr>\n <th style=\"text-align: left\">로그 레벨</th>\n <th style=\"text-align: left\">정수값</th>\n <th style=\"text-align: left\">설명</th>\n </tr>\n </thead>\n <tbody>\n <tr>\n <td style=\"text-align: left\">NOTSET</td>\n <td style=\"text-align: left\">0</td>\n <td style=\"text-align: left\">로그레벨 최하위 수준<br />별도의 로거 또는 핸들러가 없을 때 디폴트 로그 레벨</td>\n </tr>\n <tr>\n <td style=\"text-align: left\">DEBUG</td>\n <td style=\"text-align: left\">10</td>\n <td style=\"text-align: left\">디버그 용도</td>\n </tr>\n <tr>\n <td style=\"text-align: left\">INFO</td>\n <td style=\"text-align: left\">20</td>\n <td style=\"text-align: left\">일반적인 정보</td>\n </tr>\n <tr>\n <td style=\"text-align: left\">WARNING</td>\n <td style=\"text-align: left\">30</td>\n <td style=\"text-align: left\">덜 중요한 문제점 발생시 문제에 대한 정보</td>\n </tr>\n <tr>\n <td style=\"text-align: left\">ERROR</td>\n <td style=\"text-align: left\">40</td>\n <td style=\"text-align: left\">주요 문제점 발생시 문제에 대한 정보</td>\n </tr>\n <tr>\n <td style=\"text-align: left\">CRITICAL</td>\n <td style=\"text-align: left\">50</td>\n <td style=\"text-align: left\">치명적인 문제점 발생시 문제에 대한 정보</td>\n </tr>\n </tbody>\n </table>\n </li>\n <li>로그 레코드 : 로거에 저장되는 메시지, 레코드도 로그레벨을 가짐</li>\n <li>‘로그 레코드의 로그 레벨 &gt;= 로거의 로그 레벨’ 일 때, 메시지 처리가 진행되며 그 반대는 무시됨</li>\n</ul>\n\n<h2 id=\"2-핸들러\">2. 핸들러</h2>\n<ul>\n <li>핸들러\n <ul>\n <li>메시지에 무슨 작업을 할지 결정하는 엔진</li>\n <li>메시지를 화면이나 콘솔, 파일, 네트워크 소켓등 어디에 기록할 것인지 같은 로그 동작을 정의함</li>\n <li>핸들러도 로그 레벨을 가지고 있음</li>\n <li>로그 레코드의 로그레벨 &gt;= 로그 핸들러의 로그레벨 일 때, 메시지 처리가 진행되며 그 반대는 무시됨</li>\n <li>각 핸들러는 서로 다른 로그레벨을 가질 수 있음\n <ul>\n <li>(예시) : ERROR 또는 CRITICAL 메시지는 표준 출력하는 핸들러, 모든 메시지를 파일에 기록하는 또 다른 핸들러</li>\n </ul>\n </li>\n </ul>\n </li>\n</ul>\n\n<h2 id=\"3-필터\">3. 필터</h2>\n<ul>\n <li>로그레코드가 로거에서 핸들러로 넘겨 질때 필터를 이용해 레코드에 추가적인 제어를 할 수 있음\n <ul>\n <li>예를 들어,</li>\n <li>필터를 추가하여, 특정 소스로 부터 오는 메시지만 핸들러로 넘기거나,\n _ 어떤 조건을 추가하여 조건에 맞으면, ERROR 로그를 WARNNING 로그로 낮추는 등</li>\n </ul>\n </li>\n</ul>\n\n<h2 id=\"4-포맷터\">4. 포맷터</h2>\n<ul>\n <li>출력하는 텍스트의 형식</li>\n</ul>\n\n<h2 id=\"5-로그의-설정\">5. 로그의 설정</h2>\n\n<h3 id=\"1-별도의-설정을-하지-않았을-때-django의-기본설정을-따름\">(1) 별도의 설정을 하지 않았을 때, django의 기본설정을 따름</h3>\n<ul>\n <li>[django_home]/site-packages/utils/log.py</li>\n</ul>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">DEFAULT_LOGGING</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s\">'version'</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"c1\"># dicConfig 버전1 형식\n</span>    <span class=\"s\">'disable_existing_loggers'</span><span class=\"p\">:</span> <span class=\"bp\">False</span><span class=\"p\">,</span> <span class=\"c1\"># 기존의 로거들을 비활성화 할것인가?, jango는 False를 권장\n</span>    <span class=\"s\">'filters'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"s\">'require_debug_false'</span><span class=\"p\">:</span> <span class=\"p\">{</span> <span class=\"c1\"># 디버그가 False인 경우만 핸들러를 동작함\n</span>            <span class=\"s\">'()'</span><span class=\"p\">:</span> <span class=\"s\">'django.utils.log.RequireDebugFalse'</span><span class=\"p\">,</span> <span class=\"c1\"># ()는, 필터 객체 생성 클래스로 장고에서 생성한 클래스\n</span>        <span class=\"p\">},</span>\n        <span class=\"s\">'require_debug_true'</span><span class=\"p\">:</span> <span class=\"p\">{</span> <span class=\"c1\"># 디버그가 True인 경우만 핸들러를 동작함\n</span>            <span class=\"s\">'()'</span><span class=\"p\">:</span> <span class=\"s\">'django.utils.log.RequireDebugTrue'</span><span class=\"p\">,</span> <span class=\"c1\"># ()는 필터 객체 생성 클래스\n</span>        <span class=\"p\">},</span>\n    <span class=\"p\">},</span>\n    <span class=\"s\">'formatters'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"s\">'django.server'</span><span class=\"p\">:</span> <span class=\"p\">{</span> <span class=\"c1\"># 로그 생성시간과 메시지만을 출력\n</span>            <span class=\"s\">'()'</span><span class=\"p\">:</span> <span class=\"s\">'django.utils.log.ServerFormatter'</span><span class=\"p\">,</span>\n            <span class=\"s\">'format'</span><span class=\"p\">:</span> <span class=\"s\">'[{server_time}] {message}'</span><span class=\"p\">,</span>\n            <span class=\"s\">'style'</span><span class=\"p\">:</span> <span class=\"s\">'{'</span><span class=\"p\">,</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">},</span>\n    <span class=\"s\">'handlers'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"s\">'console'</span><span class=\"p\">:</span> <span class=\"p\">{</span> <span class=\"c1\"># INFO 이상의 메시지를 표준에러로 출력해주는 StreamHandler 클래스를 사용함.\n</span>            <span class=\"s\">'level'</span><span class=\"p\">:</span> <span class=\"s\">'INFO'</span><span class=\"p\">,</span>\n            <span class=\"s\">'filters'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">'require_debug_true'</span><span class=\"p\">],</span>\n            <span class=\"s\">'class'</span><span class=\"p\">:</span> <span class=\"s\">'logging.StreamHandler'</span><span class=\"p\">,</span>\n        <span class=\"p\">},</span>\n        <span class=\"s\">'django.server'</span><span class=\"p\">:</span> <span class=\"p\">{</span> \n            <span class=\"s\">'level'</span><span class=\"p\">:</span> <span class=\"s\">'INFO'</span><span class=\"p\">,</span>\n            <span class=\"s\">'class'</span><span class=\"p\">:</span> <span class=\"s\">'logging.StreamHandler'</span><span class=\"p\">,</span>\n            <span class=\"s\">'formatter'</span><span class=\"p\">:</span> <span class=\"s\">'django.server'</span><span class=\"p\">,</span>\n        <span class=\"p\">},</span>\n        <span class=\"s\">'mail_admins'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"c1\"># ERROR 그 이상의 메시지를 관리자 메일로 보내주는 AdminEmailHandler 클래스를 생성\n</span>            <span class=\"s\">'level'</span><span class=\"p\">:</span> <span class=\"s\">'ERROR'</span><span class=\"p\">,</span>\n            <span class=\"s\">'filters'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">'require_debug_false'</span><span class=\"p\">],</span>\n            <span class=\"s\">'class'</span><span class=\"p\">:</span> <span class=\"s\">'django.utils.log.AdminEmailHandler'</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">},</span>\n    <span class=\"s\">'loggers'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"s\">'django'</span><span class=\"p\">:</span> <span class=\"p\">{</span> <span class=\"c1\"># django.* 계층, 즉  최상위 로거\n</span>            <span class=\"s\">'handlers'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">'console'</span><span class=\"p\">,</span> <span class=\"s\">'mail_admins'</span><span class=\"p\">],</span>\n            <span class=\"s\">'level'</span><span class=\"p\">:</span> <span class=\"s\">'INFO'</span><span class=\"p\">,</span>\n        <span class=\"p\">},</span>\n        <span class=\"s\">'django.server'</span><span class=\"p\">:</span> <span class=\"p\">{</span> <span class=\"c1\"># 상위로거로 메시지를 전파하지 않음. 개발용 웹서버인 runserver에서 사용하는 로거. 5XX는 Error로, 4XX는 WARNNING 으로 메시지 출력\n</span>            <span class=\"s\">'handlers'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">'django.server'</span><span class=\"p\">],</span>\n            <span class=\"s\">'level'</span><span class=\"p\">:</span> <span class=\"s\">'INFO'</span><span class=\"p\">,</span>\n            <span class=\"s\">'propagate'</span><span class=\"p\">:</span> <span class=\"bp\">False</span><span class=\"p\">,</span>\n        <span class=\"p\">},</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre>  </div></div>\n\n<h3 id=\"2-사용자-정의-로거\">(2) 사용자 정의 로거</h3>\n<ul>\n <li>mysite/settings.py</li>\n <li>LOGGING 항목에 새로운 로거를 추가하거나, django 디폴트 로거들을 오버라이딩하는 것도 가능</li>\n</ul>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">LOGGING_CONFIG</span> <span class=\"o\">=</span> <span class=\"s\">'logging.config.dictConfig'</span>    <span class=\"c1\"># 설정하지 않아도 디폴트가 dictConfig이므로 생략 가능, 로깅 설정에 사용하는 함수를 지정\n</span><span class=\"n\">LOGGING</span> <span class=\"o\">=</span> <span class=\"p\">{</span> <span class=\"c1\"># 개발자가 로깅을 설정할때 LOGGING 항목을 사용\n</span>    <span class=\"s\">'version'</span><span class=\"p\">:</span><span class=\"mi\">1</span><span class=\"p\">,</span>\n    <span class=\"s\">'disable_existing_loggers'</span><span class=\"p\">:</span><span class=\"bp\">False</span><span class=\"p\">,</span>\n    <span class=\"s\">'formatters'</span><span class=\"p\">:{</span>\n        <span class=\"s\">'verbose'</span><span class=\"p\">:{</span> <span class=\"c1\"># verbose 포맷터 정의\n</span>            <span class=\"s\">'format'</span><span class=\"p\">:</span><span class=\"s\">\"[%(asctime)s] %(levelname)s %[%(name)s:%(lineno)s] %(message)s\"</span><span class=\"p\">,</span> <span class=\"c1\"># [로그메시지 기록시간], 로그레벨 이름, [로거이름:라인번호],로그메시지 순으로 출력 , \n</span>            <span class=\"s\">'datefmt'</span><span class=\"p\">:</span><span class=\"s\">\"%d/%b/%Y %H:%M:%S\"</span> <span class=\"c1\"># 시간의 포맷은 날짜/월축약형/연도 시(24시기준)/분/초 형식으로 출력\n</span>        <span class=\"p\">},</span>\n    <span class=\"p\">},</span>\n    <span class=\"s\">'handlers'</span><span class=\"p\">:{</span>\n        <span class=\"s\">'file'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n            <span class=\"s\">'level'</span><span class=\"p\">:</span><span class=\"s\">'DEBUG'</span><span class=\"p\">,</span>\n            <span class=\"s\">'class'</span><span class=\"p\">:</span><span class=\"s\">'logging.FileHandler'</span><span class=\"p\">,</span>\n            <span class=\"s\">'filename'</span><span class=\"p\">:</span><span class=\"n\">os</span><span class=\"p\">.</span><span class=\"n\">path</span><span class=\"p\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">BASE_DIR</span><span class=\"p\">,</span><span class=\"s\">'logs'</span><span class=\"p\">,</span><span class=\"s\">'mysite.log'</span><span class=\"p\">),</span> <span class=\"c1\"># root디렉토리/logs/mysite.log 파일로 출력\n</span>            <span class=\"s\">'formatter'</span><span class=\"p\">:</span><span class=\"s\">'verbose'</span>\n        <span class=\"p\">},</span>\n        <span class=\"s\">'loggers'</span><span class=\"p\">:{</span>\n            <span class=\"s\">'django'</span><span class=\"p\">:{</span> <span class=\"c1\"># 디폴트로 설정되어 있는 로거인데, 오버라이딩 하고 있음\n</span>                <span class=\"s\">'handlers'</span><span class=\"p\">:[</span><span class=\"s\">'file'</span><span class=\"p\">],</span>\n                <span class=\"s\">'level'</span><span class=\"p\">:</span> <span class=\"s\">'DEBUG'</span><span class=\"p\">,</span>\n            <span class=\"p\">},</span>\n            <span class=\"s\">'mysite'</span><span class=\"p\">:{</span> \n                <span class=\"s\">'handlers'</span><span class=\"p\">:[</span><span class=\"s\">'file'</span><span class=\"p\">],</span>\n                <span class=\"s\">'level'</span><span class=\"p\">:</span><span class=\"s\">'DEBUG'</span><span class=\"p\">,</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre>  </div></div>\n\n<h3 id=\"3-django-디폴트-로깅설정-무시하는-설정\">3. django 디폴트 로깅설정 무시하는 설정</h3>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\"># settings.py\n</span>\n<span class=\"n\">LOGGING_CONFIG</span> <span class=\"o\">=</span> <span class=\"bp\">None</span>\n<span class=\"n\">LOGGING</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"c1\"># 내가 원하는 로깅 컴포넌트를 설정함\n</span><span class=\"p\">}</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">logging.config</span>\n<span class=\"n\">logging</span><span class=\"p\">.</span><span class=\"n\">config</span><span class=\"p\">.</span><span class=\"n\">dictConfig</span><span class=\"p\">(</span><span class=\"n\">LOGGING</span><span class=\"p\">)</span>\n</code></pre>  </div></div>\n\n<h3 id=\"4-설정한-로거를-소스에서-사용하는-방법\">4. 설정한 로거를 소스에서 사용하는 방법</h3>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\"># some_app/views.py\n</span><span class=\"kn\">import</span> <span class=\"nn\">logging</span>\n\n<span class=\"n\">logger</span> <span class=\"o\">=</span> <span class=\"n\">logging</span><span class=\"p\">.</span><span class=\"n\">getLogger</span><span class=\"p\">(</span><span class=\"s\">'mylogger'</span><span class=\"p\">)</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">my_view</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"n\">arg1</span><span class=\"p\">,</span> <span class=\"n\">arg</span><span class=\"p\">):</span>\n    <span class=\"c1\"># 로직\n</span>    <span class=\"k\">if</span> <span class=\"n\">bad_mojo</span><span class=\"p\">:</span>\n        <span class=\"c1\"># ERROR 레벨의 로그 레코드 생성함\n</span>        <span class=\"n\">logger</span><span class=\"p\">.</span><span class=\"n\">error</span><span class=\"p\">(</span><span class=\"s\">'Something went wrong!'</span><span class=\"p\">)</span>\n</code></pre>  </div></div>\n<ul>\n <li>logging.getLogger() : 관행적으로 <strong>__name__</strong> (해당 파일 이름) 구문을 사용, ‘’ 로 설정하면 최상위 루트 로거가 됨\n <ul>\n <li>만일 ch3/polls/views 파일이라면, <strong>__name__</strong>은 polls.views 가 됨</li>\n <li>로깅 호출은, 부모에게서 전파되므로 최상위 루트 로거에서 핸들러 하나만 만들어도 하위 로거의 모든 로깅 호출함</li>\n <li>예시 : project 이름공간에 정의된 로그 핸들러는 project.interesting 로거 및 project.interesting.stuff 로거가 보내주는 모든 로그 메시지를 잡음\n <div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>  <span class=\"c1\"># 로거 이름으로 계층화\n</span>  <span class=\"n\">logger</span> <span class=\"o\">=</span> <span class=\"n\">logging</span><span class=\"p\">.</span><span class=\"n\">getLogger</span><span class=\"p\">(</span><span class=\"s\">'project.interesting.stuff'</span><span class=\"p\">)</span>\n</code></pre>  </div> </div>\n </li>\n </ul>\n </li>\n <li>로깅 메소드 : 로거 객체는 로그 레벨별로 로그 호출 메소드를 갖고 있음\n <ul>\n <li>logger.debug()</li>\n <li>logger.info()</li>\n <li>logger.warning()</li>\n <li>logger.error()</li>\n <li>\n <p>logger.critical()</p>\n </li>\n <li>logger.log()</li>\n <li>logger.exception() : 익셉션 스택 트레이스 정보를 포함하는 ERROR 레벨의 로그 메시지 생성</li>\n </ul>\n </li>\n</ul>\n","dir":"/python/DjangoCoreFunction/","name":"DjangoLogging.md","path":"python/DjangoCoreFunction/DjangoLogging.md","url":"/python/DjangoCoreFunction/DjangoLogging.html"},{"sort":6,"layout":"default","title":"템플릿 개발 시 알아두기","content":"<h1 id=\"템플릿-개발-시-알아두기\">템플릿 개발 시 알아두기</h1>\n\n<h2 id=\"1-날짜관련-필드의-포맷ex-modify_dt-create_dt-\">1. 날짜관련 필드의 포맷(ex. modify_dt, create_dt )</h2>\n<ol>\n <li>참고: <a href=\"https://docs.djangoproject.com/en/2.2/ref/templates/builtins/#date\">https://docs.djangoproject.com/en/2.2/ref/templates/builtins/#date</a></li>\n <li>{{ post.modify_dt|date:”N d, Y” }} : July 05, 2019 형식으로 표현됨</li>\n <li>{{ object.modify_dt|date:”j F Y” }} : 12 July 2015 형식</li>\n <li>{% now “N d, Y” %} : 오늘 날짜의 July 18, 2015 형식</li>\n <li>{{ post.modify_dt|date:’Y-m-d’ }} : 날짜를 2019-06-12 형식으로 표현</li>\n <li>{{ post.modify_dt|date:’F’ }} : 월을 july 형식으로 표현</li>\n <li>{{ post.modify_dt|date:’N, Y’ }} : 날짜를 May, 2015 형식으로 표현</li>\n</ol>\n\n<h2 id=\"2-컨텍스트-오브젝트\">2. 컨텍스트 오브젝트</h2>\n<ol>\n <li><strong><font color=\"blue\">object_list</font></strong> : ListView등의 클래스뷰에서 전달하는 객체 리스트</li>\n <li><strong><font color=\"blue\">object</font></strong> : DetailView 등의 클래스뷰에서 전달하는 객체 리스트</li>\n <li><strong><font color=\"blue\">page_obj</font></strong> : ListView등의 클래스뷰에서 전달하는 객체 리스트. Page 객체가 들어 있는 컨텍스트 변수.\n <ul>\n <li><strong><font color=\"blue\">page_obj.has_previous</font></strong> : 현재 페이지 기준으로 이전 페이지가 있는지 여부</li>\n <li><strong><font color=\"blue\">page_obj.has_next</font></strong> : 현재 페이지 기준으로 다음 페이지가 있는지 여부</li>\n <li><strong><font color=\"blue\">page_obj.previous_page_number</font></strong> : 이전 페이지의 번호</li>\n <li><strong><font color=\"blue\">page_obj.next_page_number</font></strong> : 다음 페이지의 번호</li>\n <li><strong><font color=\"blue\">page_obj.number</font></strong> : 현재 페이지의 번호</li>\n <li><strong><font color=\"blue\">page_obj.paginator.num_pages</font></strong> : 총 페이지 갯수</li>\n </ul>\n </li>\n <li>예시</li>\n</ol>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>\n&lt;h1&gt;Blog List&lt;/h1&gt;\n&lt;br&gt;\n\n{% for post in object_list %}\n    &lt;h3&gt;&lt;a href=\"{{ post.get_absolute_url }}\"&gt;{{ post.title }}&lt;/a&gt;&lt;/h3&gt;\n    {{ post.modify_dt|date:\"N d, Y\"}}\n    &lt;p&gt;{{ post.description }}&lt;/p&gt;\n{% endfor %}\n\n&lt;br&gt;\n\n&lt;div&gt;\n    &lt;span&gt;\n    {% if page_obj.has_previous %}\n        &lt;a href=\"?page={{ page_obj.previous_page_number }}\"&gt;PreviousPage&lt;/a&gt;\n    {% endif %}\n\n    Page {{ page_obj.number }} of {{ page_obj.paginator.num_pages }}\n\n    {% if page_obj.has_next %}\n        &lt;a href=\"?page={{ page_obj.next_page_number }}\"&gt;NextPage&lt;/a&gt;\n    {% endif %}\n    &lt;/span&gt;\n&lt;/div&gt;\n\n</code></pre>  </div></div>\n<ol>\n <li><strong><font color=\"blue\">date_list</font></strong> : 날짜관련 클래스뷰 ( XXXarchiveView 또는 ArchiveIndexView ) 에서 넘겨주는 컨텍스트 변수, DateQuerySet 객체 리스트를 담고 있음. 날짜정보만 추출한 리스트. 객체는 datetime.date 타입의 객체.</li>\n <li><strong><font color=\"blue\">latest</font></strong> : ArchiveIndexView에서만 정의된 변수</li>\n</ol>\n\n<h2 id=\"3-템플릿-필터\">3. 템플릿 필터</h2>\n<ol>\n <li>{{ object.content|<font color=\"blue\">linebreaks</font> }} : \\n(newline)을 인식하게 함</li>\n <li>{{ date|<font color=\"blue\">date:'Y'</font> }} : date객체로부터 YYYY 형식의 연도만 추출함, 2020 형식</li>\n</ol>\n\n<h2 id=\"4-tag-템플릿문법-등\">4. Tag, 템플릿문법 등</h2>\n<ol>\n <li>검색엔진에 노출돼야 하는 페이지라면 &lt;title&gt; 태그에 의미있는 문구를 넣을 것</li>\n</ol>\n","dir":"/python/PracticeProgram/","name":"DevTemplates.md","path":"python/PracticeProgram/DevTemplates.md","url":"/python/PracticeProgram/DevTemplates.html"},{"sort":6,"permalink":"/python/DjangoWebServerConfig/","layout":"default","title":"Django 웹서버 연동원리","content":"<h1 id=\"django-웹서버-연동원리\">Django 웹서버 연동원리</h1>\n\n<blockquote>\n <p>참고 : <a href=\"https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/\">https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/</a> <br />\n장고의 wsgi.py 파일 <br />\n장고의 WSGI 인터페이스 <br />\n운영서버 적용 전 장고의 설정 변경 사항</p>\n</blockquote>\n\n<ol>\n <li>운영서버로 배포 시, 운영환경의 웹서버가 우리가 만든 웹 애플리케이션을 인식 할 수 있도록 몇가지 설정사항 변경이 필요하다.</li>\n <li>운영서버는 거의 리눅스를 사용하므로, centOs 기준으로 설명한다.</li>\n <li>개발 PC에서 운영 PC로 소스를 복사하기 위해 FTP 파일이 필요한데, Xftp, WinSCP, FileZilla 등을 사용 할 수 있다.</li>\n</ol>\n\n<p>source: <code class=\"language-plaintext highlighter-rouge\">python/DjangoWebServerConfig/README.md</code></p>\n","dir":"/python/DjangoWebServerConfig/","name":"README.md","path":"python/DjangoWebServerConfig/README.md","url":"/python/DjangoWebServerConfig/"},{"sort":7,"permalink":"/python/pythonAnyWhereCloudServerDeploy/","layout":"default","title":"Cloud (pythonanywhere) 서버에 Django 배포하기","content":"<h1 id=\"cloud-pythonanywhere-서버에-django-배포하기\">Cloud (pythonanywhere) 서버에 Django 배포하기</h1>\n<ol>\n <li>PythonAnywhere 사이트 가입하기</li>\n <li>장고 소스 올리기</li>\n <li>리눅스 명령으로 압축풀기</li>\n <li>가상환경 만들기</li>\n <li>PythonAnywhere 웹서버에서 장고 설정 변경하기</li>\n <li>PythonAnywhere 웹 서버 설정하기</li>\n <li>지금까지 작업한 것 확인하기</li>\n</ol>\n\n<p>source: <code class=\"language-plaintext highlighter-rouge\">python/pythonAnyWhereCloudServerDeploy/README.md</code></p>\n","dir":"/python/pythonAnyWhereCloudServerDeploy/","name":"README.md","path":"python/pythonAnyWhereCloudServerDeploy/README.md","url":"/python/pythonAnyWhereCloudServerDeploy/"},{"sort":8,"permalink":"/python/ApacheWebServerDeploy/","layout":"default","title":"Apache 웹서버 연동하기","content":"<h1 id=\"apache-웹서버-연동하기\">Apache 웹서버 연동하기</h1>\n<ol>\n <li>리눅스 환경 설정</li>\n <li>프로젝트 배포 설정</li>\n <li>mod_wsgi 설치 및 아파치에 mod_wsgi 모듈 추가</li>\n <li>웹서버 내장모드 실행</li>\n <li>웹서버 데몬모드 실행</li>\n</ol>\n\n<p>source: <code class=\"language-plaintext highlighter-rouge\">python/ApacheWebServerDeploy/README.md</code></p>\n","dir":"/python/ApacheWebServerDeploy/","name":"README.md","path":"python/ApacheWebServerDeploy/README.md","url":"/python/ApacheWebServerDeploy/"},{"sort":9,"permalink":"/python/NginxWebServerDeploy/","layout":"default","title":"NGINX 웹서버와 연동하기","content":"<h1 id=\"nginx-웹서버와-연동하기\">NGINX 웹서버와 연동하기</h1>\n<ol>\n <li>장고 설정 변경</li>\n <li>NGINX 설치</li>\n <li>NGINX 설정</li>\n <li>uWSGI 설치</li>\n <li>uWSGI 설정</li>\n <li>작업 확인하기</li>\n</ol>\n\n<p>source: <code class=\"language-plaintext highlighter-rouge\">python/NginxWebServerDeploy/README.md</code></p>\n","dir":"/python/NginxWebServerDeploy/","name":"README.md","path":"python/NginxWebServerDeploy/README.md","url":"/python/NginxWebServerDeploy/"},{"sort":10,"permalink":"/python/JangoDevelopmentBasic/","layout":"default","title":"파이썬 가상환경 사용하기","content":"<h1 id=\"파이썬-가상환경-사용하기\">파이썬 가상환경 사용하기</h1>\n\n<p>source: <code class=\"language-plaintext highlighter-rouge\">python/JangoDevelopmentBasic/README.md</code></p>\n","dir":"/python/JangoDevelopmentBasic/","name":"README.md","path":"python/JangoDevelopmentBasic/README.md","url":"/python/JangoDevelopmentBasic/"},{"sort":11,"permalink":"/python/PracticeProgram/","layout":"default","title":"실전 프로그램 개발 요약","content":"<h1 id=\"실전-프로그램-개발-요약\">실전 프로그램 개발 요약</h1>\n<blockquote>\n <p>자세한 소스는 깃헙을 확인바람</p>\n</blockquote>\n\n<ol>\n <li>설계 : 화면UI 설계 -&gt; 테이블 설계 -&gt; 로직 설계 -&gt; URL 설계 -&gt; 작업/코딩</li>\n <li>장고 뼈대 개발\n <ul>\n <li>프로젝트 생성 : <code class=\"language-plaintext highlighter-rouge\">(venv)$ django-admin startproject mysite</code></li>\n <li>프로젝트 설정 파일 변경 : mysite/settings.py</li>\n <li>기본 테이블 생성 : <code class=\"language-plaintext highlighter-rouge\">(venv)$ python3 manage.py migrate</code></li>\n <li>슈퍼유저 생성 : <code class=\"language-plaintext highlighter-rouge\">(venv) $ python3 manage.py createsuperuser</code></li>\n <li>애플리케이션 생성 : <code class=\"language-plaintext highlighter-rouge\">(venv) $ python3 manage.py startapp myapp</code></li>\n <li>애플리케이션 등록 : seggings.py 의 INSTALLED_APPS 리스트에 ‘myapp.apps.MyappConfig’(예시) 추가</li>\n </ul>\n </li>\n <li>모델 개발\n <ul>\n <li>테이블 정의 : myapp/models.py</li>\n <li>admin 사이트에 테이블 반영 : myapp/admin.py</li>\n <li>데이터베이스 변경사항 반영\n <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>  (venv)$ python3 manage.py makemigrations myapp\n  (venv)$ python3 manage.py migrate\n</code></pre>  </div> </div>\n </li>\n <li>테이블 모습 확인\n <ul>\n <li><code class=\"language-plaintext highlighter-rouge\">(venv)$ python3 manage.py runserver # 백그라운드 실행 시 끝에 &amp;를 붙인다.</code></li>\n <li>웹브라우저 : http://localhost:8000/admin/</li>\n </ul>\n </li>\n </ul>\n </li>\n <li>URLconf 개발</li>\n <li>뷰 개발</li>\n <li>템플릿 개발</li>\n</ol>\n\n<p>source: <code class=\"language-plaintext highlighter-rouge\">python/PracticeProgram/README.md</code></p>\n","dir":"/python/PracticeProgram/","name":"README.md","path":"python/PracticeProgram/README.md","url":"/python/PracticeProgram/"}]