[{"permalink":"//","layout":"default","title":"jekyll-rtd-theme","content":"# jekyll-rtd-theme\n\n![CI](https://github.com/rundocs/jekyll-rtd-theme/workflows/CI/badge.svg?branch=develop)\n![jsDelivr](https://data.jsdelivr.com/v1/package/gh/rundocs/jekyll-rtd-theme/badge)\n\nJust another documentation theme compatible with GitHub Pages\n\n## What it does?\n\nThis theme is inspired by [sphinx-rtd-theme](https://github.com/readthedocs/sphinx_rtd_theme) and refactored with:\n\n- [@primer/css](https://github.com/primer/css)\n- [github-pages](https://github.com/github/pages-gem) ([dependency versions](https://pages.github.com/versions/))\n\n## Quick start\n\n```yml\nremote_theme: rundocs/jekyll-rtd-theme\n```\n\nYou can [generate](https://github.com/rundocs/starter-slim/generate) with the same files and folders from [rundocs/starter-slim](https://github.com/rundocs/starter-slim/)\n\n## Usage\n\nDocumentation that can guide how to create with Github pages, please refer to [rundocs.io](https://rundocs.io) for details\n\n## Features\n\n- Shortcodes (Toasts card, mermaid)\n- Pages Plugins (emoji, gist, avatar, mentions)\n- Auto generate sidebar\n- [Attribute List Definitions](https://kramdown.gettalong.org/syntax.html#attribute-list-definitions) (Primer/css utilities, Font Awesome 4)\n- Service worker (caches)\n- SEO (404, robots.txt, sitemap.xml)\n- Canonical Link (Open Graph, Twitter Card, Schema data)\n\n## Options\n\n| name | default value | description |\n| ------------- | -------------------- | ----------------- |\n| `title` | repo name | |\n| `description` | repo description | |\n| `url` | user domain or cname | |\n| `baseurl` | repo name | |\n| `lang` | `en` | |\n| `direction` | `auto` | `ltr` or `rtl` |\n| `highlighter` | `rouge` | Cannot be changed |\n\n```yml\n# folders sort\nreadme_index:\n with_frontmatter: true\n\nmeta:\n key1: value1\n key2: value2\n .\n .\n .\n\ngoogle:\n gtag:\n adsense:\n\nmathjax: # this will prased to json, default: {}\n\nmermaid:\n custom: # mermaid link\n initialize: # this will prased to json, default: {}\n\nscss: # also _includes/extra/styles.scss\nscript: # also _includes/extra/script.js\n\ntranslate:\n # shortcodes\n danger:\n note:\n tip:\n warning:\n # 404\n not_found:\n # copyright\n revision:\n # search\n searching:\n search:\n search_docs:\n search_results:\n search_results_found: # the \"#\" in this translate will replaced with results size!\n search_results_not_found:\n\nplugins:\n - jemoji\n - jekyll-avatar\n - jekyll-mentions\n```\n\n## The license\n\nThe theme is available as open source under the terms of the MIT License\n","dir":"/","name":"README.md","path":"README.md","url":"/"},{"sort":1,"layout":"default","title":"웹 클라이언트 라이브러리","content":"# 웹 클라이언트 라이브러리\n> __KEY WORD__ \n> `#urllib.parse #urlparse() #urllib.request #urlopen() #POST요청 #Request() #build_open() #HTTPBasicAuthHandler #HTTPCookieProcessor\n> #install_open() #ProxyHandler #ProxyBasicAuthHandler #HTMLParser #feed()`\n\n## 1. urllib.parse 모듈\n> URL 분해, 조립, 변경, URL 문자 인코딩, 디코딩 등을 처리. \n> urlparse(), urljoin(), parse_qs(), quote(), encode() 함수등이 있음. \n> <https://docs.python.org/3/library/urllib.parse.html#module-urllib.parse> \n\n### urlparse()\n- 예제\n```\n>>> from urllib.parse import urlparse\n>>> result = urlparse(\"http://www.python.org:80/guido/python.html;philosophy?overall=3#n10\")\n>> result\nParseResult(scheme='http', netloc='www.python.org:80', path='/guido/python.html', params='philosophy', query='overall=3', fragment='n10')\n```\n\n## 2. urllib.request 모듈\n> 주어진 URL에서 데이터를 가져오는 기능\n\n### urlopen()\n- 문법\n```\nurlopen(url, data=None, [timeout])\n```\n + url 인자 : 문자나 Request 클래스\n + url에 file 스킴 지정 시, 파일을 열 수 있음\n + data 인자가 None 이거나 없으면 GET 요청, data 인자로 문자열이 있으면 POST 요청 \n\n### urlopen()으로 get 방식 요청하기\n```\n>>> from urllib.request import urlopen\n>>> f = urlopen('http://www.example.com')\n>>> print(f.read(500).decode('utf-8'))\n```\n\n### urlopen()으로 post 방식 요청하기\n + data 인자는 `바이트 스트링` 이어야 함\n- 예제\n``` \n>>> from urllib.request import urlopen\n>>> data = \"language=python&framework=django\"\n>>> f = urlopen(\"http://127.0.0.1:8000\", bytes(data, encoding='utf-8'))\n>> print(f.read(500).decode('utf-8'))\n```\n\n### urlopen()과 Request 클래스 이용하여 요청 헤드 지정하기\n```\n>>> from urllib.request import urlopen, Request\n>>> from urllib.parse import urlencode\n>>>\n>>> url = 'http://127.0.0.1:8000'\n>>> data = {\n 'name':'김윤미',\n 'email':'kimyn@naver.com',\n 'url':'http://www.naver.com'\n}\n>>> encDate = urlencode(data)\n>>> postData = bytes(encData, encoding='utf-8')\n>>> req = Request(url, data=postData)\n>>> req.add_header('Content-Type', 'application/x-www-form-rulencoded')\n>>> f = req.urlopen(req)\n>>> print(f.info())\n>>> print(f.read(500).decode('utf-8'))\n```\n\n### build_opener()와 HTTPBasicAuthHandler 클래스를 이용하여 인증요청 보내기\n```\n>>> from urllib.request import HTTPBasicAuthHandler, build_opener\n>>> auth_handler = HTTPBasicAuthHandler()\n>>> auth_handler.add_password(realm='kym', user='ymkim', passwd='ymkimadmin', uri='http:// 127.0.0.1:8000/auth')\n>>> opener = build_opener(auth_handler)\n>>> resp = opener.open('http://127.0.0.1:8000/ahtu/')\n>>> print(resp.read().decode('utf-8'))\n```\n + 핸들러 생성 => 생성한 핸들러를 오프너에 전달하여 오프너 생성 => 오프너로 요청\n\n### build_open()와 HTTPCookieProcessor 클래스로 쿠키데이터 포함한 요청 하기\n```\nfrom urllib.request import Request, HTTPCookieProcessor, build_opener\nurl = 'http://127.0.0.1:8000/cookie'\n# get 방식으로 쿠키핸들러 요청하기\n# 쿠키 핸들러 생성, 쿠키 데이터 저장\ncookie_handler = HTTPCookieProcessor()\nopener = build_open(cookie_handler)\n\nreq = Request(url)\nres = opener.open(req)\nprint(res.info())\nprint(res.read().decode('utf-8'))\n\n# 이전의 요청에서 받은 쿠키를 헤더에 담아서 Post 요청\ndata = 'language=python&framework=django'\nencData = bytes(data, encoding='utf-8')\nreq = Request(url, encData)\nres = opener.open(req)\nprint(res.info())\nprint(res.read().decode('utf-8'))\n```\n\n### install_opener() 와 ProxyHandler 및 ProxyBasicAuthHandler 클래스로 프록시 처리\n```python\nimport urllib.request\n\nurl = 'http://www.example.com'\nproxyServer = 'http://www.proxy.com:3128'\n\n# proxy 서버를 설정함\nproxy_handler = urllib.request.ProxyHandler({'http':proxyServer})\n# 프록시 서버 설정 무시하고 웹서버로 요청 시,\n# proxy_handler = urllib.request.ProxyHandler({})\n\n# 프록시 서버에 대한 인증 처리\nproxy_auth_handler = urllib.request.ProxyBasicAuthHandler()\nproxy_auth_handler.add_password('realm', 'host', 'username', 'password')\n\n# 2개의 핸들러를 오프너에 등록\nopener = urllib.request.build_opener(proxy_handler, proxy_auth_handler)\n# 디폴트 오프너로 등록\nurllib.request.install_opener(opener)\n\n# opener.open() 대신 urlopen()을 사용\nf = urllib.request.urlopen(url)\nprint(\"geturl():\", f.geturl())\nprint(f.read(300).decode('utf-8'))\n```\n\n### urllib.request와 HTMLParser를 이용해서 이미지만 검색하여 리스트를 보여주기\n```python\nfrom html.parser import HTMLParser\nfrom urllib.request import urlopen\n\n# HTMLParser 를 사용할 때는, 이렇게 HTMLParser를 상속받고, 필요한 메소드를 overrwide 합니다.\nclass ImageParser(HTMLParser):\n # 'img' 태그를 찾기 위해서 handler_starttag 를 오버라이드 합니다.\n def handle_starttag(self, tag, attrs):\n if tag != 'img':\n return\n if not hasattr(self, 'result'):\n self.result = []\n\n for name, value in attrs:\n if name == 'src':\n # img src 태그를 찾으면 self.result 목록에 추가합니다.\n self.result.append(value)\n\n\ndef parse_image(data):\n parser = ImageParser()\n # HTML문장을 feed() 함수에 넣어주면, 바로 파싱하고 그 결과를 parser.result에 추가\n parser.feed(data)\n # set 에 parser.result를 넣어주어 중복된 값을 삭제합니다.\n dataSet = set( x for x in parser.result)\n return dataSet\n\ndef main():\n url = \"http://www.google.co.kr\"\n # urlopen 함수를 이용하여 구글의 첫페이지를 가져옵니다.\n with urlopen(url) as f:\n chatset = f.info().get_param('charset')\n data = f.read().decode(chatset)\n\n dataSet = parse_image(data)\n print('\\n>>>> Fetch Images from', url)\n print('\\n'.join(sorted(dataSet)))\n\n```\n\n## 3. http.client 모듈\n> GET, POST 이외의 방식으로 요청하는등 저수준의 더 세밀한 기능이 필요할 때 사용 \n> putheader(), endheaders(), send() 등의 함수가 있다. \n> 참조: <https://docs.python.org/3/library/http.client.html> \n\n### http.client 모듈의 코딩 순서\n\n|순번 |코딩순서 |코딩예시|\n|-----|---------|--------|\n|1 |연결 객체 생성 | conn = http.client.HTTPConnection('www.naver.com') |\n|2 |요청 보냄|conn.request('GET','/index.html') |\n|3 |응답 객체 생성|res = conn.getresponse() |\n|4 |응답 데이터 읽음 |data = res.read() |\n|5 |연결 닫음 |conn.close() |\n\n### GET 방식 요청하기\n\n```python\nfrom http.client import HTTPConnection\n\nhost = 'www.naver.com'\n# HTTPConnection()의 인수로 url('http://www....')이 아닌 host('www....')를 이용한다.\nconn = HTTPConnection(host)\n# conn.request(메소드, url, [body], [header])\nconn.request('GET','/')\nres1 = conn.getresponse()\nprint(res1.status, res1.reason)\n# 데이터를 모두 읽어들여야 다음 요청이 가능하다. 그렇지 않으면 error가 발생한다.\ndata1 = res1.read()\n\n# 두번째 요청\nconn.request('GET','/')\nres2 = conn.getresponse()\nprint(r2.status, r2.reason)\ndata2 = res2.read()\nprint(data2.decode())\nconn.close()\n```\n\n### HEAD 메소드로 요청하기\n\n```python\nfrom http.client import HTTPConnection\nconn = HTTPConnection('www.naver.com')\nconn.request('HEAD','/')\nresp = conn.getresponse()\ndata = resp.read()\n# head를 요청하였으므로, data( =body) 에는 아무것도 없어서 \n# 0 이 출력될 것이다.\nprint(len(data))\n```\n\n### POST 방식으로 요청하기\n```python\nfrom http.client import HTTPConnection\nfrom urllib.parse import urlencode\n\nhost = '127.0.0.1:8000'\n# 인코딩 해야 함\nparams = urlencode({\n 'language':'python',\n 'name':'김윤미',\n 'email':'kym@naver.com'\n})\nheaders = {\n 'Content-Type':'application/x-www-form-urlencoded',\n 'Accept':'text/plain'\n}\nconn = HTTPConnection(host)\nconn.request('POST','', params, headers)\nresp = conn.getresponse()\nprint(resp.status, resp.reason)\n\ndata = resp.read()\nprint(data.encode('utf-8'))\n\nconn.close()\n```\n\n### PUT 메소드로 요청하기\n\n```python\nfrom http.client import HTTPConnection\nfrom urllib.parse import urlencode\n\nhost = '127.0.0.1:8000'\n# 인코딩 해야 함\nparams = urlencode({\n 'language':'python',\n 'name':'김윤미',\n 'email':'kym@naver.com'\n})\nheaders = {\n 'Content-Type':'application/x-www-form-urlencoded',\n 'Accept':'text/plain'\n}\nconn = HTTPConnection(host)\nconn.request('PUT','', params, headers)\nresp = conn.getresponse()\nprint(resp.status, resp.reason)\n\ndata = resp.read(300)\nprint(data.encode('utf-8'))\n\nconn.close()\n```\n\n### 웹사이트에서 이미지만을 검색하여 그 이미지들을 다운로드 하는 방법\n```python\nimport os\nfrom http.client import HTTPConnection\nfrom urllib.parse import urljoin, urlunparse\nfrom urllib.request import urlretrieve\nfrom html.parser import HTMLParser\n\n# HTMLParser를 사용할 때는, HTMLParser를 상속하고, 필요한 메소드를 오버라이드하여 사용함.\nclass ImageParser(HTMLParser):\n # 이미지 태그를 찾기 위해 handle_starttag를 오버라이드 함\n def handle_starttag(self, tag, attrs):\n if tag != 'img':\n return\n if not hasattr(self, 'result'):\n self.result = []\n for name, value in attrs:\n if name == 'src':\n self.result.append(value)\n\n# HTML 문장을 feed()에 주면, 바로 파싱하고 parser.result 리스트에 추가함.\ndef download_image(url, data):\n if not os.path.exists('DOWNLOAD'):\n os.makedirs('DOWNLOAD')\n\n parser = ImageParser()\n parser.feed(data)\n dataSet = set(x for x in parser.result)\n\n for x in sorted(dataSet):\n # 다운로드 하기위해 baseUrl과 파일명을 합쳐서 완전한 다운로드 주소를 만듦\n imageUrl = urljoin(url, x)\n basename = os.path.basename(imageUrl)\n print('basename:',basename)\n targetFile = os.path.join('DOWNLOAD', basename)\n\n print('Downloading...', imageUrl)\n # src로부터 파일을 가져와서 targetFile로 생성해 줌.\n urlretrieve(imageUrl, targetFile)\n\ndef main():\n host = 'www.google.co.kr'\n\n conn = HTTPConnection(host)\n conn.request('GET','')\n resp = conn.getresponse()\n # 인코딩 방식을 알아내는 방법\n charset = resp.msg.get_param('charset')\n data = resp.read().decode(charset)\n conn.close()\n\n print('\\n>>>>>> Download Images from ', host)\n url = urlunparse(('http',host,'','','',''))\n download_image(url,data)\n\nif __name__ == '__main__':\n main()\n```\n","dir":"/python/webStandardLibrary/","name":"webClientLIbrary.md","path":"python/webStandardLibrary/webClientLIbrary.md","url":"/python/webStandardLibrary/webClientLIbrary.html"},{"sort":1,"permalink":"/python/","layout":"default","title":"Python","content":"<h1 id=\"python\">Python</h1>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>{% include list.liquid all=true %}\n\n\n- [웹 표준 라이브러리](/python/webStandardLibrary/)\n    - [웹 클라이언트 라이브러리](/python/webStandardLibrary/webClientLIbrary.html)\n    - [웹 서버 라이브러리](/python/webStandardLibrary/webServerLibrary.html)\n    - [CGI/WSGI 라이브러리](/python/webStandardLibrary/CgiWsgiLibrary.html)\n- [Django 웹 프레임워크](/python/DjangoWebFramework/)\n    - [장고 프로그램 설치](/python/DjangoWebFramework/jangoInstall.html)\n    - [장고의 웹애플리케이션 개발 방식](/python/DjangoWebFramework/jangoDevelopmentPattern.html)\n    - [프로젝트 뼈대 만들기](/python/DjangoWebFramework/applicationArchithect.html)\n    - [애플리케이션 개발하기 - Model 코딩](/python/DjangoWebFramework/applicationDevelopment-Model.html)\n    - [애플리케이션 개발하기 - URLconf, View 및 Templete 코딩](/python/DjangoWebFramework/jangoDevelopment-View_Templete.html)\n- [Django 핵심기능](/python/DjangoCoreFunction/)\n    - [Admin 사이트 꾸미기](/python/DjangoCoreFunction/decorateAdminSite.html)\n</code></pre>  </div></div>\n\n<ul>\n <li><a href=\"/python/webStandardLibrary/\">웹 표준 라이브러리</a>\n <ul>\n <li><a href=\"/python/webStandardLibrary/webClientLIbrary.html\">웹 클라이언트 라이브러리</a></li>\n <li><a href=\"/python/webStandardLibrary/webServerLibrary.html\">웹 서버 라이브러리</a></li>\n <li><a href=\"/python/webStandardLibrary/CgiWsgiLibrary.html\">CGI/WSGI 라이브러리</a></li>\n </ul>\n </li>\n <li><a href=\"/python/DjangoWebFramework/\">Django 웹 프레임워크</a>\n <ul>\n <li><a href=\"/python/DjangoWebFramework/jangoInstall.html\">장고 프로그램 설치</a></li>\n <li><a href=\"/python/DjangoWebFramework/jangoDevelopmentPattern.html\">장고의 웹애플리케이션 개발 방식</a></li>\n <li><a href=\"/python/DjangoWebFramework/applicationArchithect.html\">프로젝트 뼈대 만들기</a></li>\n <li><a href=\"/python/DjangoWebFramework/applicationDevelopment-Model.html\">애플리케이션 개발하기 - Model 코딩</a></li>\n <li><a href=\"/python/DjangoWebFramework/jangoDevelopment-View_Templete.html\">애플리케이션 개발하기 - URLconf, View 및 Templete 코딩</a></li>\n </ul>\n </li>\n <li><a href=\"/python/DjangoCoreFunction/\">Django 핵심기능</a>\n <ul>\n <li><a href=\"/python/DjangoCoreFunction/decorateAdminSite.html\">Admin 사이트 꾸미기</a></li>\n </ul>\n </li>\n</ul>\n","dir":"/python/","name":"README.md","path":"python/README.md","url":"/python/"},{"sort":1,"permalink":"/python/webStandardLibrary/","layout":"default","title":"웹 표준 라이브러리","content":"<h1 id=\"웹-표준-라이브러리\">웹 표준 라이브러리</h1>\n\n<p>source: <code class=\"language-plaintext highlighter-rouge\">python/webStandardLibrary/README.md</code></p>\n","dir":"/python/webStandardLibrary/","name":"README.md","path":"python/webStandardLibrary/README.md","url":"/python/webStandardLibrary/"},{"sort":1,"layout":"default","title":"장고 프로그램 설치","content":"# 장고 프로그램 설치\n\n> <font color='red'>python, pip 설치되어 있어야 함 (python 설치 시, pip 자동 설치)</font> \n\n## 1. 윈도우/리눅스/macOs 공통 설치\n```\n>pip install Django\n```\n\n- 리눅스의 경우, sudo pip install Django (sudo를 이용하여 관리자 권한 득)\n\n## 2. Django 제거\n\n```\n>cd (생략, python 설치된 폴더)/site-packages/\n>rm -rf django\n>rm -rf Django*\n```\n\n- 장고가 설치된 디렉토리가 알고 싶다면??\n\n```\n>python -c 'import django; print(django.__path__)'\n```\n\n## 3. Django 버전확인\n```\n> python -m django --version\n```\n","dir":"/python/DjangoWebFramework/","name":"jangoInstall.md","path":"python/DjangoWebFramework/jangoInstall.md","url":"/python/DjangoWebFramework/jangoInstall.html"},{"sort":1,"layout":"default","title":"Admin 사이트 꾸미기","content":"# Admin 사이트 꾸미기\n\n## 1. 필드 순서 변경하기\n - polls/admin.py\n ![admin site 필드 순서 변경](/assets/images/admin_site_feild_order_change.png)\n\n```python\nfrom django.contrib import admin\nfrom polls.models import Question, Choice\n\nclass QuestionAdmin(admin.ModelAdmin):\n # fields 라는 속성이름은, 이미 정해져 있는 속성이름 이므로, 변경하면 안됨\n fields = ['pub_date','question_text']\n\nadmin.site.register(Question, QuestionAdmin)\nadmin.site.register(Choice)\n```\n\n1. ModelAdmin 을 상속받아 새로운 QuestionAdmin 클래스 정의\n2. QuestionAdmin 클래스에 fields 속성 추가하여, 보여주고자 하는 순서대로 컬럼이름을 나열\n3. QuestionAdmin 클래스를 admin.site.register(Question) 의 두번째 인자로 추가\n\n## 2. 각 필드 분리해서 보여주기\n - polls/admin.py\n ![admin site 필드 분리해서 보여주기](../../assets/images/admin_site_seperate_column.png)\n\n```python\nfrom django.contrib import admin\nfrom polls.models import Question, Choice\n# Register your models here.\n\nclass QuestionAdmin(admin.ModelAdmin):\n # fields = ['pub_date','question_text']\n # fieldsets 라는 속성이름은, 이미 정해져 있는 속성이름 이므로, 변경하면 안됨\n fieldsets = [('Question Statement', {'fields':['question_text']}),\n ('Date Information', {'fields':['pub_date']})]\n\nadmin.site.register(Question, QuestionAdmin)\nadmin.site.register(Choice)\n```\n\n1. fieldssets 속성에 있는 각 튜플의 첫번째 인자가 해당 필드의 '제목' 이 됨\n\n## 3. 필드 접기\n- polls/admin.py\n ![admin site 필드 접기](../../assets/images/admin_site_field_collapse.png)\n\n ```python\nclass QuestionAdmin(admin.ModelAdmin):\n # fields = ['pub_date','question_text']\n fieldsets = [('Question Statement', {'fields':['question_text']}),\n ('Date Information', {'fields':['pub_date'],'classes':['collapse']}),]\n\nadmin.site.register(Question, QuestionAdmin)\nadmin.site.register(Choice)\n```\n\n1. fieldsets 속성의 튜플에서 필드접기 하고 싶은 필드 속성 뒤에 `classes':['collapse']` 를 추가해 준다.\n\n## 4. Question 테이블에 외래키를 가지고 있는 Choice 테이블을 한 화면에서 여러 개 입력하기\n- polls/admin.py\n ![Choice 테이블을 한 화면에서 여러 개 입력](../../assets/images/admin_site_fk_add_in_once.png)\n\n```python\nfrom django.contrib import admin\nfrom polls.models import Question, Choice\n# Register your models here.\n\nclass ChoiceInline(admin.StackedInline):\n model = Choice\n extra = 2\n\nclass QuestionAdmin(admin.ModelAdmin):\n # fields = ['pub_date','question_text']\n fieldsets = [('Question Statement', {'fields':['question_text']}),\n ('Date Information', {'fields':['pub_date'],'classes':['collapse']}),]\n inlines = [ChoiceInline]\n\nadmin.site.register(Question, QuestionAdmin)\nadmin.site.register(Choice)\n```\n\n1. admin.StackedOnline 클래스를 상속받는 Choice 클래스를 선언하고, model 속성과 extra 속성을 작성한다.\n2. QuestionAdmin 클래스에 inlines 속성으로 ChoiceInline 클래스를 지정한다.\n\n## 5. 테이블 형식으로 보여주기\n- polls/admin.py\n ![Choice 테이블을 한 화면에서 여러 개 입력](../../assets/images/admin_site_table_format.png)\n\n ```python\nfrom django.contrib import admin\nfrom polls.models import Question, Choice\n# Register your models here.\n\n# 상속받는 클래스만 변경\nclass ChoiceInline(admin.TabularInline):\n model = Choice\n extra = 2\n\nclass QuestionAdmin(admin.ModelAdmin):\n # fields = ['pub_date','question_text']\n fieldsets = [('Question Statement', {'fields':['question_text']}),\n ('Date Information', {'fields':['pub_date'],'classes':['collapse']}),]\n inlines = [ChoiceInline]\n\nadmin.site.register(Question, QuestionAdmin)\nadmin.site.register(Choice)\n ```\n\n 1. ChoiceInline 클래스에서 상속받는 클래스만 admin.TabularInline 으로 변경하면 됨\n\n## 6. 레코드 리스트 컬럼 지정하기\n\n- polls/admin.py\n- 기본설정은 models.py에서 정의한 __str__() 메소드의 리턴값을 사용\n- [변경전]\n![기본 리스트 컬럼](../../assets/images/admin_site_Question_list.png)\n- [변경후]\n![기본 리스트 컬럼](../../assets/images/admin_site_question_list_after.png)\n\n```python\nfrom django.contrib import admin\nfrom polls.models import Question, Choice\n# Register your models here.\n\nclass ChoiceInline(admin.TabularInline):\n model = Choice\n extra = 2\n\nclass QuestionAdmin(admin.ModelAdmin):\n # fields = ['pub_date','question_text']\n fieldsets = [('Question Statement', {'fields':['question_text']}),\n ('Date Information', {'fields':['pub_date'],'classes':['collapse']}),]\n inlines = [ChoiceInline]\n list_display = ('question_text','pub_date')\n\nadmin.site.register(Question, QuestionAdmin)\nadmin.site.register(Choice)\n```\n\n1. QuestionAdmin 클래스에 'list_display' 속성을 보여주고자 하는 컬럼 이름으로 작성한다. (컬럼이름과 다르면 에러 발생.)\n\n## 7. list_fileter 필터\n- polls/admin.py\n![리스트 필터](../../assets/images/admin_site_list_filter.png)\n\n```python\nfrom django.contrib import admin\nfrom polls.models import Question, Choice\n# Register your models here.\n\nclass ChoiceInline(admin.TabularInline):\n model = Choice\n extra = 2\n\nclass QuestionAdmin(admin.ModelAdmin):\n # fields = ['pub_date','question_text']\n fieldsets = [('Question Statement', {'fields':['question_text']}),\n ('Date Information', {'fields':['pub_date'],'classes':['collapse']}),]\n inlines = [ChoiceInline]\n list_display = ('question_text','pub_date')\n list_filter = ['pub_date']\n\nadmin.site.register(Question, QuestionAdmin)\nadmin.site.register(Choice)\n```\n\n1. list_filter 속성에 데이터를 필터링 하고자 하는 컬럼이름을 지정한다.\n2. 'pub_date' 컬럼에 필터를 적용하면, 지정된 기간안에 있는 데이터들만 볼 수 있다.\n\n## 8. search_filter\n> 데이터를 검색 할 수 있는 검색 필드가 생기게 된다.\n\n.polls/admin.py\n![서치 필터](../../assets/images/admin_site_search_filter.png)\n\n```python\nfrom django.contrib import admin\nfrom polls.models import Question, Choice\n# Register your models here.\n\nclass ChoiceInline(admin.TabularInline):\n model = Choice\n extra = 2\n\nclass QuestionAdmin(admin.ModelAdmin):\n # fields = ['pub_date','question_text']\n fieldsets = [('Question Statement', {'fields':['question_text']}),\n ('Date Information', {'fields':['pub_date'],'classes':['collapse']}),]\n inlines = [ChoiceInline]\n list_display = ('question_text','pub_date')\n list_filter = ['pub_date']\n search_fields = ['question_text']\n\nadmin.site.register(Question, QuestionAdmin)\nadmin.site.register(Choice)\n```\n\n1. search_filter 속성에 검색하고자 하는 컬럼을 지정해 준다.\n\n## 9. admin.py 변경 내역 정리\n\n```python\nfrom django.contrib import admin\nfrom polls.models import Question, Choice\n# Register your models here.\n\nclass ChoiceInline(admin.TabularInline): # Question, Choice 한 화면에서 보기\n model = Choice\n extra = 2\n\nclass QuestionAdmin(admin.ModelAdmin):\n # fields = ['pub_date','question_text'] # 필드 순서 변경\n fieldsets = [('Question Statement', {'fields':['question_text']}), # 필드 분리하여 보여주기\n ('Date Information', {'fields':['pub_date'],'classes':['collapse']}),] # 필드 펼치기 기능 추가\n inlines = [ChoiceInline] # Choice 모델 클래스 같이 보기 \n list_display = ('question_text','pub_date') # 레코드 리스트 컬럼 지정하기\n list_filter = ['pub_date'] # 리스트 필터 지정하기\n search_fields = ['question_text'] # 레코드 검색 필드 추가하기\n\nadmin.site.register(Question, QuestionAdmin)\nadmin.site.register(Choice)\n```\n\n## 10. Admin site 템플릿 수정하기\n> Admin 사이트를 개발자 취향에 맞게 수정 할 수 있음\n\n1. django의 설치 위치를 확인 한다. \n `$>python -c 'import django; print(django.__path__)`\n\n2. 프로젝트 레벨에 /templates/admin 폴더를 생성한다.\n ```\n ~ch3>mkdir templates\n ~ch3>mkdir templates/admin\n ```\n\n3. django 설치 디렉토리 하위의 base_site.html 파일을 방금 생성한 templates/admin 하위로 복사 한다.\n ```\n ~ch3>cp [django설치경로, (1) 에서의 아웃풋]/contrib/admin/templates/admin/base_site.html ./templates/admin/base_site.html\n ```\n\n4. settings.py 파일에 추가한 templates 경로를 작성한다.\n . ch3/mysite/settings.py\n ```\n ..(생략)\n TEMPLATES = [\n 'DIRS'=[os.path.join(BASE_DIR, 'templates')],\n ]\n ...(생략)\n ```\n\n5. base_site.html 파일을 수정한다.\n\n ```python\n {% raw %}\n # 아래 1줄 수정해 보자\n <h1 id='site-name'><a href=\"{%url 'admin:index' %}\">KYM Polls Administration</a></h1>\n {% endraw %}\n ```\n6. 수정된 화면 확인하기\n - http://http://127.0.0.1:8000/admin/\n ![admin site page](../../assets/images/admin_site_base_site_html.png)","dir":"/python/DjangoCoreFunction/","name":"decorateAdminSite.md","path":"python/DjangoCoreFunction/decorateAdminSite.md","url":"/python/DjangoCoreFunction/decorateAdminSite.html"},{"sort":2,"layout":"default","title":"웹 서버 라이브러리","content":"# 2. 웹 서버 라이브러리\n> 웹서버는 프레임워크를 사용해서 개발하는 경우가 대부분이지만, 웹 서버 라이브러리의 동작원리를 익히는 것이 고급 개발자로 가는 길이다. \n\n## http.server의 주요 클래스\n\n|클래스 명 |주요기능 |\n|:--- |:--- |\n|HTTPServer |. 웹서버를 만들기 위한 클래스, ip와 port를 바인딩 함 <br>. HTTPServer객체 생성 시, 핸들러가 반드시 필요함 |\n|BaseHTTPRequestHandler |. 핸들러를 만들기 위한 기반 클래스. HTTP 처리 로직이 들어 있음<br>. 이 클래스를 상속 받아, 자신의 로직 처리를 담당하는 핸들러를 만들 수 있음 |\n|SimpleHTTPRequestHandler|. BaseHTTPRequestHandler를 상속받아 만든 클래스<br>. GET과 HEAD 메소드 처리가 가능한 핸들러|\n|CGIHTTPRequestHAndler|. SimpleHTTPRequestHandler클래스를 상속받아 만든 클래스<br>. 추가적으로 POST와 CGI 처리가 가능한 핸들러 클래스|\n\n## 가장 간단한 웹서버 만들기 샘플\n> HTTPServer와 BaseHTTPRequestHandler 를 이용\n\n```python\nfrom http.server import HTTPServer, BaseHTTPRequestHandler\n\nclass MyHandler(BaseHTTPRequestHandler):\n def do_GET(self):\n self.send_response_only(200, 'OK')\n self.send_header('Content-Type', 'text/plain')\n self.end_headers()\n self.wfile.write(b\"Hello World\")\n\nif __name__ == '__main__':\n # 서버의 ip, port, 핸들러를 인자로 하여, HttpServer객체를 생성한다.\n server = HTTPServer(('',8888), MyHandler)\n print(\"Started WebServer on port 8888......\")\n print(\"Press ^C to quit WebServer\")\n # 요청을 처리함\n server.serve_forever()\n```\n- 웹서버를 만드는 방법은 일정한 룰에 의해 작성됨\n\n## SimpleHTTPRequestHandler 클래스\n> 별도의 코딩이 필요 없음 \n> do_GET(), do_HEAD() 메소드가 정의되어 있음 \n\n```\n$ python -m http.server 8888\n```\n- 웹브라우저에 http://localhost:8888 을 요청하면, 내 PC의 디렉터리 목록이 보여진다.\n\n## CGIHTTPRequestHandler 클래스\n> 미리 구현되어 있어서, 즉시 웹서버 실행이 가능함 \n> do_POST()메소드가 정의되어 있고 CGI 웹서버 실행만 가능함 \n> CGI 웹서버 실행시 --cgi 옵션을 이용 \n> 디폴트 포트번호는 8000 \n> http.server --cgi 실행위치가 웹서버의 루트 디렉토리가 됨\n\n```\n$python -m http.server 8888 --cgi\n```\n\n### CGIHTTPRequestHandler 클래스를 이용하여 Post 요청 해보기\n- 서버 스크립트\n + 반드시 cgi-bin 폴더안에 파일을 생성해야 함\n + 파일에 실행권한을 주어야 함 \n `$ chmod 755 ./cgi-bin/cgi_server.py` \n + 새로운 터미널을 열고 cgi-bin 폴더의 상위폴더에서 http.server --cgi 를 실행하면, 자동으로 cgi-bin 폴더안의 cgi-server.py가 실행됨 \n `$ python -m http.server 8888 --cgi`\n\n```python\n#!/usr/bin/env python\n\nimport cgi\n\nform = cgi.FieldStorage()\nname = form.getvalue('name')\nemail = form.getvalue('email')\nurl = form.getvalue('url')\n\nprint('Content-Type: text/plain')\nprint()\n\nprint('Welcome... CGI Script')\nprint('name is ', name)\nprint('email is ', email)\nprint('url is ', url)\n```\n\n- 클라이언트 스크립트\n + http.server --cgi 명령을 실행한 위치가 루트가 되므로, url이 .../cgi-bin/cgi_server.py 가 되는 것임 \n\n```python\nfrom urllib.request import urlopen\nfrom urllib.parse import urlencode\n\nurl = 'http://127.0.0.1:8888/cgi-bin/cgi_server.py'\ndata = urlencode({\n 'name':'김윤미',\n 'email':'kym@naver.com',\n 'url':'http://www.naver.com'\n})\npostData = data.encode()\n\nf = urlopen(url, postData)\nprint(f.read().decode('utf-8'))\n\n```","dir":"/python/webStandardLibrary/","name":"webServerLibrary.md","path":"python/webStandardLibrary/webServerLibrary.md","url":"/python/webStandardLibrary/webServerLibrary.html"},{"sort":2,"permalink":"/python/DjangoWebFramework/","layout":"default","title":"Django 웹 프레임워크","content":"<h1 id=\"django-웹-프레임워크\">Django 웹 프레임워크</h1>\n\n<blockquote>\n <p>MVT 패턴 <br />\nORM 지원 <br />\n관리자화면 자동 구성 <br />\n정규표현식을 이용한 우아한 URL 지원 <br />\n자체 템플릿 지원 <br />\n여러유형/여러장소의 캐시 시스템 운영 <br />\n다국어 지원 <br />\n풍부한 개발환경 (테스트서버 지원등) <br />\n소스 변경 사항 자동 반영 (웹서버 재실행 필요 없음)</p>\n</blockquote>\n\n<p>source: <code class=\"language-plaintext highlighter-rouge\">python/DjangoWebFramework/README.md</code></p>\n","dir":"/python/DjangoWebFramework/","name":"README.md","path":"python/DjangoWebFramework/README.md","url":"/python/DjangoWebFramework/"},{"sort":2,"layout":"default","title":"장고의 웹애플리케이션 개발 방식","content":"# 장고의 웹애플리케이션 개발 방식\n\n+ 프로젝트 : 전체 프로그램\n+ 애플리케이션 : 모듈화된 단위 프로그램\n\n## 1. MVT 개발방식\n\n### (1) MVT의 정의\n1. `M` : Module ( DB테이블을 클래스로 만들어, DB와 객체를 맵핑 해주는 역할 ), modules.py 파일에 정의\n2. `V` : Views (장고에서는, Controller를 View로 구분한다.), views.py 파일에 정의\n3. `T` : Templete (템플릿, html 파일을 생성해 주는 템플릿 파일 ), templetes.py 파일에 정의\n\n### (2) 예시\n\n```mermaid\nflowchart LR\n id1((웹클라이언트))<--Response-->id2([View])--Model CRUD--> id3([Model]);\n id1--Request-->id6[URL\\n conf];\n id6--Request-->id2;\n id2--Templete Rendering-->id4([Templete]);\n id3--ORM-->id5[(DB)];\n```\n\n+ URLconf : URL을 분석하여, URL에 해당하는 뷰를 결정\n\n## 2. Model - 데이터베이스 정의\n> ORM 기법으로 테이블을 클래스로 맵핑하기 때문에 데이터베이스 엔진이 바뀌더라도 변경을 하지 않아도 된다. \n> models.py 파일에 정의 \n> 참고 : <https://docs.djangoproject.com/en/3.2/topics/db/models> \n\n### (1) 예시 \n\n```python\nfrom django.db import models\n\nclass Person(models.Model):\n first_name = models.CharField(max_length=30)\n last_name = models.CharField(max_length=30)\n```\n\n+ DB에 테이블을 생성하지 않아도, 웹서버 실행 시 테이블이 없으면 자동생성 함\n\n### (2) DB 스키마 자동 생성의 규칙\n1. 테이블명 : 애플리케이션이름_모델 클래스명 (모두 소문자)\n2. PrimaryKey : 장고에서 자동부여 (=id)\n\n## 3. URLconf - URL 정의\n> urls.py 파일에 정의 \n\n### (1) 예시\n\n```python\nfrom django.urls import path\nfrom . import views\n\nurlpatterns = [\n path('articles/2003/',views.special_case_2003),\n path('articles/<int:year>/',views.year_archive),\n path('articles/<int:year>/<int:month>/',views.month_archive),\n path('articles/<int:year>/<int:month>/<slug:slug>/',views.article_detail),\n]\n```\n\n### (2) URL 분석하는 순서\n1. settings.py 파일에서 ROOT_URLCONF 항목을 읽어 최상위 URLconf(urls.py)의 위치를 알아냄\n2. URLconf 로딩하여, urlpatterns 변수에 지정된 URL 리스트를 검사\n3. 매치된 URL에 해당하는 view를 호출 (view 는 클래스나 메소드, 호출 시, HTTPRequest객체와 <>안에 정의된 파라미터를 함께 전달함)\n4. 매칭에 실패시, 에러 처리하는 뷰 호출\n\n### (3) <> (Path Converter)에 사용되는 타입\n1. str : 지정하지 않으면 기본값\n2. int\n3. slug : slug 형식의 문자열 (ASCII, 숫자, 하이픈, 밑줄)\n4. uuid \n5. path : /를 포함한 모든 문자열, 패턴의 일부가 아니라 전체를 추출\n\n### (4) 정규표현식을 사용한 URL 표현법\n\n+ 예시\n - path() : 타입을 사용하여 파라미터 정의\n - re_path() : 정규식을 사용하여 파라미터 정의\n\n```python\nfrom django.urls import path, re_path\nfrom . import views\n\nurlpatterns = [\n path('articles/2003/', views.special_case_2003),\n re_path(r'^articles/(?P<year>[0-9]{4})/$', views.year_archive),\n re_path(r'^articles/(?P<year>[0-9]{4})/(?P<month>[0-9]{2})/$', views.month_archive),\n re_path(r'^articles/(?P<year>[0-9]{4})/(?P<month>[0-9]{2})/(?P<slug>[\\w-]+)/$',views.article_detail)\n]\n```\n\n### (5) 정규표현식에 사용되는 문자들\n\n|표현 |의미 |\n|:--- |:--- |\n|.(Dot) |모든 문자 1개 |\n|^(Carot) |문자열의 시작 |\n|$ |문자열의 끝 |\n|[] |[]안의 문자중 하나 |\n|[^] |[]안의 문자 이외의 문자 하나 |\n|* |0회 이상 반복 |\n|+ |1번 이상 반복 |\n|? |0 또는 1번 반복 |\n|{n} |n회 반복 |\n|{m,n} |m~n회 반복 |\n|A\\|B |A또는 B |\n|[a-z] |a~z의 소문자 |\n|\\w |영문대문자, 영문소문자, 숫자, 밑줄 중 1글자 |\n|\\d |숫자 한개 |\n\n## 4. View - 로직정의\n> 웹 요청을 받고 응답을 반환함 \n> views.py 파일에 정의 \n> 다양한 형태의 응답 데이터를 만들어내기 위한 로직 작성 \n\n### (1) 예시\n\n```python\nfrom django.http import HttpResponse\nimport datetime\n\ndef current_datetime(request):\n now = datetime.datetime.now()\n html = \"<html><body>It is now %s.</body></html>\" % now\n return HttpResponse(html)\n```\n\n+ 에러를 응답하고 싶다면, HttpResponse클래스의 하위 클래스로 정의되어 있음 \n `return HttpResponseNotFound('<h1>Page not found</h1>')`\n\n## 5. Templete - 화면 UI\n> jango 자체 템플릿 있음, 탬플릿 태그/필터 기능 사용 가능하여 파이썬 코드를 직접 사용 가능 \n> 템플릿 파일은 지정된 곳에 반드시 위치 시켜야 함 \n> jango 에서 템플릿 찾을 때는, TEMPLETES 및 INSTALLED_APPS 에서 지정된 앱의 디렉토리 검색 (settings.py 파일에 정의되어 있음) \n\n### (1) 템플릿 위치 찾기\n1. settings.py 파일에 정의\n2. settings.py 파일 예제\n\n```python\nINSTALLED_APPS = [\n 'django.contrib.admin',\n 'django.contrib.auth',\n 'django.contrib.contenttypes'\n]\n\nTEMPLETES = [\n 'DIRS': [os.path.join(BASE_DIR,'templete')]\n]\n```\n\n- TEMPLETES 에 정의된 디렉토리를 먼저 검색\n- INSTALLED_APPS 항목에 등록된 각 앱의 templetes 디렉토리 검색\n\n3. (2)의 파일에서 검색결과 템플릿 위치\n- BASE_DIR의 위치를 /private/programmer/phthon 이라고 가정하자.\n\n```\n<!-- TEMPLETES에 정의된 디렉토리 검색 -->\n/private/programmer/phthon/templetes\n\n<!-- INSTALLED_APPS 항목에 들록된 앱에서 templetes 디렉토리 검색 -->\n/Phthon3/Lib/site-packages/django/admin/templetes\n/Phthon3/Lib/site-packages/django/auth/templetes\n/Phthon3/Lib/site-packages/django/contenttypes/templetes\n```\n\n## 6. MVT 코딩순서\n> 개발 시, 자신만의 코딩순서를 정하는 것이 로직을 풀어나가는데 일관성을 유지할 수 있고 노하우를 빨리 습득 할 수 있다. \n\n1. 프로젝트 뼈대 만들기 : 앱 개발에 필요한 디렉토리와 파일 생성\n2. 모델 코딩하기 : 테이블 관련 사항 개발 (models.py, admin.py)\n3. URLconf 코딩하기 : urls.py\n4. 템플릿과 뷰를 동시에 코딩하기 : tempeletes/ 디렉토리 하위의 *.html 및 views.py\n","dir":"/python/DjangoWebFramework/","name":"jangoDevelopmentPattern.md","path":"python/DjangoWebFramework/jangoDevelopmentPattern.md","url":"/python/DjangoWebFramework/jangoDevelopmentPattern.html"},{"sort":3,"layout":"default","title":"CGI/WSGI 라이브러리","content":"<h1 id=\"cgiwsgi-라이브러리\">CGI/WSGI 라이브러리</h1>\n\n<blockquote>\n <p>CGI/WSGI는 웹서버로 들어오는 요청을 웹어플리케이션으로 처리를 위임하여 결과를 반환받을 때 웹서버와 웹 어플리케이션 사이의 규약을 준수한 라이브러리 <br />\nCGI의 단점을 업그레이드 시킨것이 WSGI 임 <br />\nDjango 는 WSGI를 사용함</p>\n</blockquote>\n\n<h2 id=\"cgi-관련-모듈-현재에-와서-사용빈도-낮음\">CGI 관련 모듈 (현재에 와서 사용빈도 낮음)</h2>\n<ul>\n <li>cgi 모듈 : FieldStorage 클래스 정의 ( post 요청으로 들어온 파라미터를 처리하기 위한 클래스 )</li>\n <li>cgitb 모듈 : 에러 발생 시, 에러에 대한 상세 정보를 제공하기 위한 모듈</li>\n</ul>\n\n<h2 id=\"wsgi\">WSGI</h2>\n<ul>\n <li>WSGI 서버 (mod_wsgi, uWSGI, Gunicorn) : 범용 웹서버인 apache나 NginX는 wsgi 처리 기능이 없으므로, 그러한 웹서버와의 통신 규격을 처리해 주는 파이썬 모듈</li>\n <li>Django도 wsgi 규격을 처리해 줌으로 WSGI 서버라 할 수 있다</li>\n</ul>\n\n<h2 id=\"wsgi의-애플리케이션-처리-과정\">WSGI의 애플리케이션 처리 과정</h2>\n<ol>\n <li>웹서버가 요청을 받음 : url 분석 / 필요시 WSGI에 처리 위임</li>\n <li>WSGI 서버가 파라미터 전달받음 : wsgi.py 실행 / application(environ, start_response) 함수 호출 / console 출력\n <ul>\n <li>environ : 프레임워크에 정의되어 있음, HTTP_HOST, HTTP_USER_AGENT, SERVER_PROTOCOL 등의 HTTP 환경변수</li>\n <li>start_response(status, headers) : 반드시 호출해야 하며, 인자가 이미 정해져 있음. 그냥 사용하면 됨</li>\n </ul>\n </li>\n <li>application 이 실행됨 : environ 환경변수 처리 / 뷰 처리 / HTTPRequest 객체 생성 / start_response() 함수 호출 / HTTPResponse 리턴\n <ul>\n <li>application 함수의 리턴값은 iterable 타입이어야 함</li>\n </ul>\n </li>\n</ol>\n\n<h2 id=\"wsgirefsimple_server-모듈\">wsgiref.simple_server 모듈</h2>\n<blockquote>\n <p>웹 프레임워크가 제공하는 wsgi 서버<br />\nWSGIServer 클래스, WSGIRequestHandler 클래스 제공<br />\n장고의 runserver 도 wsgiref.simple_server 로 만듦</p>\n</blockquote>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kn\">from</span> <span class=\"nn\">wsgiref.simple_server</span> <span class=\"kn\">import</span> <span class=\"n\">make_server</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">application</span><span class=\"p\">(</span><span class=\"n\">environ</span><span class=\"p\">,</span> <span class=\"n\">start_response</span><span class=\"p\">):</span>\n    <span class=\"n\">status</span> <span class=\"o\">=</span> <span class=\"s\">'200 OK'</span>\n    <span class=\"n\">headers</span> <span class=\"o\">=</span> <span class=\"p\">[(</span><span class=\"s\">'Content-Type'</span><span class=\"p\">,</span><span class=\"s\">'text/plain'</span><span class=\"p\">)]</span>\n    <span class=\"n\">start_response</span><span class=\"p\">(</span><span class=\"n\">status</span><span class=\"p\">,</span> <span class=\"n\">headers</span><span class=\"p\">)</span>\n    <span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">b'This is a simple WSGI Application'</span><span class=\"p\">]</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">response</span>\n\n<span class=\"k\">if</span> <span class=\"n\">__name__</span> <span class=\"o\">==</span> <span class=\"s\">'__main__'</span><span class=\"p\">:</span>\n    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s\">'Started WSGI Server on port 8888'</span><span class=\"p\">)</span>\n    <span class=\"c1\"># wsgi API 규격 : make_server(), serve_forever()\n</span>    <span class=\"n\">server</span> <span class=\"o\">=</span> <span class=\"n\">make_server</span><span class=\"p\">(</span><span class=\"s\">''</span><span class=\"p\">,</span><span class=\"mi\">8888</span><span class=\"p\">,</span><span class=\"n\">application</span><span class=\"p\">)</span>\n    <span class=\"n\">server</span><span class=\"p\">.</span><span class=\"n\">serve_forever</span><span class=\"p\">()</span>\n</code></pre>  </div></div>\n<ul>\n <li>웹브라우저에 ‘http://localhost:8888’ 실행하여 확인</li>\n</ul>\n","dir":"/python/webStandardLibrary/","name":"CgiWsgiLibrary.md","path":"python/webStandardLibrary/CgiWsgiLibrary.md","url":"/python/webStandardLibrary/CgiWsgiLibrary.html"},{"sort":3,"layout":"default","title":"프로젝트 뼈대 만들기","content":"<h1 id=\"프로젝트-뼈대-만들기\">프로젝트 뼈대 만들기</h1>\n<blockquote>\n <p>프로젝트를 위해 필요한 디렉토리 및 파일을 구성하기 <br />\n설정파일 셋팅하기 <br />\n기본 테이블 생성하기 <br />\n슈퍼유저 생성하기 <br />\n프로젝트 하위에 애플리케이션 개발을 위한 디렉토리와 파일을 구성하기</p>\n</blockquote>\n\n<h2 id=\"1-프로젝트-디렉토리-및-파일의-구성\">1. 프로젝트 디렉토리 및 파일의 구성</h2>\n\n<ul>\n <li>프로젝트 뼈대가 완성된 디렉토리 체계 + templetes 디렉토리, static 디렉토리, logs 디렉토리등 필요한 디렉토리 추가</li>\n</ul>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>[basedir] ------db.sqlite3\n      |---manage.py\n      |---[mysite]------__init__.py\n      |             |---settings.py\n      |             |---urls.py\n      |             |---wsgi.py\n      |---[myapp]-------__init__.py\n                    |---admin.py\n                    |---apps.py\n                    |---[migrations]------__init__.py\n                    |---models.py\n                    |---tests.py\n                    |---views.py\n      \n</code></pre>  </div></div>\n<ul>\n <li>뼈대 디렉토리에 대한 설명</li>\n</ul>\n\n<table>\n <thead>\n <tr>\n <th style=\"text-align: left\">항목명</th>\n <th style=\"text-align: left\">설명</th>\n </tr>\n </thead>\n <tbody>\n <tr>\n <td style=\"text-align: left\"><font color=\"skyblue\">basedir 디렉토리 </font></td>\n <td style=\"text-align: left\">최상위 루트 디렉토리. 그냥 디렉토리일 뿐임. <br /> settings.py 파일에서 BASE_DIR 항목으로 지정됨</td>\n </tr>\n <tr>\n <td style=\"text-align: left\">db.sqlite3</td>\n <td style=\"text-align: left\">데이터베이스 파일, 테이블이 들어 있음</td>\n </tr>\n <tr>\n <td style=\"text-align: left\">manage.py</td>\n <td style=\"text-align: left\">장고 명령어 처리하는 파일</td>\n </tr>\n <tr>\n <td style=\"text-align: left\"><font color=\"skyblue\">mysite 디렉토리</font></td>\n <td style=\"text-align: left\">프로젝트명으로 만들어진 디렉토리, 프로젝트의 최상위<br />프로젝트 관련 파일들이 들어 있음</td>\n </tr>\n <tr>\n <td style=\"text-align: left\">__init__.py</td>\n <td style=\"text-align: left\">디렉토리에 있으면, 패키지로 인식함</td>\n </tr>\n <tr>\n <td style=\"text-align: left\">settings.py</td>\n <td style=\"text-align: left\">프로젝트 설정파일</td>\n </tr>\n <tr>\n <td style=\"text-align: left\">urls.py</td>\n <td style=\"text-align: left\">최상위 URLconf 파일</td>\n </tr>\n <tr>\n <td style=\"text-align: left\">wsgi.py</td>\n <td style=\"text-align: left\">웹서버와 연동하기 위한 WSGI 연동 파일</td>\n </tr>\n <tr>\n <td style=\"text-align: left\"><font color=\"skyblue\">myapp 디렉토리</font></td>\n <td style=\"text-align: left\">애플리케이션명으로 생성된 디렉토리<br />해당 애플리케이션 파일들이 들어 있음</td>\n </tr>\n <tr>\n <td style=\"text-align: left\">__init__.py</td>\n <td style=\"text-align: left\">이 파일이 있으면 파이썬 패키지로 인식함</td>\n </tr>\n <tr>\n <td style=\"text-align: left\">admin.py</td>\n <td style=\"text-align: left\">Admin 사이트에 모델을 등록해주는 파일</td>\n </tr>\n <tr>\n <td style=\"text-align: left\">apps.py</td>\n <td style=\"text-align: left\">어플리케이션의 설정 클래스를 정의</td>\n </tr>\n <tr>\n <td style=\"text-align: left\"><font color=\"skyblue\">migrations 디렉토리</font></td>\n <td style=\"text-align: left\">데이터베이스 변경사항 관리하기 위한 디렉토리</td>\n </tr>\n <tr>\n <td style=\"text-align: left\">models.py</td>\n <td style=\"text-align: left\">데이터베이스 모델 클래스 정의</td>\n </tr>\n <tr>\n <td style=\"text-align: left\">tests.py</td>\n <td style=\"text-align: left\">단위테스트용 파일. 없어도 됨</td>\n </tr>\n <tr>\n <td style=\"text-align: left\">views.py</td>\n <td style=\"text-align: left\">뷰 함수 정의</td>\n </tr>\n <tr>\n <td style=\"text-align: left\"><font color=\"skyblue\">templetes 디렉토리</font></td>\n <td style=\"text-align: left\">프로젝트별 템플릿과 어플리케이션별 템플릿을 위한 디렉토리를 생성함<br />mysite/templetes 및 myapp/templetes 위치에 생성됨</td>\n </tr>\n <tr>\n <td style=\"text-align: left\"><font color=\"skyblue\">static 디렉토리</font></td>\n <td style=\"text-align: left\">정적파일들을 저장(CSS, javascript파일, image 등)<br />프로젝트 레벨과 어플리케이션 레벨에 생성됨<br />mysite/static 및 myapp/static 위치에 생성될 수 있음</td>\n </tr>\n <tr>\n <td style=\"text-align: left\"><font color=\"skyblue\">logs 디렉토리</font></td>\n <td style=\"text-align: left\">로그파일들이 생성되는 디렉토리<br />settings.py 파일에 LOGGING 항목으로 위치가 지정됨</td>\n </tr>\n </tbody>\n</table>\n\n<h2 id=\"2-프로젝트-뼈대-생성하기\">2. 프로젝트 뼈대 생성하기</h2>\n<blockquote>\n <p>프로젝트는 django-admin startproject 명령어로 생성함\n어플리케이션은 python manage.py startapp 명령어를 이용하여 생성함</p>\n</blockquote>\n\n<ul>\n <li>전체 작업 미리보기</li>\n</ul>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>&gt;django-admin startproject mysite   //mysite라는 프로젝트 생성,base_dir(root 디렉토리) 도 mysite로 생성됨, 후에 mysite 라는 이름은 추후 원하는 이름으로 변경해도 됨. \n&gt; mv mysite rootdir                 //하위의 프로젝트 디렉토리와 햇깔릴 수 있으므로, base 디렉토리를 다른 이름으로 변경함\n&gt; cd mysite                         // base 디렉토리 안으로 이동\n&gt;python manage.py startapp myapp    //manage.py 파일은 장고 명령어를 처리하는 파일임. myapp 이라는 어플리케이션을 생성\n&gt; cd mysite                         // 프로젝트 관리 디렉토리로 이동\n&gt;notepad settings.py    //settings.py 파일을 열어 설정을 확인함\n&gt; cd ..                 //base 디렉토리로 이동, manage.py 파일이 base 디렉토리 하위에 있기 때문에...\n&gt;python manage.py migrate   //데이터베이스에 기본테이블 생성, db.sqlite3 파일이 생성됨\n&gt;python manage.py runserver //현재까지 생성된 작업을 테스트용 서버에서 확인, 웹 브라우저에서 http://localhost:8000 으로 확인함.\n</code></pre>  </div></div>\n<h3 id=\"1--프로젝트-생성하기\">(1) 프로젝트 생성하기</h3>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>$ &gt; django-admin startproject mysite\n$ &gt; cd mv mysite dootdir\n</code></pre>  </div></div>\n<ul>\n <li>mysite base 디렉토리와 하위에 mysite 프로젝트 관리 디렉토리가 생성됨</li>\n <li>base 디렉토리와 프로젝트 디렉토리 이름이 같으면 햇깔리므로 base 디렉토리 이름을 변경함</li>\n <li>mysite 프로젝트 디렉토리 하위에 <strong>init</strong>.py, wsgi.py, asgi.py, urls.py, settings.py 파일이 생성됨</li>\n</ul>\n\n<h3 id=\"2-어플리케이션-생성하기\">(2) 어플리케이션 생성하기</h3>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>$ &gt; cd rootdir\n$rootdir &gt; python manage.py startapp myapps\n</code></pre>  </div></div>\n<ul>\n <li>myapps 디렉토리 생성</li>\n <li>myapps 하위에 admin.py, apps.py, migrations, models.py, tests.py views.py, <strong>init</strong>.py 생성됨</li>\n</ul>\n\n<h3 id=\"3-프로젝트-설정파일-확인-및-변경\">(3) 프로젝트 설정파일 확인 및 변경</h3>\n<blockquote>\n <p>mysite 프로젝트 디렉토리 하위의 settings.py 파일을 변경. <br />\n각종 디렉토리 위치, 로그 형식, 프로젝트에 포함된 어플리케이션들의 이름등이 정의되어 있음.</p>\n</blockquote>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>$ mysite &gt; vim settings.py\n</code></pre>  </div></div>\n<h4 id=\"ㄱ-allowed_hosts-항목\">ㄱ. ALLOWED_HOSTS 항목</h4>\n<blockquote>\n <p>DEBUG=True 면 개발모드, false 면 운영모드 <br />\n운영모드의 경우, 반드시 ALLOWED_HOSTS에 서버의 IP나 도메인을 지정해야 함</p>\n</blockquote>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">ALLOWED_HOSTS</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">'localhost'</span><span class=\"p\">,</span><span class=\"s\">'127.0.0.1'</span><span class=\"p\">]</span>\n</code></pre>  </div></div>\n\n<h4 id=\"ㄴ-installed_apps-항목\">ㄴ. INSTALLED_APPS 항목</h4>\n<blockquote>\n <p>프로젝트에 포함되는 어플리케이션을 모두 설정파일에 등록 <br />\n간단하게 어플리케이션 이름 (myapps)을 등록해도 되지만, 어플리케이션의 설정 클래스를 등록하는 것이 더 정확함 <br />\nmyapps 의 어플리케이션 설정 클래스는 myapps 하단의 apps.py 파일내에 있음</p>\n</blockquote>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">INSTALLED_APPS</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"s\">'django.contrib.admin'</span><span class=\"p\">,</span>\n    <span class=\"s\">'django.contrib.auth'</span><span class=\"p\">,</span>\n    <span class=\"s\">'django.contrib.contenttypes'</span><span class=\"p\">,</span>\n    <span class=\"s\">'django.contrib.sessions'</span><span class=\"p\">,</span>\n    <span class=\"s\">'django.contrib.messages'</span><span class=\"p\">,</span>\n    <span class=\"s\">'django.contrib.staticfiles'</span><span class=\"p\">,</span>\n    <span class=\"s\">'myapps.apps.AppConfig'</span>\n<span class=\"p\">]</span>\n</code></pre>  </div></div>\n\n<h4 id=\"ㄷ-databases-항목\">ㄷ. DATABASES 항목</h4>\n<blockquote>\n <p>장고는 default로 SQLite3 데이터베이스 엔진을 사용하도록 설정됨 <br />\n다른 데이터베이스 엔진으로 변경 할 수도 있음</p>\n</blockquote>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">DATABASES</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s\">'default'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"s\">'ENGINE'</span><span class=\"p\">:</span> <span class=\"s\">'django.db.backends.sqlite3'</span><span class=\"p\">,</span>\n        <span class=\"s\">'NAME'</span><span class=\"p\">:</span> <span class=\"n\">BASE_DIR</span> <span class=\"o\">/</span> <span class=\"s\">'db.sqlite3'</span><span class=\"p\">,</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre>  </div></div>\n\n<h4 id=\"ㄹ-타임존-항목-지정\">ㄹ. 타임존 항목 지정</h4>\n<blockquote>\n <p>‘UTC’(섹계표준시)로 되어 있는 것을 ‘Asia/Seoul’로 변경</p>\n</blockquote>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\"># TIME_ZONE = 'UTC'\n</span><span class=\"n\">TIME_ZONE</span> <span class=\"o\">=</span> <span class=\"s\">'Asia/Seoul'</span>\n</code></pre>  </div></div>\n\n<ul>\n <li>USE_TZ 항목\n <ul>\n <li>USE_TZ=True 로 설정하면, DB는 UTC 시간으로 저장되고 UI 처리시에는 TIME_ZONE 항목에 설정된 시간대를 반영하여 처리</li>\n <li>USE_TZ=False 로 하면, DB와 UI 모두 TIME_ZONE 항목에 설정된 시간대로 반영됨</li>\n <li>USE_TZ=True 로 하면, 일광절약시간제를 반영하여 알아서 계산해 줌</li>\n <li>우리나라의 경우, <strong>일광절약시간제를 사용하지 않기 때문에, USE_TZ을 False로 설정하는 것이 더 편리함</strong></li>\n </ul>\n </li>\n</ul>\n\n<h3 id=\"4-기본-테이블-생성하기\">(4) 기본 테이블 생성하기</h3>\n<blockquote>\n <p><strong>사용자 및 그룹 테이블등을 기본적으로 생성해주는 작업</strong><br />\nmigrate 명령을 실행하면 db.SQLite3 파일이 자동 생성됨</p>\n</blockquote>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>$ rootdir&gt; python manage.py migrate\n</code></pre>  </div></div>\n<h3 id=\"5-지금까지-작업한-것-확인하기\">(5) 지금까지 작업한 것 확인하기</h3>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>$ rootdir&gt; python manage.py runserver 0.0.0.0:8000 // 주소 0.0.0.0 의 의미는, 현재 명령을 실행하는 서버의 ip와 무관하게 웹 접속을 받겠다는 의미\n</code></pre>  </div></div>\n\n<ul>\n <li>runserver 사용법\n <ol>\n <li>\n <blockquote>\n <p>python manage.py runserver : 디폴트로 127.0.0.1:8000 을 사용함</p>\n </blockquote>\n </li>\n <li>\n <blockquote>\n <p>python manage.py runserver 8888 : 127.0.0.1:8888 을 사용함</p>\n </blockquote>\n </li>\n <li>\n <blockquote>\n <p>python manage.py runserver 0.0.0.0:8000&amp; : &amp;를 명령 끝에 추가하면, 백그라운드에서 실행함</p>\n </blockquote>\n </li>\n </ol>\n </li>\n</ul>\n\n<h3 id=\"6-자동생성된-관리자-화면-확인하기\">(6) 자동생성된 관리자 화면 확인하기</h3>\n\n<ul>\n <li>http://127.0.0.1:8000/admin 으로 접속</li>\n</ul>\n\n<ol>\n <li>id, pw 입력창 보여짐 : 관리자(superUser) 생성이 필요함</li>\n</ol>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>$&gt;python manage.py createsuperuser\n</code></pre>  </div></div>\n<ol>\n <li>console 화면의 지시에 따라 Username, Email, Password, Password(again) 을 입력하여 관리자 계정 생성</li>\n <li>http://127.0.0.1:8000/admin 으로 접속하여 생성한 계정으로 로그인 함</li>\n <li>Users와 Groups 테이블이 보임 =&gt; django.contrib.auth 애플리케이션에 User와 Group 이 미리 정의되어 있기 때문에 보여짐</li>\n</ol>\n\n<h3 id=\"7-생성된-프로젝트-뼈대-확인하기\">(7) 생성된 프로젝트 뼈대 확인하기</h3>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code># window\n$ C:&gt; tree /F rootdir\n# macos\n&gt; brew install tree\n&gt; tree rootdir\n</code></pre>  </div></div>\n\n<p><img src=\"../../../assets/images/project_tree.png\" alt=\"project tree\" /></p>\n","dir":"/python/DjangoWebFramework/","name":"applicationArchithect.md","path":"python/DjangoWebFramework/applicationArchithect.md","url":"/python/DjangoWebFramework/applicationArchithect.html"},{"sort":3,"permalink":"/python/DjangoCoreFunction/","layout":"default","title":"Django 핵심기능","content":"<h1 id=\"django-핵심기능\">Django 핵심기능</h1>\n\n<blockquote>\n <p>Admin 사이트 꾸미기\n장고 파이썬 쉘로 데이터 조작하기\n템플릿 시스템\n폼 처리하기\n클래스형 뷰 <br />\n로그 남기기</p>\n</blockquote>\n\n<p>source: <code class=\"language-plaintext highlighter-rouge\">python/DjangoCoreFunction/README.md</code></p>\n","dir":"/python/DjangoCoreFunction/","name":"README.md","path":"python/DjangoCoreFunction/README.md","url":"/python/DjangoCoreFunction/"},{"sort":4,"layout":"default","title":"애플리케이션 개발하기 - Model 코딩","content":"<h1 id=\"애플리케이션-개발하기---model-코딩\">애플리케이션 개발하기 - Model 코딩</h1>\n<blockquote>\n <p>데이터베이스에 테이블을 생성하는 작업</p>\n</blockquote>\n\n<h2 id=\"1-작업순서\">1. 작업순서</h2>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>&gt; vim models.py     // 테이블을 정의함\n&gt; vim admins.py     // 관리자 페이지에서 테이블이 화면에 보이도록 함\n&gt; python manage.py makemigrations       // 데이터베이스에 변경이 필요한 부분 추출\n&gt; python manage.py migrate              // 데이터베이스에 변경사항 반영함\n&gt; python manage.py runserver            // 현재까지 작업을 개발서버에 반영함\n</code></pre>  </div></div>\n\n<h2 id=\"2-테이블-정의\">2. 테이블 정의</h2>\n<blockquote>\n <p>Question 과 Choice 두개의 테이블이 필요<br />\npolls/models.py 파일에 정의</p>\n</blockquote>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kn\">from</span> <span class=\"nn\">django.db</span> <span class=\"kn\">import</span> <span class=\"n\">models</span>\n\n<span class=\"c1\"># Create your models here.\n</span>\n<span class=\"c1\"># Question 테이블의 PK : 장고는 자동으로 Not Null &amp; Autoincrement인 id 를 만들어 줌\n</span><span class=\"k\">class</span> <span class=\"nc\">Question</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"p\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n    <span class=\"n\">question_text</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"p\">.</span><span class=\"n\">CharField</span><span class=\"p\">(</span><span class=\"n\">max_length</span><span class=\"o\">=</span><span class=\"mi\">200</span><span class=\"p\">)</span>\n    <span class=\"c1\"># DateTimeField의 'date published' 는 pub_date에 대한 레이블 문구. Admin 사이트에서 볼 수 있음.\n</span>    <span class=\"n\">pub_date</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"p\">.</span><span class=\"n\">DateTimeField</span><span class=\"p\">(</span><span class=\"s\">'date published'</span><span class=\"p\">)</span>\n    <span class=\"c1\"># 객체를 문자열로 표현하기 위해 선언하는 함수\n</span>    <span class=\"k\">def</span> <span class=\"nf\">__str__</span> <span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">question_text</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Choice</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"p\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n    <span class=\"c1\"># 항상 인수로 전달된 테이블의 PK 와 연결됨. 실제 테이블에는 '_id' 라는 접미사가 붙음\n</span>    <span class=\"n\">question</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"p\">.</span><span class=\"n\">ForeignKey</span><span class=\"p\">(</span><span class=\"n\">Question</span><span class=\"p\">,</span> <span class=\"n\">on_delete</span><span class=\"o\">=</span><span class=\"n\">models</span><span class=\"p\">.</span><span class=\"n\">CASCADE</span><span class=\"p\">)</span>\n    <span class=\"n\">choice_text</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"p\">.</span><span class=\"n\">CharField</span><span class=\"p\">(</span><span class=\"n\">max_length</span><span class=\"o\">=</span><span class=\"mi\">200</span><span class=\"p\">)</span>\n    <span class=\"n\">votes</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"p\">.</span><span class=\"n\">IntegerField</span><span class=\"p\">(</span><span class=\"n\">default</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">__str__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">choice_text</span>\n</code></pre>  </div></div>\n\n<h2 id=\"3-admin-사이트에-테이블-반영\">3. Admin 사이트에 테이블 반영</h2>\n<blockquote>\n <p>생성한 테이블을 admin 사이트에 보이도록 등록함\npolls/admins.py 파일</p>\n</blockquote>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kn\">from</span> <span class=\"nn\">django.contrib</span> <span class=\"kn\">import</span> <span class=\"n\">admin</span>\n<span class=\"kn\">from</span> <span class=\"nn\">polls.models</span> <span class=\"kn\">import</span> <span class=\"n\">Question</span><span class=\"p\">,</span> <span class=\"n\">Choice</span>\n<span class=\"c1\"># Register your models here.\n</span>\n<span class=\"n\">admin</span><span class=\"p\">.</span><span class=\"n\">site</span><span class=\"p\">.</span><span class=\"n\">register</span><span class=\"p\">(</span><span class=\"n\">Question</span><span class=\"p\">)</span>\n<span class=\"n\">admin</span><span class=\"p\">.</span><span class=\"n\">site</span><span class=\"p\">.</span><span class=\"n\">register</span><span class=\"p\">(</span><span class=\"n\">Choice</span><span class=\"p\">)</span>\n</code></pre>  </div></div>\n\n<h2 id=\"4-데이터베이스에-변경사항-반영\">4. 데이터베이스에 변경사항 반영</h2>\n<blockquote>\n <p>polls/migration 디렉토리 밑에 테이블의 변경사항을 기록하는 파일이 생성됨. 이 파일은 실제 db 동기화 ( = migrate) 시, 참조하게 됨</p>\n</blockquote>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>ch3&gt; python manage.py makemigrations\nMigrations for 'polls':\n  polls/migrations/0001_initial.py\n    - Create model Question\n    - Create model Choice\nch3&gt; python manage.py migrate\nOperations to perform:\n  Apply all migrations: admin, auth, contenttypes, polls, sessions\nRunning migrations:\n  Applying polls.0001_initial... OK\n</code></pre>  </div></div>\n\n<ul>\n <li><strong>데이터베이스 migrate 시, 사용하게 된 aql 스키마를 아래와 같이 확인 할 수 있다</strong></li>\n</ul>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>ch3&gt; python manage.py sqlmigrate polls 0001 \n</code></pre>  </div></div>\n\n<h2 id=\"5-지금까지-작업한-것-확인하기\">5. 지금까지 작업한 것 확인하기</h2>\n<blockquote>\n <p>웹 브라우저의 Admin 사이트에서 추가된 테이블을 확인한다.</p>\n</blockquote>\n\n<p><img src=\"/assets/images/admin_polls_Question_Choice.png\" alt=\"Admin 사이트에 추가된 테이블\" /></p>\n","dir":"/python/DjangoWebFramework/","name":"applicationDevelopment-Model.md","path":"python/DjangoWebFramework/applicationDevelopment-Model.md","url":"/python/DjangoWebFramework/applicationDevelopment-Model.html"},{"sort":5,"layout":"default","title":"애플리케이션 개발하기 - URLconf, View 및 Templete 코딩","content":"# 애플리케이션 개발하기 - URLconf, View 및 Templete 코딩\n> ch3/mysite/urls.py 파일에 정의 \n\n## 1. 처리 흐름 설계\n\n|URL 패턴 |View 이름 |Templete 이름 |\n|:--- |:--- |:--- |\n|/polls/ |index() |index.html |\n|/polls/5/ |detail() |detail.html |\n|/polls/5/vote/ |vote() |REDIRECT:/polls/5/result |\n|/polls/5/results/ |results() |results.html |\n\n## 2. 작업 순서\n> URLconf -> templete or view\n\n1. urls.py 작성\n2. views.index(), index.html 작성\n3. views.detail(), detail.html 작성\n4. views.vote() 작성\n5. views.results(), results.html 작성\n\n## 3. URLconf 코딩\n> admin 사이트를 포함하여 5개의 url 가 필요함.\n> ch3/mysite/urls.py 에 코딩\n\n- mysite/settings.py 파일의 ROOT_URLCONF 항목이 정의되어 있으며, 이 항목에 정의된 urls.py 파일을 가장 먼저 분석함\n- 지금처럼 mysite/urls.py 에 polls에 대한 urlconf를 작성할 수도 있고, mysite/urls.py와 polls/urls.py에 나누어서 작성 할 수도 있음\n- <font color='red'>파일을 나누어 작성하는 방법을 추천함, 예시 2 (계층적인 구조로 유지보수에 좋음)</font>\n\n- **예시 1** (mysite/urls.py 에 한번에 작성하는 방법)\n\n + mysite/urls.py\n \n ```python\n from django.contrib import admin\n from django.urls import path\n from polls import views\n\n # URL 패턴 매칭이 위에서 아래로 진행되므로, 순서에 유의 해야 함\n # path() 함수는, route, view 2개의 필수 인자와 kwargs, name 2개의 선택 인자를 받음\n # route: URL 스트링\n # view: 호출되는 뷰 함수\n # kwargs: URL에서 추출된 파라미터 외에 추가적인 파라미터를 함수에 전달 할때 사용\n # name: 각 URL 패턴별로 이름을 붙여줌. 이 이름을 Templete 에서 많이 사용함.\n urlpatterns = [\n path('admin/', admin.site.urls),\n path('polls/', views.index, name='index'),\n path('polls/<int:question_id>/', views.detail, name='detail'),\n path('polls/<int:question_id>/vote/',views.vote, name='vote'),\n path('polls/<int:question_id>/results/',views.results, name='results'),\n\n ]\n\n ```\n- **예시 2** (mysite/urls.py와 polls/urls.py에 나누어서 작성하는 방법)\n \n + mysite/urls.py\n\n ```python\n from django.contrib import admin\n from django.urls import path, include\n import polls\n\n urlpatterns = [\n path('admin/', admin.site.urls),\n path('polls/',include('polls.urls')),\n ]\n ```\n\n + polls/urls.py\n\n ```python\n from django.urls import path\n from . import views\n\n # URL 패턴 매칭이 위에서 아래로 진행되므로, 순서에 유의 해야 함\n # path() 함수는, route, view 2개의 필수 인자와 kwargs, name 2개의 선택 인자를 받음\n # route: URL 스트링\n # view: 호출되는 뷰 함수\n # kwargs: URL에서 추출된 파라미터 외에 추가적인 파라미터를 함수에 전달 할때 사용\n # name: 각 URL 패턴별로 이름을 붙여줌. 이 이름을 Templete 에서 많이 사용함.\n\n # app_name 은, URL가 중복되는 경우 네임스페이스를 구별해 줌 (예를 들어, polls 애플리케이션과 임의의 blogs 라는 애플리케이션이 'detail' 이라는 url 패턴을 갖는 경우,)\n app_name = 'polls'\n urlpatterns = [\n path('', views.index, name='index'), # /polls/\n path('<int:question_id>/', views.detail, name='detail'), # /polls/5/\n path('<int:question_id>/vote/',views.vote, name='vote'), # /polls/5/vote/\n path('<int:question_id>/results/',views.results, name='results'), # /polls/5/results\n\n ]\n ```\n\n## 4. 뷰 함수 index() 및 템플릿 작성\n\n### (1) 템플릿파일을 생성할 디렉토리 생성\n\n```\n~polls>mkdir templates\n# templates안에 또 polls 디렉토리를 생성하여 그 하위에 템플릿 파일을 저장하는 이유는, 이름이 같은 템플릿 파일들의 충돌을 막기 위함\n~polls>mkdir templates/polls\n```\n\n### (2) index.html 템플릿 파일 생성\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n <meta charset=\"UTF-8\">\n <title>Title</title>\n</head>\n<body>\n {% if latest_list %}\n <ul>\n {% for question in latest_question_list %}\n <li><a href=\"/polls/{{ question.id }}/\">{{ question.question_text }}</a> </li>\n {% endfor %}\n </ul>\n {% else %}\n <p>No polls are available.</p>\n {% endif %}\n</body>\n</html>\n```\n\n### (3) index() 뷰 함수 생성\n> polls/views.py 파일에 함수 정의\n\n```python\nfrom django.shortcuts import render\nfrom polls.models import Question\n\n# Create your views here.\ndef index(request):\n # Question 테이블 객체에서 pub_date 컬럼의 역순으로 정렬하여 5개의 최근 Question 객체를 가져옴\n latest_question_list = Question.objects.all().order_by('-pub_date')[:5]\n context = {'latest_question_list':latest_question_list}\n # render() 는 context를 인자로 받아 HTTPResponse를 반환함\n return render(request, 'polls/index.html', context)\n```\n\n- 단축함수란?\n + 템플릿 변수를 로딩한 후에 컨텍스트 변수를 적용하고, 그 결과를 HTTPResponse 객체에 담아 반환하는 작업등의 공통 기능들을 장고에서 미리 만들어 내장함수로 제공하는 함수.\n + 예를 들어, render() 함수\n\n## 5. 뷰 함수 detail() 및 폼 템플릿 작성\n\n### (1) detail.html 템플릿 작성\n\n```html\n{% raw %}\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n <meta charset=\"UTF-8\">\n <title>Title</title>\n</head>\n<body>\n <h1>{{ question.question_text }}</h1>\n {% if error_message %}<p><strong>{{ error_message }}</strong></p>{% endif %}\n <!-- url 탬플릿 태그 사용, polls:vote는 URLconf 에서 적은 url 패턴 이름 -->\n <form action=\"{% url 'polls:vote' question.id %}\" method=\"post\">\n <!--폼을 처리하는 경우, CSRF 공격을 방지하기 위한 기능-->\n {%csrf_token%}\n <!--vote() 뷰 함수에서 request.POST['choice'] 구문으로 액세스 할 수 있음-->\n <!--input 태그의 name, id 속성은 request.POST 사전에서 key, value 로 상돋됨-->\n {% for choice in question.choice_set.all %}\n <input type=\"radio\" name=\"choice\" id=\"choice{{ forloop.counter }}\" value=\"{{ choice.id }}\"/>\n <label for=\"choice{{ forloop.counter }}\">{{choice.choice_text}}</label><br/>\n {% endfor %}\n <input type=\"submit\" value = \"Vote\" />\n </form>\n</body>\n</html>\n{% endraw %}\n```\n\n- choice_set 속성 : Question:Choice 의 관계가 1:N 으로, 이런 관계일 때 XXX_set 이라는 속성을 기본적으로 제공함\n\n### (2) detail() 뷰 함수 작성\n\n```python\nfrom django.shortcuts import render, get_object_or_404\nfrom polls.models import Question\n\n# Create your views here.\n# def index(request):(생략)\n\ndef detail(request, question_id):\n question = get_object_or_404(Question, pk=question_id)\n return render(request, 'polls/detail.html', {'question':question})\n```\n- 단축함수 `get_object_or_404` : 첫번째 인자는 모델 클래스, 두번째 인자부터 조건. 조건에 맞는 객체를 조회하고, 없으면 404 에러를 반환. 'get_list_or_404()' 함수도 있음\n\n## 6. 뷰 함수 vote() 및 리다이렉션 작성\n{% raw %}\n> detail.html 로 부터 /polls/5/vote url로 POST 방식으로 전달됨 \n> detail.html : `<form action=\"{% url 'polls:vote' question.id %}\" method='POST'>` \n> urls.py : `path('polls/<int:question_id>/vote/', views.vote, name='vote' )` \n{% endraw %}\n\n\n### (1) vote() 뷰 함수 작성하고 Redirect 하기\n\n```python\nfrom django.shortcuts import render, get_object_or_404\nfrom polls.models import Question, Choice\nfrom django.http import HttpResponseRedirect\nfrom django.urls import reverse\n\n# Create your views here.\n# def index(request): (생략)\n# def detail(request, question_id):(생략)\n\ndef vote(request, question_id):\n question = get_object_or_404(Question, pk=question_id)\n try:\n selected_choice = question.choice_set.get(pk=request.POST['choice'])\n except (KeyError, Choice.DoesNotExist):\n # 설문 투표 폼을 다시 보여준다\n return render(request, 'polls/detail.html', {'question':question, 'error_message':\"You didn't select a choice.\"})\n\n else:\n selected_choice.votes +=1\n selected_choice.save()\n # POST 데이터를 정상적으로 처리하였으면,\n # 항상 HttpResponseRedirect를 반환하여 리다리엑션 처리함\n return HttpResponseRedirect(reverse('polls:results', args=(question_id,)))\n```\n\n- redirect : django.http.HttpResponseRedirect 함수 사용.\n- KeyError : request.POST['choice'] 의 choice 라는 키가 없을 때 발생하는 에러\n- Choice.DoesNotExist : 검색 조건에 맞는 Choice 객체가 없을 때 발생하는 에러\n- `reverse()` : 보통 URL 패턴의 URL 스트링으로 부터 url 검색을 시작하는데, reverse() 함수는 URL 패턴 이름으로 URL 스트링을 찾아가도록 하는 함수.\n- <font color='red'>소스에 URL 스트링을 하드코딩 하지 말고 reverse() 함수를 사용하도록 함</font>\n\n## 7. 뷰 함수 results() 와 템플릿 작성\n\n### (1) results() 뷰 함수 작성\n\n```python\ndef results(request, question_id):\n question = get_object_or_404(Question, pk=question_id)\n return render(request, 'polls/results.html', {'question':question})\n```\n\n### (2) results.html 탬플릿 작성\n\n```html\n{% raw %}\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n <meta charset=\"UTF-8\">\n <title>Title</title>\n</head>\n<body>\n <h1>{{ quesiton.question_text }}</h1>\n <ul>\n {% for choice in question.choice_set.all %}\n <li>{{choice.text}} - {{choice.votes}} vote{{choice.votes|pluralize}}</li>\n {% endfor %}\n </ul>\n <a href=\"{% url 'polls:detail' question.id %}\">Vote Again?</a>\n</body>\n</html>\n{% endraw %}\n```\n\n- `vote{{choice.votes|pluralize}}`: choice.votes 값에 따라 복수로 표현할지를 결정 하는 pluralize 탬플릿 필터, 결과적으로 'vote' 또는 'votes'로 보여짐\n\n## 8. 지금까지 작업 확인하기\n\n1. 테스트서버 실행\n`$ch3>python manage.py runserver`\n\n2. 웹 브라우저에서 'http://localhost:8000/polls' 실행\n - 현재 데이터가 하나도 없어서 빈 페이지로 나타남\n ![polls/index.html](/assets/images/polls_index.png)\n\n3. Admin 사이트(http://localhost:8000/admin)로 로그인 하여, Question, Choice 테이블에 데이터 입력\n - Questions 테이블\n\n |question_text|Date|Time|\n |What is your hobby?|today|now|\n |What do you like best?|today|now|\n |Where do you live?|today|now|\n\n - Choices ( 나머지 question_text에도 3개 정도의 choice_text를 임의로 등록해 보자.)\n\n |question_text|choice_text|vote|\n |What is your hobby?|Reading|0|\n |What is your hobby?|Soccer|0|\n |What is your hobby?|Climbing|0|\n\n4. 웹 브라우저에서 'http://localhost:8000/polls' 실행\n - Question 목록이 보여짐\n![Question list](/assets/images/polls_index_question_list.png)\n\n5. 'What is your hobby?' 를 클릭하여, 'http://localhost:8000/polls/1/' 실행\n - choice 목록이 보여짐\n![Question list](/assets/images/polls_detail.png)\n\n6. 'Reading'에 체크하고 'vote' 버튼 클릭하여 'http://localhost:8000/1/vote/' 실행 -> 'http://localhost:8000/1/results' 로 redirect 됨\n - choice의 투표 결과가 보여지는 result.html 화면이 보여짐\n ![Question list](/assets/images/polls_result.png)\n","dir":"/python/DjangoWebFramework/","name":"jangoDevelopment-View_Templete.md","path":"python/DjangoWebFramework/jangoDevelopment-View_Templete.md","url":"/python/DjangoWebFramework/jangoDevelopment-View_Templete.html"}]